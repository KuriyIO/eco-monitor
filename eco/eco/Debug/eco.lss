
AVRASM ver. 2.1.57  D:\diplom\eco\eco\eco.asm Fri Nov 06 03:13:15 2015

[builtin](2): Including file 'D:\dev\Atmel Toolchain\AVR Assembler\Native\2.1.1175\avrassembler\Include\m32def.inc'
D:\diplom\eco\eco\eco.asm(1): Including file 'D:\dev\Atmel Toolchain\AVR Assembler\Native\2.1.1175\avrassembler\Include\m32def.inc'
D:\diplom\eco\eco\eco.asm(26): Including file 'D:\diplom\eco\eco\int_table.inc'
D:\diplom\eco\eco\eco.asm(27): Including file 'D:\diplom\eco\eco\menu.inc'
D:\diplom\eco\eco\eco.asm(28): Including file 'D:\diplom\eco\eco\LCD.inc'
D:\diplom\eco\eco\eco.asm(29): Including file 'D:\diplom\eco\eco\keyboard.inc'
D:\diplom\eco\eco\eco.asm(30): Including file 'D:\diplom\eco\eco\timers.inc'
D:\diplom\eco\eco\eco.asm(33): Including file 'D:\diplom\eco\eco\core_init.inc'
                 
                 .include "m32def.inc" //include define for ATmega32 controller
                 
                 ;***** Created: 2011-02-09 12:03 ******* Source: ATmega32.xml ************
                 ;*************************************************************************
                 ;* A P P L I C A T I O N   N O T E   F O R   T H E   A V R   F A M I L Y
                 ;* 
                 ;* Number            : AVR000
                 ;* File Name         : "m32def.inc"
                 ;* Title             : Register/Bit Definitions for the ATmega32
                 ;* Date              : 2011-02-09
                 ;* Version           : 2.35
                 ;* Support E-mail    : avr@atmel.com
                 ;* Target MCU        : ATmega32
                 ;* 
                 ;* DESCRIPTION
                 ;* When including this file in the assembly program file, all I/O register 
                 ;* names and I/O register bit names appearing in the data book can be used.
                 ;* In addition, the six registers forming the three data pointers X, Y and 
                 ;* Z have been assigned names XL - ZH. Highest RAM address for Internal 
                 ;* SRAM is also defined 
                 ;* 
                 ;* The Register names are represented by their hexadecimal address.
                 ;* 
                 ;* The Register Bit names are represented by their bit number (0-7).
                 ;* 
                 ;* Please observe the difference in using the bit names with instructions
                 ;* such as "sbr"/"cbr" (set/clear bit in register) and "sbrs"/"sbrc"
                 ;* (skip if bit in register set/cleared). The following example illustrates
                 ;* this:
                 ;* 
                 ;* in    r16,PORTB             ;read PORTB latch
                 ;* sbr   r16,(1<<PB6)+(1<<PB5) ;set PB6 and PB5 (use masks, not bit#)
                 ;* out   PORTB,r16             ;output to PORTB
                 ;* 
                 ;* in    r16,TIFR              ;read the Timer Interrupt Flag Register
                 ;* sbrc  r16,TOV0              ;test the overflow flag (use bit#)
                 ;* rjmp  TOV0_is_set           ;jump if set
                 ;* ...                         ;otherwise do something else
                 ;*************************************************************************
                 
                 #ifndef _M32DEF_INC_
                 #define _M32DEF_INC_
                 
                 
                 #pragma partinc 0
                 
                 ; ***** SPECIFY DEVICE ***************************************************
                 .device ATmega32
                 #pragma AVRPART ADMIN PART_NAME ATmega32
                 .equ	SIGNATURE_000	= 0x1e
                 .equ	SIGNATURE_001	= 0x95
                 .equ	SIGNATURE_002	= 0x02
                 
                 #pragma AVRPART CORE CORE_VERSION V2E
                 
                 
                 ; ***** I/O REGISTER DEFINITIONS *****************************************
                 ; NOTE:
                 ; Definitions marked "MEMORY MAPPED"are extended I/O ports
                 ; and cannot be used with IN/OUT instructions
                 .equ	SREG	= 0x3f
                 .equ	SPL	= 0x3d
                 .equ	SPH	= 0x3e
                 .equ	OCR0	= 0x3c
                 .equ	GICR	= 0x3b
                 .equ	GIFR	= 0x3a
                 .equ	TIMSK	= 0x39
                 .equ	TIFR	= 0x38
                 .equ	SPMCR	= 0x37
                 .equ	TWCR	= 0x36
                 .equ	MCUCR	= 0x35
                 .equ	MCUCSR	= 0x34
                 .equ	TCCR0	= 0x33
                 .equ	TCNT0	= 0x32
                 .equ	OSCCAL	= 0x31
                 .equ	OCDR	= 0x31
                 .equ	SFIOR	= 0x30
                 .equ	TCCR1A	= 0x2f
                 .equ	TCCR1B	= 0x2e
                 .equ	TCNT1L	= 0x2c
                 .equ	TCNT1H	= 0x2d
                 .equ	OCR1AL	= 0x2a
                 .equ	OCR1AH	= 0x2b
                 .equ	OCR1BL	= 0x28
                 .equ	OCR1BH	= 0x29
                 .equ	ICR1L	= 0x26
                 .equ	ICR1H	= 0x27
                 .equ	TCCR2	= 0x25
                 .equ	TCNT2	= 0x24
                 .equ	OCR2	= 0x23
                 .equ	ASSR	= 0x22
                 .equ	WDTCR	= 0x21
                 .equ	UBRRH	= 0x20
                 .equ	UCSRC	= 0x20
                 .equ	EEARL	= 0x1e
                 .equ	EEARH	= 0x1f
                 .equ	EEDR	= 0x1d
                 .equ	EECR	= 0x1c
                 .equ	PORTA	= 0x1b
                 .equ	DDRA	= 0x1a
                 .equ	PINA	= 0x19
                 .equ	PORTB	= 0x18
                 .equ	DDRB	= 0x17
                 .equ	PINB	= 0x16
                 .equ	PORTC	= 0x15
                 .equ	DDRC	= 0x14
                 .equ	PINC	= 0x13
                 .equ	PORTD	= 0x12
                 .equ	DDRD	= 0x11
                 .equ	PIND	= 0x10
                 .equ	SPDR	= 0x0f
                 .equ	SPSR	= 0x0e
                 .equ	SPCR	= 0x0d
                 .equ	UDR	= 0x0c
                 .equ	UCSRA	= 0x0b
                 .equ	UCSRB	= 0x0a
                 .equ	UBRRL	= 0x09
                 .equ	ACSR	= 0x08
                 .equ	ADMUX	= 0x07
                 .equ	ADCSRA	= 0x06
                 .equ	ADCH	= 0x05
                 .equ	ADCL	= 0x04
                 .equ	TWDR	= 0x03
                 .equ	TWAR	= 0x02
                 .equ	TWSR	= 0x01
                 .equ	TWBR	= 0x00
                 
                 
                 ; ***** BIT DEFINITIONS **************************************************
                 
                 ; ***** EEPROM ***********************
                 ; EEDR - EEPROM Data Register
                 .equ	EEDR0	= 0	; EEPROM Data Register bit 0
                 .equ	EEDR1	= 1	; EEPROM Data Register bit 1
                 .equ	EEDR2	= 2	; EEPROM Data Register bit 2
                 .equ	EEDR3	= 3	; EEPROM Data Register bit 3
                 .equ	EEDR4	= 4	; EEPROM Data Register bit 4
                 .equ	EEDR5	= 5	; EEPROM Data Register bit 5
                 .equ	EEDR6	= 6	; EEPROM Data Register bit 6
                 .equ	EEDR7	= 7	; EEPROM Data Register bit 7
                 
                 ; EECR - EEPROM Control Register
                 .equ	EERE	= 0	; EEPROM Read Enable
                 .equ	EEWE	= 1	; EEPROM Write Enable
                 .equ	EEMWE	= 2	; EEPROM Master Write Enable
                 .equ	EERIE	= 3	; EEPROM Ready Interrupt Enable
                 
                 
                 ; ***** WATCHDOG *********************
                 ; WDTCR - Watchdog Timer Control Register
                 .equ	WDP0	= 0	; Watch Dog Timer Prescaler bit 0
                 .equ	WDP1	= 1	; Watch Dog Timer Prescaler bit 1
                 .equ	WDP2	= 2	; Watch Dog Timer Prescaler bit 2
                 .equ	WDE	= 3	; Watch Dog Enable
                 .equ	WDTOE	= 4	; RW
                 .equ	WDDE	= WDTOE	; For compatibility
                 
                 
                 ; ***** EXTERNAL_INTERRUPT ***********
                 ; GICR - General Interrupt Control Register
                 .equ	GIMSK	= GICR	; For compatibility
                 .equ	IVCE	= 0	; Interrupt Vector Change Enable
                 .equ	IVSEL	= 1	; Interrupt Vector Select
                 .equ	INT2	= 5	; External Interrupt Request 2 Enable
                 .equ	INT0	= 6	; External Interrupt Request 0 Enable
                 .equ	INT1	= 7	; External Interrupt Request 1 Enable
                 
                 ; GIFR - General Interrupt Flag Register
                 .equ	INTF2	= 5	; External Interrupt Flag 2
                 .equ	INTF0	= 6	; External Interrupt Flag 0
                 .equ	INTF1	= 7	; External Interrupt Flag 1
                 
                 ; MCUCR - General Interrupt Control Register
                 .equ	ISC00	= 0	; Interrupt Sense Control 0 Bit 0
                 .equ	ISC01	= 1	; Interrupt Sense Control 0 Bit 1
                 .equ	ISC10	= 2	; Interrupt Sense Control 1 Bit 0
                 .equ	ISC11	= 3	; Interrupt Sense Control 1 Bit 1
                 
                 ; MCUCSR - MCU Control And Status Register
                 .equ	ISC2	= 6	; Interrupt Sense Control 2
                 
                 
                 ; ***** TIMER_COUNTER_0 **************
                 ; TCCR0 - Timer/Counter Control Register
                 .equ	CS00	= 0	; Clock Select 1
                 .equ	CS01	= 1	; Clock Select 1
                 .equ	CS02	= 2	; Clock Select 2
                 .equ	WGM01	= 3	; Waveform Generation Mode 1
                 .equ	CTC0	= WGM01	; For compatibility
                 .equ	COM00	= 4	; Compare match Output Mode 0
                 .equ	COM01	= 5	; Compare Match Output Mode 1
                 .equ	WGM00	= 6	; Waveform Generation Mode
                 .equ	PWM0	= WGM00	; For compatibility
                 .equ	FOC0	= 7	; Force Output Compare
                 
                 ; TCNT0 - Timer/Counter Register
                 .equ	TCNT0_0	= 0	; 
                 .equ	TCNT0_1	= 1	; 
                 .equ	TCNT0_2	= 2	; 
                 .equ	TCNT0_3	= 3	; 
                 .equ	TCNT0_4	= 4	; 
                 .equ	TCNT0_5	= 5	; 
                 .equ	TCNT0_6	= 6	; 
                 .equ	TCNT0_7	= 7	; 
                 
                 ; OCR0 - Output Compare Register
                 .equ	OCR0_0	= 0	; 
                 .equ	OCR0_1	= 1	; 
                 .equ	OCR0_2	= 2	; 
                 .equ	OCR0_3	= 3	; 
                 .equ	OCR0_4	= 4	; 
                 .equ	OCR0_5	= 5	; 
                 .equ	OCR0_6	= 6	; 
                 .equ	OCR0_7	= 7	; 
                 
                 ; TIMSK - Timer/Counter Interrupt Mask Register
                 .equ	TOIE0	= 0	; Timer/Counter0 Overflow Interrupt Enable
                 .equ	OCIE0	= 1	; Timer/Counter0 Output Compare Match Interrupt register
                 
                 ; TIFR - Timer/Counter Interrupt Flag register
                 .equ	TOV0	= 0	; Timer/Counter0 Overflow Flag
                 .equ	OCF0	= 1	; Output Compare Flag 0
                 
                 
                 ; ***** TIMER_COUNTER_2 **************
                 ; TIMSK - Timer/Counter Interrupt Mask register
                 .equ	TOIE2	= 6	; Timer/Counter2 Overflow Interrupt Enable
                 .equ	OCIE2	= 7	; Timer/Counter2 Output Compare Match Interrupt Enable
                 
                 ; TIFR - Timer/Counter Interrupt Flag Register
                 .equ	TOV2	= 6	; Timer/Counter2 Overflow Flag
                 .equ	OCF2	= 7	; Output Compare Flag 2
                 
                 ; TCCR2 - Timer/Counter2 Control Register
                 .equ	CS20	= 0	; Clock Select bit 0
                 .equ	CS21	= 1	; Clock Select bit 1
                 .equ	CS22	= 2	; Clock Select bit 2
                 .equ	WGM21	= 3	; Clear Timer/Counter2 on Compare Match
                 .equ	CTC2	= WGM21	; For compatibility
                 .equ	COM20	= 4	; Compare Output Mode bit 0
                 .equ	COM21	= 5	; Compare Output Mode bit 1
                 .equ	WGM20	= 6	; Pulse Width Modulator Enable
                 .equ	PWM2	= WGM20	; For compatibility
                 .equ	FOC2	= 7	; Force Output Compare
                 
                 ; TCNT2 - Timer/Counter2
                 .equ	TCNT2_0	= 0	; Timer/Counter 2 bit 0
                 .equ	TCNT2_1	= 1	; Timer/Counter 2 bit 1
                 .equ	TCNT2_2	= 2	; Timer/Counter 2 bit 2
                 .equ	TCNT2_3	= 3	; Timer/Counter 2 bit 3
                 .equ	TCNT2_4	= 4	; Timer/Counter 2 bit 4
                 .equ	TCNT2_5	= 5	; Timer/Counter 2 bit 5
                 .equ	TCNT2_6	= 6	; Timer/Counter 2 bit 6
                 .equ	TCNT2_7	= 7	; Timer/Counter 2 bit 7
                 
                 ; OCR2 - Timer/Counter2 Output Compare Register
                 .equ	OCR2_0	= 0	; Timer/Counter2 Output Compare Register Bit 0
                 .equ	OCR2_1	= 1	; Timer/Counter2 Output Compare Register Bit 1
                 .equ	OCR2_2	= 2	; Timer/Counter2 Output Compare Register Bit 2
                 .equ	OCR2_3	= 3	; Timer/Counter2 Output Compare Register Bit 3
                 .equ	OCR2_4	= 4	; Timer/Counter2 Output Compare Register Bit 4
                 .equ	OCR2_5	= 5	; Timer/Counter2 Output Compare Register Bit 5
                 .equ	OCR2_6	= 6	; Timer/Counter2 Output Compare Register Bit 6
                 .equ	OCR2_7	= 7	; Timer/Counter2 Output Compare Register Bit 7
                 
                 ; ASSR - Asynchronous Status Register
                 .equ	TCR2UB	= 0	; Timer/counter Control Register2 Update Busy
                 .equ	OCR2UB	= 1	; Output Compare Register2 Update Busy
                 .equ	TCN2UB	= 2	; Timer/Counter2 Update Busy
                 .equ	AS2	= 3	; Asynchronous Timer/counter2
                 
                 
                 ; ***** TIMER_COUNTER_1 **************
                 ; TIMSK - Timer/Counter Interrupt Mask Register
                 .equ	TOIE1	= 2	; Timer/Counter1 Overflow Interrupt Enable
                 .equ	OCIE1B	= 3	; Timer/Counter1 Output CompareB Match Interrupt Enable
                 .equ	OCIE1A	= 4	; Timer/Counter1 Output CompareA Match Interrupt Enable
                 .equ	TICIE1	= 5	; Timer/Counter1 Input Capture Interrupt Enable
                 
                 ; TIFR - Timer/Counter Interrupt Flag register
                 .equ	TOV1	= 2	; Timer/Counter1 Overflow Flag
                 .equ	OCF1B	= 3	; Output Compare Flag 1B
                 .equ	OCF1A	= 4	; Output Compare Flag 1A
                 .equ	ICF1	= 5	; Input Capture Flag 1
                 
                 ; TCCR1A - Timer/Counter1 Control Register A
                 .equ	WGM10	= 0	; Waveform Generation Mode
                 .equ	PWM10	= WGM10	; For compatibility
                 .equ	WGM11	= 1	; Waveform Generation Mode
                 .equ	PWM11	= WGM11	; For compatibility
                 .equ	FOC1B	= 2	; Force Output Compare 1B
                 .equ	FOC1A	= 3	; Force Output Compare 1A
                 .equ	COM1B0	= 4	; Compare Output Mode 1B, bit 0
                 .equ	COM1B1	= 5	; Compare Output Mode 1B, bit 1
                 .equ	COM1A0	= 6	; Compare Ouput Mode 1A, bit 0
                 .equ	COM1A1	= 7	; Compare Output Mode 1A, bit 1
                 
                 ; TCCR1B - Timer/Counter1 Control Register B
                 .equ	CS10	= 0	; Prescaler source of Timer/Counter 1
                 .equ	CS11	= 1	; Prescaler source of Timer/Counter 1
                 .equ	CS12	= 2	; Prescaler source of Timer/Counter 1
                 .equ	WGM12	= 3	; Waveform Generation Mode
                 .equ	CTC10	= WGM12	; For compatibility
                 .equ	CTC1	= WGM12	; For compatibility
                 .equ	WGM13	= 4	; Waveform Generation Mode
                 .equ	CTC11	= WGM13	; For compatibility
                 .equ	ICES1	= 6	; Input Capture 1 Edge Select
                 .equ	ICNC1	= 7	; Input Capture 1 Noise Canceler
                 
                 
                 ; ***** SPI **************************
                 ; SPDR - SPI Data Register
                 .equ	SPDR0	= 0	; SPI Data Register bit 0
                 .equ	SPDR1	= 1	; SPI Data Register bit 1
                 .equ	SPDR2	= 2	; SPI Data Register bit 2
                 .equ	SPDR3	= 3	; SPI Data Register bit 3
                 .equ	SPDR4	= 4	; SPI Data Register bit 4
                 .equ	SPDR5	= 5	; SPI Data Register bit 5
                 .equ	SPDR6	= 6	; SPI Data Register bit 6
                 .equ	SPDR7	= 7	; SPI Data Register bit 7
                 
                 ; SPSR - SPI Status Register
                 .equ	SPI2X	= 0	; Double SPI Speed Bit
                 .equ	WCOL	= 6	; Write Collision Flag
                 .equ	SPIF	= 7	; SPI Interrupt Flag
                 
                 ; SPCR - SPI Control Register
                 .equ	SPR0	= 0	; SPI Clock Rate Select 0
                 .equ	SPR1	= 1	; SPI Clock Rate Select 1
                 .equ	CPHA	= 2	; Clock Phase
                 .equ	CPOL	= 3	; Clock polarity
                 .equ	MSTR	= 4	; Master/Slave Select
                 .equ	DORD	= 5	; Data Order
                 .equ	SPE	= 6	; SPI Enable
                 .equ	SPIE	= 7	; SPI Interrupt Enable
                 
                 
                 ; ***** USART ************************
                 ; UDR - USART I/O Data Register
                 .equ	UDR0	= 0	; USART I/O Data Register bit 0
                 .equ	UDR1	= 1	; USART I/O Data Register bit 1
                 .equ	UDR2	= 2	; USART I/O Data Register bit 2
                 .equ	UDR3	= 3	; USART I/O Data Register bit 3
                 .equ	UDR4	= 4	; USART I/O Data Register bit 4
                 .equ	UDR5	= 5	; USART I/O Data Register bit 5
                 .equ	UDR6	= 6	; USART I/O Data Register bit 6
                 .equ	UDR7	= 7	; USART I/O Data Register bit 7
                 
                 ; UCSRA - USART Control and Status Register A
                 .equ	USR	= UCSRA	; For compatibility
                 .equ	MPCM	= 0	; Multi-processor Communication Mode
                 .equ	U2X	= 1	; Double the USART transmission speed
                 .equ	UPE	= 2	; Parity Error
                 .equ	PE	= UPE	; For compatibility
                 .equ	DOR	= 3	; Data overRun
                 .equ	FE	= 4	; Framing Error
                 .equ	UDRE	= 5	; USART Data Register Empty
                 .equ	TXC	= 6	; USART Transmitt Complete
                 .equ	RXC	= 7	; USART Receive Complete
                 
                 ; UCSRB - USART Control and Status Register B
                 .equ	UCR	= UCSRB	; For compatibility
                 .equ	TXB8	= 0	; Transmit Data Bit 8
                 .equ	RXB8	= 1	; Receive Data Bit 8
                 .equ	UCSZ2	= 2	; Character Size
                 .equ	CHR9	= UCSZ2	; For compatibility
                 .equ	TXEN	= 3	; Transmitter Enable
                 .equ	RXEN	= 4	; Receiver Enable
                 .equ	UDRIE	= 5	; USART Data register Empty Interrupt Enable
                 .equ	TXCIE	= 6	; TX Complete Interrupt Enable
                 .equ	RXCIE	= 7	; RX Complete Interrupt Enable
                 
                 ; UCSRC - USART Control and Status Register C
                 .equ	UCPOL	= 0	; Clock Polarity
                 .equ	UCSZ0	= 1	; Character Size
                 .equ	UCSZ1	= 2	; Character Size
                 .equ	USBS	= 3	; Stop Bit Select
                 .equ	UPM0	= 4	; Parity Mode Bit 0
                 .equ	UPM1	= 5	; Parity Mode Bit 1
                 .equ	UMSEL	= 6	; USART Mode Select
                 .equ	URSEL	= 7	; Register Select
                 
                 .equ	UBRRHI	= UBRRH	; For compatibility
                 
                 ; ***** ANALOG_COMPARATOR ************
                 ; SFIOR - Special Function IO Register
                 .equ	ACME	= 3	; Analog Comparator Multiplexer Enable
                 
                 ; ACSR - Analog Comparator Control And Status Register
                 .equ	ACIS0	= 0	; Analog Comparator Interrupt Mode Select bit 0
                 .equ	ACIS1	= 1	; Analog Comparator Interrupt Mode Select bit 1
                 .equ	ACIC	= 2	; Analog Comparator Input Capture Enable
                 .equ	ACIE	= 3	; Analog Comparator Interrupt Enable
                 .equ	ACI	= 4	; Analog Comparator Interrupt Flag
                 .equ	ACO	= 5	; Analog Compare Output
                 .equ	ACBG	= 6	; Analog Comparator Bandgap Select
                 .equ	ACD	= 7	; Analog Comparator Disable
                 
                 
                 ; ***** AD_CONVERTER *****************
                 ; ADMUX - The ADC multiplexer Selection Register
                 .equ	MUX0	= 0	; Analog Channel and Gain Selection Bits
                 .equ	MUX1	= 1	; Analog Channel and Gain Selection Bits
                 .equ	MUX2	= 2	; Analog Channel and Gain Selection Bits
                 .equ	MUX3	= 3	; Analog Channel and Gain Selection Bits
                 .equ	MUX4	= 4	; Analog Channel and Gain Selection Bits
                 .equ	ADLAR	= 5	; Left Adjust Result
                 .equ	REFS0	= 6	; Reference Selection Bit 0
                 .equ	REFS1	= 7	; Reference Selection Bit 1
                 
                 ; ADCSRA - The ADC Control and Status register
                 .equ	ADCSR	= ADCSRA	; For compatibility
                 .equ	ADPS0	= 0	; ADC  Prescaler Select Bits
                 .equ	ADPS1	= 1	; ADC  Prescaler Select Bits
                 .equ	ADPS2	= 2	; ADC  Prescaler Select Bits
                 .equ	ADIE	= 3	; ADC Interrupt Enable
                 .equ	ADIF	= 4	; ADC Interrupt Flag
                 .equ	ADATE	= 5	; When this bit is written to one,the Timer/Counter2 prescaler will be reset.The bit will be cleared by hardware after the operation is performed.Writing a zero to this bit will have no effect.This bit will always be read as zero if Timer/C                 ounter2 is clocked by the internal CPU clock.If this bit is written when Timer/Counter2 is operating in asynchronous mode,the bit will remain one until the prescaler has been reset.
                 .equ	ADFR	= ADATE	; For compatibility
                 .equ	ADSC	= 6	; ADC Start Conversion
                 .equ	ADEN	= 7	; ADC Enable
                 
                 ; ADCH - ADC Data Register High Byte
                 .equ	ADCH0	= 0	; ADC Data Register High Byte Bit 0
                 .equ	ADCH1	= 1	; ADC Data Register High Byte Bit 1
                 .equ	ADCH2	= 2	; ADC Data Register High Byte Bit 2
                 .equ	ADCH3	= 3	; ADC Data Register High Byte Bit 3
                 .equ	ADCH4	= 4	; ADC Data Register High Byte Bit 4
                 .equ	ADCH5	= 5	; ADC Data Register High Byte Bit 5
                 .equ	ADCH6	= 6	; ADC Data Register High Byte Bit 6
                 .equ	ADCH7	= 7	; ADC Data Register High Byte Bit 7
                 
                 ; ADCL - ADC Data Register Low Byte
                 .equ	ADCL0	= 0	; ADC Data Register Low Byte Bit 0
                 .equ	ADCL1	= 1	; ADC Data Register Low Byte Bit 1
                 .equ	ADCL2	= 2	; ADC Data Register Low Byte Bit 2
                 .equ	ADCL3	= 3	; ADC Data Register Low Byte Bit 3
                 .equ	ADCL4	= 4	; ADC Data Register Low Byte Bit 4
                 .equ	ADCL5	= 5	; ADC Data Register Low Byte Bit 5
                 .equ	ADCL6	= 6	; ADC Data Register Low Byte Bit 6
                 .equ	ADCL7	= 7	; ADC Data Register Low Byte Bit 7
                 
                 ; SFIOR - Special Function IO Register
                 .equ	ADTS0	= 5	; ADC Auto Trigger Source 0
                 .equ	ADTS1	= 6	; ADC Auto Trigger Source 1
                 .equ	ADTS2	= 7	; ADC Auto Trigger Source 2
                 
                 
                 ; ***** PORTA ************************
                 ; PORTA - Port A Data Register
                 .equ	PORTA0	= 0	; Port A Data Register bit 0
                 .equ	PA0	= 0	; For compatibility
                 .equ	PORTA1	= 1	; Port A Data Register bit 1
                 .equ	PA1	= 1	; For compatibility
                 .equ	PORTA2	= 2	; Port A Data Register bit 2
                 .equ	PA2	= 2	; For compatibility
                 .equ	PORTA3	= 3	; Port A Data Register bit 3
                 .equ	PA3	= 3	; For compatibility
                 .equ	PORTA4	= 4	; Port A Data Register bit 4
                 .equ	PA4	= 4	; For compatibility
                 .equ	PORTA5	= 5	; Port A Data Register bit 5
                 .equ	PA5	= 5	; For compatibility
                 .equ	PORTA6	= 6	; Port A Data Register bit 6
                 .equ	PA6	= 6	; For compatibility
                 .equ	PORTA7	= 7	; Port A Data Register bit 7
                 .equ	PA7	= 7	; For compatibility
                 
                 ; DDRA - Port A Data Direction Register
                 .equ	DDA0	= 0	; Data Direction Register, Port A, bit 0
                 .equ	DDA1	= 1	; Data Direction Register, Port A, bit 1
                 .equ	DDA2	= 2	; Data Direction Register, Port A, bit 2
                 .equ	DDA3	= 3	; Data Direction Register, Port A, bit 3
                 .equ	DDA4	= 4	; Data Direction Register, Port A, bit 4
                 .equ	DDA5	= 5	; Data Direction Register, Port A, bit 5
                 .equ	DDA6	= 6	; Data Direction Register, Port A, bit 6
                 .equ	DDA7	= 7	; Data Direction Register, Port A, bit 7
                 
                 ; PINA - Port A Input Pins
                 .equ	PINA0	= 0	; Input Pins, Port A bit 0
                 .equ	PINA1	= 1	; Input Pins, Port A bit 1
                 .equ	PINA2	= 2	; Input Pins, Port A bit 2
                 .equ	PINA3	= 3	; Input Pins, Port A bit 3
                 .equ	PINA4	= 4	; Input Pins, Port A bit 4
                 .equ	PINA5	= 5	; Input Pins, Port A bit 5
                 .equ	PINA6	= 6	; Input Pins, Port A bit 6
                 .equ	PINA7	= 7	; Input Pins, Port A bit 7
                 
                 
                 ; ***** PORTB ************************
                 ; PORTB - Port B Data Register
                 .equ	PORTB0	= 0	; Port B Data Register bit 0
                 .equ	PB0	= 0	; For compatibility
                 .equ	PORTB1	= 1	; Port B Data Register bit 1
                 .equ	PB1	= 1	; For compatibility
                 .equ	PORTB2	= 2	; Port B Data Register bit 2
                 .equ	PB2	= 2	; For compatibility
                 .equ	PORTB3	= 3	; Port B Data Register bit 3
                 .equ	PB3	= 3	; For compatibility
                 .equ	PORTB4	= 4	; Port B Data Register bit 4
                 .equ	PB4	= 4	; For compatibility
                 .equ	PORTB5	= 5	; Port B Data Register bit 5
                 .equ	PB5	= 5	; For compatibility
                 .equ	PORTB6	= 6	; Port B Data Register bit 6
                 .equ	PB6	= 6	; For compatibility
                 .equ	PORTB7	= 7	; Port B Data Register bit 7
                 .equ	PB7	= 7	; For compatibility
                 
                 ; DDRB - Port B Data Direction Register
                 .equ	DDB0	= 0	; Port B Data Direction Register bit 0
                 .equ	DDB1	= 1	; Port B Data Direction Register bit 1
                 .equ	DDB2	= 2	; Port B Data Direction Register bit 2
                 .equ	DDB3	= 3	; Port B Data Direction Register bit 3
                 .equ	DDB4	= 4	; Port B Data Direction Register bit 4
                 .equ	DDB5	= 5	; Port B Data Direction Register bit 5
                 .equ	DDB6	= 6	; Port B Data Direction Register bit 6
                 .equ	DDB7	= 7	; Port B Data Direction Register bit 7
                 
                 ; PINB - Port B Input Pins
                 .equ	PINB0	= 0	; Port B Input Pins bit 0
                 .equ	PINB1	= 1	; Port B Input Pins bit 1
                 .equ	PINB2	= 2	; Port B Input Pins bit 2
                 .equ	PINB3	= 3	; Port B Input Pins bit 3
                 .equ	PINB4	= 4	; Port B Input Pins bit 4
                 .equ	PINB5	= 5	; Port B Input Pins bit 5
                 .equ	PINB6	= 6	; Port B Input Pins bit 6
                 .equ	PINB7	= 7	; Port B Input Pins bit 7
                 
                 
                 ; ***** PORTC ************************
                 ; PORTC - Port C Data Register
                 .equ	PORTC0	= 0	; Port C Data Register bit 0
                 .equ	PC0	= 0	; For compatibility
                 .equ	PORTC1	= 1	; Port C Data Register bit 1
                 .equ	PC1	= 1	; For compatibility
                 .equ	PORTC2	= 2	; Port C Data Register bit 2
                 .equ	PC2	= 2	; For compatibility
                 .equ	PORTC3	= 3	; Port C Data Register bit 3
                 .equ	PC3	= 3	; For compatibility
                 .equ	PORTC4	= 4	; Port C Data Register bit 4
                 .equ	PC4	= 4	; For compatibility
                 .equ	PORTC5	= 5	; Port C Data Register bit 5
                 .equ	PC5	= 5	; For compatibility
                 .equ	PORTC6	= 6	; Port C Data Register bit 6
                 .equ	PC6	= 6	; For compatibility
                 .equ	PORTC7	= 7	; Port C Data Register bit 7
                 .equ	PC7	= 7	; For compatibility
                 
                 ; DDRC - Port C Data Direction Register
                 .equ	DDC0	= 0	; Port C Data Direction Register bit 0
                 .equ	DDC1	= 1	; Port C Data Direction Register bit 1
                 .equ	DDC2	= 2	; Port C Data Direction Register bit 2
                 .equ	DDC3	= 3	; Port C Data Direction Register bit 3
                 .equ	DDC4	= 4	; Port C Data Direction Register bit 4
                 .equ	DDC5	= 5	; Port C Data Direction Register bit 5
                 .equ	DDC6	= 6	; Port C Data Direction Register bit 6
                 .equ	DDC7	= 7	; Port C Data Direction Register bit 7
                 
                 ; PINC - Port C Input Pins
                 .equ	PINC0	= 0	; Port C Input Pins bit 0
                 .equ	PINC1	= 1	; Port C Input Pins bit 1
                 .equ	PINC2	= 2	; Port C Input Pins bit 2
                 .equ	PINC3	= 3	; Port C Input Pins bit 3
                 .equ	PINC4	= 4	; Port C Input Pins bit 4
                 .equ	PINC5	= 5	; Port C Input Pins bit 5
                 .equ	PINC6	= 6	; Port C Input Pins bit 6
                 .equ	PINC7	= 7	; Port C Input Pins bit 7
                 
                 
                 ; ***** PORTD ************************
                 ; PORTD - Port D Data Register
                 .equ	PORTD0	= 0	; Port D Data Register bit 0
                 .equ	PD0	= 0	; For compatibility
                 .equ	PORTD1	= 1	; Port D Data Register bit 1
                 .equ	PD1	= 1	; For compatibility
                 .equ	PORTD2	= 2	; Port D Data Register bit 2
                 .equ	PD2	= 2	; For compatibility
                 .equ	PORTD3	= 3	; Port D Data Register bit 3
                 .equ	PD3	= 3	; For compatibility
                 .equ	PORTD4	= 4	; Port D Data Register bit 4
                 .equ	PD4	= 4	; For compatibility
                 .equ	PORTD5	= 5	; Port D Data Register bit 5
                 .equ	PD5	= 5	; For compatibility
                 .equ	PORTD6	= 6	; Port D Data Register bit 6
                 .equ	PD6	= 6	; For compatibility
                 .equ	PORTD7	= 7	; Port D Data Register bit 7
                 .equ	PD7	= 7	; For compatibility
                 
                 ; DDRD - Port D Data Direction Register
                 .equ	DDD0	= 0	; Port D Data Direction Register bit 0
                 .equ	DDD1	= 1	; Port D Data Direction Register bit 1
                 .equ	DDD2	= 2	; Port D Data Direction Register bit 2
                 .equ	DDD3	= 3	; Port D Data Direction Register bit 3
                 .equ	DDD4	= 4	; Port D Data Direction Register bit 4
                 .equ	DDD5	= 5	; Port D Data Direction Register bit 5
                 .equ	DDD6	= 6	; Port D Data Direction Register bit 6
                 .equ	DDD7	= 7	; Port D Data Direction Register bit 7
                 
                 ; PIND - Port D Input Pins
                 .equ	PIND0	= 0	; Port D Input Pins bit 0
                 .equ	PIND1	= 1	; Port D Input Pins bit 1
                 .equ	PIND2	= 2	; Port D Input Pins bit 2
                 .equ	PIND3	= 3	; Port D Input Pins bit 3
                 .equ	PIND4	= 4	; Port D Input Pins bit 4
                 .equ	PIND5	= 5	; Port D Input Pins bit 5
                 .equ	PIND6	= 6	; Port D Input Pins bit 6
                 .equ	PIND7	= 7	; Port D Input Pins bit 7
                 
                 
                 ; ***** CPU **************************
                 ; SREG - Status Register
                 .equ	SREG_C	= 0	; Carry Flag
                 .equ	SREG_Z	= 1	; Zero Flag
                 .equ	SREG_N	= 2	; Negative Flag
                 .equ	SREG_V	= 3	; Two's Complement Overflow Flag
                 .equ	SREG_S	= 4	; Sign Bit
                 .equ	SREG_H	= 5	; Half Carry Flag
                 .equ	SREG_T	= 6	; Bit Copy Storage
                 .equ	SREG_I	= 7	; Global Interrupt Enable
                 
                 ; MCUCR - MCU Control Register
                 ;.equ	ISC00	= 0	; Interrupt Sense Control 0 Bit 0
                 ;.equ	ISC01	= 1	; Interrupt Sense Control 0 Bit 1
                 ;.equ	ISC10	= 2	; Interrupt Sense Control 1 Bit 0
                 ;.equ	ISC11	= 3	; Interrupt Sense Control 1 Bit 1
                 .equ	SM0	= 4	; Sleep Mode Select
                 .equ	SM1	= 5	; Sleep Mode Select
                 .equ	SM2	= 6	; Sleep Mode Select
                 .equ	SE	= 7	; Sleep Enable
                 
                 ; MCUCSR - MCU Control And Status Register
                 .equ	MCUSR	= MCUCSR	; For compatibility
                 .equ	PORF	= 0	; Power-on reset flag
                 .equ	EXTRF	= 1	; External Reset Flag
                 .equ	BORF	= 2	; Brown-out Reset Flag
                 .equ	WDRF	= 3	; Watchdog Reset Flag
                 .equ	JTRF	= 4	; JTAG Reset Flag
                 .equ	JTD	= 7	; JTAG Interface Disable
                 
                 ; OSCCAL - Oscillator Calibration Value
                 .equ	CAL0	= 0	; Oscillator Calibration Value Bit0
                 .equ	CAL1	= 1	; Oscillator Calibration Value Bit1
                 .equ	CAL2	= 2	; Oscillator Calibration Value Bit2
                 .equ	CAL3	= 3	; Oscillator Calibration Value Bit3
                 .equ	CAL4	= 4	; Oscillator Calibration Value Bit4
                 .equ	CAL5	= 5	; Oscillator Calibration Value Bit5
                 .equ	CAL6	= 6	; Oscillator Calibration Value Bit6
                 .equ	CAL7	= 7	; Oscillator Calibration Value Bit7
                 
                 ; SFIOR - Special Function IO Register
                 .equ	PSR10	= 0	; Prescaler Reset Timer/Counter1&0
                 .equ	PSR2	= 1	; Prescaler Reset Timer/Counter2
                 .equ	PUD	= 2	; Pull-up Disable
                 
                 
                 ; ***** BOOT_LOAD ********************
                 ; SPMCR - Store Program Memory Control Register
                 .equ	SPMEN	= 0	; Store Program Memory Enable
                 .equ	PGERS	= 1	; Page Erase
                 .equ	PGWRT	= 2	; Page Write
                 .equ	BLBSET	= 3	; Boot Lock Bit Set
                 .equ	RWWSRE	= 4	; Read While Write secion read enable
                 .equ	ASRE	= RWWSRE	; For compatibility
                 .equ	RWWSB	= 6	; Read While Write Section Busy
                 .equ	ASB	= RWWSB	; For compatibility
                 .equ	SPMIE	= 7	; SPM Interrupt Enable
                 
                 
                 ; ***** TWI **************************
                 ; TWBR - TWI Bit Rate register
                 .equ	TWBR0	= 0	; 
                 .equ	TWBR1	= 1	; 
                 .equ	TWBR2	= 2	; 
                 .equ	TWBR3	= 3	; 
                 .equ	TWBR4	= 4	; 
                 .equ	TWBR5	= 5	; 
                 .equ	TWBR6	= 6	; 
                 .equ	TWBR7	= 7	; 
                 
                 ; TWCR - TWI Control Register
                 .equ	TWIE	= 0	; TWI Interrupt Enable
                 .equ	TWEN	= 2	; TWI Enable Bit
                 .equ	TWWC	= 3	; TWI Write Collition Flag
                 .equ	TWSTO	= 4	; TWI Stop Condition Bit
                 .equ	TWSTA	= 5	; TWI Start Condition Bit
                 .equ	TWEA	= 6	; TWI Enable Acknowledge Bit
                 .equ	TWINT	= 7	; TWI Interrupt Flag
                 
                 ; TWSR - TWI Status Register
                 .equ	TWPS0	= 0	; TWI Prescaler bits
                 .equ	TWPS1	= 1	; TWI Prescaler bits
                 .equ	TWS3	= 3	; TWI Status
                 .equ	TWS4	= 4	; TWI Status
                 .equ	TWS5	= 5	; TWI Status
                 .equ	TWS6	= 6	; TWI Status
                 .equ	TWS7	= 7	; TWI Status
                 
                 ; TWDR - TWI Data register
                 .equ	TWD0	= 0	; TWI Data Register Bit 0
                 .equ	TWD1	= 1	; TWI Data Register Bit 1
                 .equ	TWD2	= 2	; TWI Data Register Bit 2
                 .equ	TWD3	= 3	; TWI Data Register Bit 3
                 .equ	TWD4	= 4	; TWI Data Register Bit 4
                 .equ	TWD5	= 5	; TWI Data Register Bit 5
                 .equ	TWD6	= 6	; TWI Data Register Bit 6
                 .equ	TWD7	= 7	; TWI Data Register Bit 7
                 
                 ; TWAR - TWI (Slave) Address register
                 .equ	TWGCE	= 0	; TWI General Call Recognition Enable Bit
                 .equ	TWA0	= 1	; TWI (Slave) Address register Bit 0
                 .equ	TWA1	= 2	; TWI (Slave) Address register Bit 1
                 .equ	TWA2	= 3	; TWI (Slave) Address register Bit 2
                 .equ	TWA3	= 4	; TWI (Slave) Address register Bit 3
                 .equ	TWA4	= 5	; TWI (Slave) Address register Bit 4
                 .equ	TWA5	= 6	; TWI (Slave) Address register Bit 5
                 .equ	TWA6	= 7	; TWI (Slave) Address register Bit 6
                 
                 
                 
                 ; ***** LOCKSBITS ********************************************************
                 .equ	LB1	= 0	; Lock bit
                 .equ	LB2	= 1	; Lock bit
                 .equ	BLB01	= 2	; Boot Lock bit
                 .equ	BLB02	= 3	; Boot Lock bit
                 .equ	BLB11	= 4	; Boot lock bit
                 .equ	BLB12	= 5	; Boot lock bit
                 
                 
                 ; ***** FUSES ************************************************************
                 ; LOW fuse bits
                 .equ	CKSEL0	= 0	; Select Clock Source
                 .equ	CKSEL1	= 1	; Select Clock Source
                 .equ	CKSEL2	= 2	; Select Clock Source
                 .equ	CKSEL3	= 3	; Select Clock Source
                 .equ	BODEN	= 6	; Brown out detector enable
                 .equ	BODLEVEL	= 7	; Brown out detector trigger level
                 
                 ; HIGH fuse bits
                 .equ	BOOTRST	= 0	; Select Reset Vector
                 .equ	BOOTSZ0	= 1	; Select Boot Size
                 .equ	BOOTSZ1	= 2	; Select Boot Size
                 .equ	EESAVE	= 3	; EEPROM memory is preserved through chip erase
                 .equ	SPIEN	= 5	; Enable Serial programming and Data Downloading
                 .equ	JTAGEN	= 6	; Enable JTAG
                 .equ	OCDEN	= 7	; Enable OCD
                 
                 
                 
                 ; ***** CPU REGISTER DEFINITIONS *****************************************
                 .def	XH	= r27
                 .def	XL	= r26
                 .def	YH	= r29
                 .def	YL	= r28
                 .def	ZH	= r31
                 .def	ZL	= r30
                 
                 
                 
                 ; ***** DATA MEMORY DECLARATIONS *****************************************
                 .equ	FLASHEND	= 0x3fff	; Note: Word address
                 .equ	IOEND	= 0x003f
                 .equ	SRAM_START	= 0x0060
                 .equ	SRAM_SIZE	= 2048
                 .equ	RAMEND	= 0x085f
                 .equ	XRAMEND	= 0x0000
                 .equ	E2END	= 0x03ff
                 .equ	EEPROMEND	= 0x03ff
                 .equ	EEADRBITS	= 10
                 #pragma AVRPART MEMORY PROG_FLASH 32768
                 #pragma AVRPART MEMORY EEPROM 1024
                 #pragma AVRPART MEMORY INT_SRAM SIZE 2048
                 #pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 
                 
                 ; ***** BOOTLOADER DECLARATIONS ******************************************
                 .equ	NRWW_START_ADDR	= 0x3800
                 .equ	NRWW_STOP_ADDR	= 0x3fff
                 .equ	RWW_START_ADDR	= 0x0
                 .equ	RWW_STOP_ADDR	= 0x37ff
                 .equ	PAGESIZE	= 64
                 .equ	FIRSTBOOTSTART	= 0x3f00
                 .equ	SECONDBOOTSTART	= 0x3e00
                 .equ	THIRDBOOTSTART	= 0x3c00
                 .equ	FOURTHBOOTSTART	= 0x3800
                 .equ	SMALLBOOTSTART	= FIRSTBOOTSTART
                 .equ	LARGEBOOTSTART	= FOURTHBOOTSTART
                 
                 
                 
                 ; ***** INTERRUPT VECTORS ************************************************
                 .equ	INT0addr	= 0x0002	; External Interrupt Request 0
                 .equ	INT1addr	= 0x0004	; External Interrupt Request 1
                 .equ	INT2addr	= 0x0006	; External Interrupt Request 2
                 .equ	OC2addr	= 0x0008	; Timer/Counter2 Compare Match
                 .equ	OVF2addr	= 0x000a	; Timer/Counter2 Overflow
                 .equ	ICP1addr	= 0x000c	; Timer/Counter1 Capture Event
                 .equ	OC1Aaddr	= 0x000e	; Timer/Counter1 Compare Match A
                 .equ	OC1Baddr	= 0x0010	; Timer/Counter1 Compare Match B
                 .equ	OVF1addr	= 0x0012	; Timer/Counter1 Overflow
                 .equ	OC0addr	= 0x0014	; Timer/Counter0 Compare Match
                 .equ	OVF0addr	= 0x0016	; Timer/Counter0 Overflow
                 .equ	SPIaddr	= 0x0018	; Serial Transfer Complete
                 .equ	URXCaddr	= 0x001a	; USART, Rx Complete
                 .equ	UDREaddr	= 0x001c	; USART Data Register Empty
                 .equ	UTXCaddr	= 0x001e	; USART, Tx Complete
                 .equ	ADCCaddr	= 0x0020	; ADC Conversion Complete
                 .equ	ERDYaddr	= 0x0022	; EEPROM Ready
                 .equ	ACIaddr	= 0x0024	; Analog Comparator
                 .equ	TWIaddr	= 0x0026	; 2-wire Serial Interface
                 .equ	SPMRaddr	= 0x0028	; Store Program Memory Ready
                 
                 .equ	INT_VECTORS_SIZE	= 42	; size in words
                 
                 #endif  /* _M32DEF_INC_ */
                 
                 
                 
                 ;***** Created: 2011-02-09 12:03 ******* Source: ATmega32.xml ************
                 ;*************************************************************************
                 ;* A P P L I C A T I O N   N O T E   F O R   T H E   A V R   F A M I L Y
                 ;* 
                 ;* Number            : AVR000
                 ;* File Name         : "m32def.inc"
                 ;* Title             : Register/Bit Definitions for the ATmega32
                 ;* Date              : 2011-02-09
                 ;* Version           : 2.35
                 ;* Support E-mail    : avr@atmel.com
                 ;* Target MCU        : ATmega32
                 ;* 
                 ;* DESCRIPTION
                 ;* When including this file in the assembly program file, all I/O register 
                 ;* names and I/O register bit names appearing in the data book can be used.
                 ;* In addition, the six registers forming the three data pointers X, Y and 
                 ;* Z have been assigned names XL - ZH. Highest RAM address for Internal 
                 ;* SRAM is also defined 
                 ;* 
                 ;* The Register names are represented by their hexadecimal address.
                 ;* 
                 ;* The Register Bit names are represented by their bit number (0-7).
                 ;* 
                 ;* Please observe the difference in using the bit names with instructions
                 ;* such as "sbr"/"cbr" (set/clear bit in register) and "sbrs"/"sbrc"
                 ;* (skip if bit in register set/cleared). The following example illustrates
                 ;* this:
                 ;* 
                 ;* in    r16,PORTB             ;read PORTB latch
                 ;* sbr   r16,(1<<PB6)+(1<<PB5) ;set PB6 and PB5 (use masks, not bit#)
                 ;* out   PORTB,r16             ;output to PORTB
                 ;* 
                 ;* in    r16,TIFR              ;read the Timer Interrupt Flag Register
                 ;* sbrc  r16,TOV0              ;test the overflow flag (use bit#)
                 ;* rjmp  TOV0_is_set           ;jump if set
                 ;* ...                         ;otherwise do something else
                 ;*************************************************************************
                 
                 #ifndef _M32DEF_INC_
                 
                 #endif  /* _M32DEF_INC_ */
                 
                 
                  .def temp=r17		   //define r16 as temp
                  .def byte=r16		   //define r17 as byte (will be used for send byte to LCD)
                  .def menu_loc=r18
                 
                 //==========DATA SEGMENT=================================================
                 // In this segment we can to reserve some memory
                 // for strings for example...
                 .dseg
                 .org 0x0060						//starting from 0x0060 because 
                 								//before that adress we have reserved memory for registers
000060           CO_msg:				.byte 16	//hello world string
000070           CH4_msg:			.byte 16	//CH4 level message string
000080           temperature_msg:	.byte 16	//Temperature message string
000090           time_msg:			.byte 16	//Time message string
0000a0           coords_msg:			.byte 16	//Coordinates message string
0000b0           sound_msg:			.byte 16	//Sound option message string
0000c0           test:				.byte 96	//reserve bytes for 2nd string messages
000120           menu_location:		.byte 1		//current menu location
000121           tick_count:			.byte 1		//count of button activations
000122           last_btn:			.byte 1		//number of last pressed button
                 
                 //==========CODE SEGMENT=================================================
                 .cseg
                 .include "int_table.inc"	//interrupt vectors
                 
                  * Interrupt vectors table
                  */ 
                 
                  //=========INTERRUPT VECTORS TABLE=============================================
                  .org $000 //RESET
000000 c2d8       rjmp reset 
                  .org $002 //INT0 External Interrupt Request 0
000002 9518       reti
                  .org $004 //INT1 External Interrupt Request 1
000004 9518       reti
                  .org $006 //INT2 External Interrupt Request 2
000006 9518       reti
                  .org $008 //TIMER2 COMP Timer/Counter2 Compare Match
000008 9518       reti
                  .org $00A //TIMER2 OVF Timer/Counter2 Overflow
00000a 9518       reti
                  .org $00C //TIMER1 CAPT Timer/Counter1 Capture Event
00000c 9518       reti
                  .org $00E //TIMER1 COMPA Timer/Counter1 Compare Match A
00000e c291       rjmp Keyboard_check_interrupt
                  .org $010 //TIMER1 COMPB Timer/Counter1 Compare Match B
000010 9518       reti
                  .org $012 //TIMER1 OVF Timer/Counter1 Overflow
000012 9518       reti
                  .org $014 //TIMER0 COMP Timer/Counter0 Compare Match
000014 9518       reti
                  .org $016 //TIMER0 OVF Timer/Counter0 Overflow
000016 9518       reti
                  .org $018 //SPI, STC Serial Transfer Complete
000018 9518       reti
                  .org $01A //USART, RXC USART, Rx Complete
00001a 9518       reti
                  .org $01C //USART, UDRE USART Data Register Empty
00001c 9518       reti
                  .org $01E //USART, TXC USART, Tx Complete
00001e 9518       reti
                  .org $020 //ADC ADC Conversion Complete
000020 9518       reti
                  .org $022 //EE_RDY EEPROM Ready
000022 9518       reti
                  .org $024 //ANA_COMP Analog Comparator
000024 9518       reti
                  .org $026 //TWI Two-wire Serial Interface
000026 9518       reti
                  .org $028 //SPM_RDY Store Program Memory Ready
000028 9518       reti
                 //===============================================================================================
                 
                 .include "menu.inc"			//macro for menu uses
                 
                  * menu.inc
                  *
                  *  Created: 26.10.2015 0:27:02
                  *   Author: Hogs
                  */ 
                 
                  //========MACRO==========================================
                 
                  //--------Init menu page--------------------
                  .macro menu_init
                 
                  load_strings_to_SRAM		//save strings from eeprom to ram
                 
                  ldi YH,high(menu_location) //set current menu page as 0 (first page)
                  ldi YL,low(menu_location)	//
                  ldi temp,0
                  st Y,temp
                 
                  LCD_print_str CO_msg		//print first menu page
                  second_line
                  LCD_print_str CO_msg+96
                  .endm
                  //------------------------------------------
                 
                  //--------Menu previous page----------------
                  .macro menu_prev
                 
                  push menu_loc			//Save all register which will be used
                  push XH				//
                  push XL				//
                  push temp
                  push YH
                  push YL
                 
                  ldi YH,high(menu_location)		//load to Y register adress of
                  ldi YL,low(menu_location)		//current menu page
                  ld menu_loc,Y					//read from SRAM current menu page
                 
                  ldi temp,0					//if current page is first
                  cpse menu_loc,temp			//then going out of procedure
                  rjmp PC+2					//else - continue
                  rjmp Return_On_2_Click		//
                 
                  dec menu_loc				//decrease page because menu moving up
                  
                  ldi temp,16				//
                  mul temp,menu_loc			//counting adress of string
                  mov XL,r0					//which contain first string
                  mov XH,r1					//of menu message
                  ldi temp,0x60				//
                  add XL,temp				//adress = ((page - 1)*16)+96
                  clr temp					//
                  adc XH,temp				//
                 
                  first_line					//set first line for print
                  LCD_print_str_reg			//print message from adress (in X register)
                  
                  ldi temp,16				//
                  mul temp,menu_loc			//counting adress of string
                  mov XL,r0					//which contain second string
                  mov XH,r1					//of menu message
                  ldi temp,0xC0				//
                  add XL,temp				//adress = ((page - 1) * 16)+192
                  clr temp					//
                  adc XH,temp				//
                 
                  second_line				//set second line for print
                  LCD_print_str_reg			//print second string
                 
                  ldi YH,high(menu_location)	//
                  ldi YL,low(menu_location)	//Save current page status to SRAM
                  st Y,menu_loc				//
                 
                  Return_On_2_Click:			
                  pop YL					//return all of used registers
                  pop YH					//to their place
                  pop temp
                  pop XL
                  pop XH
                  pop menu_loc
                 
                  .endm
                  //------------------------------------------
                 
                  //--------Menu next page--------------------
                  .macro menu_next
                 
                  push menu_loc		//save to stack
                  push XH			//all of used registers
                  push XL
                  push temp
                  push YH
                  push YL
                 
                  ldi YH,high(menu_location)	//
                  ldi YL,low(menu_location)	//read number of current page from SRAM
                  ld menu_loc,Y				//
                 
                  ldi temp,5					//if this page is last
                  cpse menu_loc,temp			//then go to return of procedure
                  rjmp PC+2					//else - continue
                  rjmp Return_On_8_Click		//
                 
                  inc menu_loc		//increase page because moving down
                  
                  ldi temp,16			//counting of first string adress
                  mul temp,menu_loc		//and move it to X register
                  mov XL,r0				//
                  mov XH,r1				//adress = ((page + 1) * 16)+96
                  ldi temp,0x60
                  add XL,temp
                  clr temp
                  adc XH,temp
                 
                  first_line			//
                  LCD_print_str_reg	//printing first line
                 
                  ldi temp,16		//counting of second string adress
                  mul temp,menu_loc	//and move it to X register
                  mov XL,r0			//
                  mov XH,r1			//adress = ((page + 1) * 16)+192
                  ldi temp,0xC0
                  add XL,temp
                  clr temp
                  adc XH,temp
                 
                  second_line		//
                  LCD_print_str_reg	//printing second line
                 
                  ldi YH,high(menu_location)	//
                  ldi YL,low(menu_location)	//save new current page to SRAM
                  st Y,menu_loc				//
                 
                  Return_On_8_Click:
                  pop YL				//return all of used registers
                  pop YH				//
                  pop temp
                  pop XL
                  pop XH
                  pop menu_loc
                 
                  .endm
                  //------------------------------------------
                 
                  //      Read from EEPROM and write it in SRAM
                  .macro load_strings_to_SRAM
                  clr YH		 //load to YH register 0
                  ldi YL,0x60 //load to YL 0x60 coz 0x0060 - sram start
                  clr ZL		 //clear Z register
                  clr ZH
                  //?????????????????-----DEBUG------????????????????????????????????????????????????????????????????????
                  ldi r19,193			//r19 is a counter
                 						//USE <LDI r19,97> AFTER DEBUG
                  //?????????????????????????????????????????????????????????????????????????????????????????????????????
                 
                  EE_read_loop:			//loop 96 times
                  rcall EEPROM_read_byte //read byte from EEPROM
                  st Y+,byte				//Store byte to SRAM and post-Inc adress
                  inc ZL					//increment Z register after reading byte
                 
                  dec r19				//loop things...
                  brne EE_read_loop		//go to EE_read_loop label if r19 is not 0
                  .endm
                 
                 //--------------------------------------------
                 
                  //=========PROCEDURES=====================================
                  //------Read Byte form EEPROM-----------------------
                 
                  EEPROM_read_byte:
                  ; Wait for completion of previous write
000029 99e1       sbic EECR,EEWE
00002a cffe       rjmp EEPROM_read_byte
                 
00002b 94f8       cli //disable all interrupts
                 
                  ; Set up address (Z register) in address register
00002c bbff       out EEARH, ZH
00002d bbee       out EEARL, ZL
                  ; Start eeprom read by writing EERE
00002e 9ae0       sbi EECR,EERE
                  ; Read data from data register
00002f b30d       in byte,EEDR
                 
000030 9478       sei //enable interrupts
000031 9508       ret
                 .include "LCD.inc"			//macro and procedures for HD44780 like displays
                 
                  * Macro and procedures
                  * for HD44780 like LCD 
                  * Sorry for bad english...
                  */ 
                 
                  .equ data = 0x04	   //create constant cmd = 0b00000100 
                  .equ cmd = 0		   //create constant data = 0
                  .equ RS = 2		   //RS - 2nd pin in port C
                  .equ E = 3			   //E - is strob line, is a 3rd pin in port C
                  .equ D4 = 4		   //LCD data pins in port C
                  .equ D5 = 5
                  .equ D6 = 6
                  .equ D7 = 7
                 
                  //========MACRO================================================================
                  
                 //----------delay---------------------------------------------
                   
                  .macro delay
                  push r25
                  push r24
                  push r23
                 
                  ldi r25,@0
                  ldi r24,@1
                  ldi r23,@2
                 
                  rcall delay_proc
                 
                  pop r23
                  pop r24
                  pop r25
                  .endm
                 
                 //------------------------------------------------------------------------
                 
                  //      LCD initialization
                  .macro LCD_init
                  LCD_port_init		//init port C as output
                 
                  delay 242,15,5		//50 ms delay
                  ldi temp,0x30
                  out portc,temp		//send 0x30
                  sbi portc,E
                  lpm
                  cbi portc,E
                  delay 229,30,9		//100 ms delay
                  sbi portc,E
                  lpm				//send 0x30
                  cbi portc,E
                  delay 242,15,5		//50 ms delay 
                  sbi portc,E
                  lpm				//send 0x30
                  cbi portc,E
                  delay 242,15,5		//50 ms delay
                  ldi temp,0x20
                  out portc,temp
                  sbi portc,E		//send 0x20
                  lpm
                  cbi portc,E
                  delay 240,1,1		//delay 45us
                 
                  LCD_send_cmd 0x28	//init 4-bit mode 2 lines
                  delay 240,1,1 //delay 45us
                  LCD_send_cmd 0x01	//clear display
                  delay 142,42,1 //delay 2ms
                  LCD_send_cmd 0x0F	//display ON
                  delay 142,42,1 //delay 2ms
                 
                  LCD_send_cmd 0b0100_0000	//Set CGRAM adress as 0x00
                  delay 240,1,1 //delay 45us
                 
                  LCD_send_symbol 0b00000000			//Start sending bytes for draw a new symbol
                  delay 240,1,1 //delay 45us			//in this case i draw upper arrow
                  LCD_send_symbol 0b00000000			//for do that i sending next bytes
                  delay 240,1,1 //delay 45us			//
                  LCD_send_symbol 0b00000000			//00000000
                  delay 240,1,1 //delay 45us			//00000000
                  LCD_send_symbol 0b00000000			//00000000
                  delay 240,1,1 //delay 45us			//00000000
                  LCD_send_symbol 0b00000100			//00000100
                  delay 240,1,1 //delay 45us			//00001110
                  LCD_send_symbol 0b00001110			//00011111
                  delay 240,1,1 //delay 45us			//00000000
                  LCD_send_symbol 0b00011111			//
                  delay 240,1,1 //delay 45us			//
                  LCD_send_symbol 0b00000000			//
                  delay 240,1,1 //delay 45us			//
                 
                  LCD_send_symbol 0b00000000			//the same like previous but for draw down arrow
                  delay 240,1,1 //delay 45us
                  LCD_send_symbol 0b00011111
                  delay 240,1,1 //delay 45us
                  LCD_send_symbol 0b00001110
                  delay 240,1,1 //delay 45us
                  LCD_send_symbol 0b00000100
                  delay 240,1,1 //delay 45us
                  LCD_send_symbol 0b00000000
                  delay 240,1,1 //delay 45us
                  LCD_send_symbol 0b00000000
                  delay 240,1,1 //delay 45us
                  LCD_send_symbol 0b00000000
                  delay 240,1,1 //delay 45us
                  LCD_send_symbol 0b00000000
                  delay 240,1,1 //delay 45us
                 
                  first_line	//set DDRAM as 0 (in start of first line)
                  .endm
                 
                 //------------------------------------------------------------------------
                 
                  //      LCD clear
                  .macro LCD_clear
                  push temp
                  push byte
                  LCD_send_cmd 0x01	//clear display
                  delay 142,42,1 //delay 2ms
                  pop byte
                  pop temp
                  .endm
                 
                 //------------------------------------------------------------------------
                 
                  //      1st line
                  .macro first_line
                  push temp
                  push byte
                  LCD_send_cmd 0x80	//first line
                  delay 240,1,1 //delay 45us
                  pop byte
                  pop temp
                  .endm
                 
                 //------------------------------------------------------------------------
                 
                  //      2nd line
                  .macro second_line
                  push temp
                  push byte
                  LCD_send_cmd 0xC0	//second line
                  delay 240,1,1 //delay 45us
                  pop byte
                  pop temp
                  .endm
                 
                 //------------------------------------------------------------------------
                 
                  //      set port C as output for working with display
                  .macro LCD_port_init  
                  in temp, ddrc
                  ori temp, (0 | (1<<RS) | (1<<E) | (1<<D4) | (1<<D5) | (1<<D6) | (1<<D7))
                  out ddrc,temp
                  in temp,portc
                  andi temp, (~(0 | (1<<RS) | (1<<E) | (1<<D4) | (1<<D5) | (1<<D6) | (1<<D7)))
                  out portc,temp
                  .endm
                 
                 //------------------------------------------------------------------------
                 
                  //      send command to LCD
                  .macro LCD_send_cmd
                  push temp
                  push byte	
                  ldi temp,cmd
                  ldi byte,@0
                  rcall LCD_send_byte_proc
                  pop byte
                  pop temp
                  .endm
                 
                 //------------------------------------------------------------------------
                 
                  //      send symbol to LCD
                  .macro LCD_send_symbol	
                  push temp
                  push byte
                  ldi temp,4
                  ldi byte,@0
                  rcall LCD_send_byte_proc
                  pop byte
                  pop temp
                  .endm
                 
                 //------------------------------------------------------------------------
                 
                  //      print 16-symbol string from sram adress (if adress is const)
                  .macro LCD_print_str
                  push ZH
                  push ZL
                  push temp
                  push byte
                  push r19
                  ldi ZH,high(@0)	//load to high Z-byte high byte of adress
                  ldi ZL,low(@0)	//load to low Z-byte low byte of adress
                  ldi temp,data	//temp = 0x04 for send data to LCD
                 
                  ldi r19,17			//r19 is a counter
                  sram_read_loop:	//loop 16 times
                  ld byte,Z+			//read from SRAM and post-inc
                  rcall LCD_send_byte_proc	//print symbol to LCD
                  delay 240,1,1 //delay 45us
                  dec r19			//loop things...
                  brne sram_read_loop//go to sram_read_loop label if r19 is not 0
                 
                  pop r19
                  pop byte
                  pop temp
                  pop ZL
                  pop ZH
                  .endm
                 
                 //------------------------------------------------------------------------
                 
                  //      print 16-symbol string from sram adress (if adress is in register)
                  //					ADRESS MUST BE IN X REGISTER
                  .macro LCD_print_str_reg
                  push temp
                  push byte
                  push XL
                  push XH
                  push r19
                 
                  ldi temp,data	//temp = 0x04 for send data to LCD
                 
                  ldi r19,17			//r19 is a counter
                  sram_read_loop:	//loop 16 times
                  ld byte,X+			//read from SRAM and post-inc
                  rcall LCD_send_byte_proc	//print symbol to LCD
                  delay 240,1,1 //delay 45us
                  dec r19			//loop things...
                  brne sram_read_loop//go to sram_read_loop label if r19 is not 0
                 
                  pop r19
                  pop XH
                  pop XL
                  pop byte
                  pop temp
                  .endm
                 
                 //------------------------------------------------------------------------
                 
                 //==============PROCEDURES=====================================================
                 
                  //------delay proc-------------------------------------------------------
                       
                  delay_proc:
                 
                 delay_proc_label: 
000032 959a      	dec  r25
000033 f7f1          brne delay_proc_label
000034 958a          dec  r24
000035 f7e1          brne delay_proc_label
000036 957a      	dec  r23
000037 f7d1          brne delay_proc_label
                 
000038 9508       ret
                 
                 //------Send byte to LCD as 4-but mode------------------------------------
                 
                  LCD_send_byte_proc:
000039 930f       push byte //save symbol to stack
00003a 7014       andi temp,0b0000_0100
00003b bb15       out portc,temp //setting RS line
                 
                  //======High half-byte send=======
00003c 7f00       andi byte,0xF0 //clear low half-byte
                 				//example:
                 				//before ANDI byte was 0b01011111
                 				//after byte is 0b01010000
                 
00003d 2b10       or temp,byte	//add high half-byte to temp register
                 				//example:
                 				//before: temp = 0b00000100, byte = 0b11110000
                 				//after: temp = 0b11110100
                 
00003e bb15       out portc,temp //out temp to port C
00003f 95c8       lpm			//3 clocks delay
000040 9aab       sbi portc,E	//enable E signal
000041 95c8       lpm			//3 clocks delay
000042 98ab       cbi portc,E	//disable E signal
000043 939f
000044 938f
000045 937f
000046 ef90
000047 e081
000048 e071
000049 dfe8
00004a 917f
00004b 918f
00004c 919f       delay 240,1,1 //delay 45us
                  //======Low half-byte send========
00004d 7014       andi temp,0b0000_0100
00004e 910f       pop byte		//get symbol from stack
00004f 700f       andi byte,0x0F //clear high half-byte
                 				//example:
                 				//before andi: byte = 0b01011010
                 				//after: byte = 0b00001010
                 
000050 0f00       lsl byte		//logical shift left
000051 0f00       lsl byte		//example:
000052 0f00       lsl byte		//00001010 <- 00010100 <- 00101000 <- 01010000 <- 10100000
000053 0f00       lsl byte
                 
000054 2b10       or temp,byte	//add symbol's low half-byte 
000055 bb15       out portc,temp //out temp to port C
000056 95c8       lpm			//3 clocks delay
000057 9aab       sbi portc,E	//enable E
000058 95c8       lpm			//3 clocks delay
000059 98ab       cbi portc,E	//disable E
00005a 95c8       lpm			//3 clocks delay
                  //=====Set port C as 0xFF=========
00005b ef00       ldi byte,0xF0
00005c bb05       out portc,byte	//out to port C 0b11110000
00005d 9508       ret
                 //------------------------------------------------------------------------
                 //                          sorry for bad english
                 .include "keyboard.inc"		//macro and procedures for 3x4 keyboard
                 
                  * keyboard.inc
                  * macro and procedures for 3x4 keyboard
                  * Sorry for bad english
                  */ 
                 
                  .equ KBD_A = 2
                  .equ KBD_B = 3
                  .equ KBD_C = 4
                  .equ KBD_D = 5
                  .equ KBD_1 = 0
                  .equ KBD_2 = 1
                  .equ KBD_3 = 2
                  .equ count_of_ticks = 5	//count of ticks for prevent false activation macro
                 
                  //=======MACRO==========================================
                  //-------Preventing false activation----------------------------
                  .macro Anti_false_activation
                  
                  ldi YH,high(tick_count)
                  ldi YL,low(tick_count)
                  ld temp,Y+						//load to temp count of ticks
                  ld r16,Y						//load to r16 number of last pressed button
                 
                  cpi r16,@0							//compare block
                  brne end_of_activation_macro		//example on C language:
                  cpi temp,3							//	if(last_btn == @0)
                  brsh end_of_activation_macro		//	{
                 									//		if(tick > count_of_ticks)
                 									//		{
                 									//			tick = 0;
                 									//			do_something...
                 									//		}
                 									//		else
                 									//		{
                 									//			return of On_(button)_Click
                 									//		}
                 									//	}
                 									//	else
                 									//	{
                 									//		tick = 0;
                 									//		do_something...
                 									//	}
                 									//	last_btn=@0
                 
                  rjmp @1							//return of On_(some_btn)_Click
                 
                  end_of_activation_macro:			//label to end of macro for continue
                 
                  ldi temp,0							//saving to RAM
                  ldi r16,@0
                  ldi YH,high(tick_count)
                  ldi YL,low(tick_count)
                  st Y+,temp
                  st Y,r16
                 
                  .endm
                  //-------Initialization ports for working with keyboard---------
                  .macro keyboard_init
                  in temp,ddrb
                  andi temp, (~(0 | (1<<KBD_1) | (1<<KBD_2) | (1<<KBD_3)))
                  out ddrb,temp			//set KBD_1 KBD_2 KBD_3 as input
                 
                  in temp,portb
                  ori temp, (0 | (1<<KBD_1) | (1<<KBD_2) | (1<<KBD_3))
                  out portb,temp			//enable pull-ups for KBD_1 KBD_2 KBD_3
                 
                  in temp,ddrd
                  ori temp, (0 | (1<<KBD_A) | (1<<KBD_B) | (1<<KBD_C) | (1<<KBD_D))
                  out ddrd,temp			//set KBD_A KBD_B KBD_C KBD_D as output
                  .endm
                  //-------Check buttons------------------------------------------
                  .macro keyboard_check
                 
                 	in temp,pind		//set pins without corruption of other pins
                 	ori temp, 0 | (1<<KBD_A) | (1<<KBD_B) | (1<<KBD_C) | (1<<KBD_D)
                 	andi temp, (~(0 | (1<<KBD_A)))//set KBD_A as 0, and KBD_B,C,D as 1
                 	out portd,temp
                 
                 		sbis pinb,KBD_3
                 		rcall On_asterisk_Click
                 
                 		sbis pinb,KBD_2
                 		rcall On_2_Click
                 
                 		sbis pinb,KBD_1
                 		rcall On_3_Click
                 
                 	in temp,pind		//set pins without corruption of other pins
                 	ori temp, 0 | (1<<KBD_A) | (1<<KBD_B) | (1<<KBD_C) | (1<<KBD_D)
                 	andi temp, (~(0 | (1<<KBD_B)))//set KBD_B as 0, and KBD_A,C,D as 1
                 	out portd,temp
                 
                 		sbis pinb,KBD_3
                 		rcall On_1_Click
                 
                 		sbis pinb,KBD_2
                 		rcall On_5_Click
                 
                 		sbis pinb,KBD_1
                 		rcall On_6_Click
                 
                 	in temp,pind		//set pins without corruption of other pins
                 	ori temp, 0 | (1<<KBD_A) | (1<<KBD_B) | (1<<KBD_C) | (1<<KBD_D)
                 	andi temp, (~(0 | (1<<KBD_C)))//set KBD_C as 0, and KBD_A,B,D as 1
                 	out portd,temp
                 
                 		sbis pinb,KBD_3
                 		rcall On_4_Click
                 
                 		sbis pinb,KBD_2
                 		rcall On_8_Click
                 
                 		sbis pinb,KBD_1
                 		rcall On_9_Click
                 
                 	in temp,pind		//set pins without corruption of other pins
                 	ori temp, 0 | (1<<KBD_A) | (1<<KBD_B) | (1<<KBD_C) | (1<<KBD_D)
                 	andi temp, (~(0 | (1<<KBD_D)))//set KBD_D as 0, and KBD_A,B,C as 1
                 	out portd,temp
                 
                 		sbis pinb,KBD_3
                 		rcall On_7_Click
                 
                 		sbis pinb,KBD_2
                 		rcall On_0_Click
                 
                 		sbis pinb,KBD_1
                 		rcall On_grid_Click
                 
                  .endm
                 
                  //=======PROCEDURES=====================================
                  //-------On 1 click-----------------------------
                  On_1_click:
00005e 931f       push temp
00005f 93df       push YH
000060 93cf       push YL
000061 930f       push r16
                 
000062 e0d1
000063 e2c1
000064 9119
000065 8108
000066 3301
000067 f419
000068 3013
000069 f408
00006a c006
00006b e010
00006c e301
00006d e0d1
00006e e2c1
00006f 9319
000070 8308       Anti_false_activation '1', return_On_1_Click
                 
                  return_On_1_Click:
000071 910f       pop r16
000072 91cf       pop YL
000073 91df       pop YH
000074 911f       pop temp
                 
000075 9bb2       sbis pinb,KBD_3		//wait until button is turned off
000076 cffe       rjmp PC-1
000077 9508       ret
                  //-------On 2 click-----------------------------
                  On_2_click:
000078 931f       push temp
000079 93df       push YH
00007a 93cf       push YL
00007b 930f       push r16
                 
00007c e0d1
00007d e2c1
00007e 9119
00007f 8108
000080 3302
000081 f419
000082 3013
000083 f408
000084 c08b
000085 e010
000086 e302
000087 e0d1
000088 e2c1
000089 9319
00008a 8308       Anti_false_activation '2', return_On_2_Click
                 
00008b 932f
00008c 93bf
00008d 93af
00008e 931f
00008f 93df
000090 93cf
000091 e0d1
000092 e2c0
000093 8128
000094 e010
000095 1321
000096 c001
000097 c072
000098 952a
000099 e110
00009a 9f12
00009b 2da0
00009c 2db1
00009d e610
00009e 0fa1
00009f 2711
0000a0 1fb1
0000a1 931f
0000a2 930f
0000a3 931f
0000a4 930f
0000a5 e010
0000a6 e800
0000a7 df91
0000a8 910f
0000a9 911f
0000aa 939f
0000ab 938f
0000ac 937f
0000ad ef90
0000ae e081
0000af e071
0000b0 df81
0000b1 917f
0000b2 918f
0000b3 919f
0000b4 910f
0000b5 911f
0000b6 931f
0000b7 930f
0000b8 93af
0000b9 93bf
0000ba 933f
0000bb e014
0000bc e131
0000bd 910d
0000be df7a
0000bf 939f
0000c0 938f
0000c1 937f
0000c2 ef90
0000c3 e081
0000c4 e071
0000c5 df6c
0000c6 917f
0000c7 918f
0000c8 919f
0000c9 953a
0000ca f791
0000cb 913f
0000cc 91bf
0000cd 91af
0000ce 910f
0000cf 911f
0000d0 e110
0000d1 9f12
0000d2 2da0
0000d3 2db1
0000d4 ec10
0000d5 0fa1
0000d6 2711
0000d7 1fb1
0000d8 931f
0000d9 930f
0000da 931f
0000db 930f
0000dc e010
0000dd ec00
0000de df5a
0000df 910f
0000e0 911f
0000e1 939f
0000e2 938f
0000e3 937f
0000e4 ef90
0000e5 e081
0000e6 e071
0000e7 df4a
0000e8 917f
0000e9 918f
0000ea 919f
0000eb 910f
0000ec 911f
0000ed 931f
0000ee 930f
0000ef 93af
0000f0 93bf
0000f1 933f
0000f2 e014
0000f3 e131
0000f4 910d
0000f5 df43
0000f6 939f
0000f7 938f
0000f8 937f
0000f9 ef90
0000fa e081
0000fb e071
0000fc df35
0000fd 917f
0000fe 918f
0000ff 919f
000100 953a
000101 f791
000102 913f
000103 91bf
000104 91af
000105 910f
000106 911f
000107 e0d1
000108 e2c0
000109 8328
00010a 91cf
00010b 91df
00010c 911f
00010d 91af
00010e 91bf
00010f 912f       menu_prev
                 
                  return_On_2_Click:
000110 910f       pop r16
000111 91cf       pop YL
000112 91df       pop YH
000113 911f       pop temp
                 
000114 9bb1       sbis pinb,KBD_2		//wait until button is turned off
000115 cffe       rjmp PC-1
000116 9508       ret
                  //-------On 3 click-----------------------------
                  On_3_click:
000117 931f       push temp
000118 93df       push YH
000119 93cf       push YL
00011a 930f       push r16
                 
00011b e0d1
00011c e2c1
00011d 9119
00011e 8108
00011f 3303
000120 f419
000121 3013
000122 f408
000123 c006
000124 e010
000125 e303
000126 e0d1
000127 e2c1
000128 9319
000129 8308       Anti_false_activation '3', return_On_3_Click
                  
                  return_On_3_Click:
00012a 910f       pop r16
00012b 91cf       pop YL
00012c 91df       pop YH
00012d 911f       pop temp
                 
00012e 9bb0       sbis pinb,KBD_1		//wait until button is turned off
00012f cffe       rjmp PC-1
000130 9508       ret
                  //-------On 4 click-----------------------------
                  On_4_click:
000131 931f       push temp
000132 93df       push YH
000133 93cf       push YL
000134 930f       push r16
                 
000135 e0d1
000136 e2c1
000137 9119
000138 8108
000139 3304
00013a f419
00013b 3013
00013c f408
00013d c006
00013e e010
00013f e304
000140 e0d1
000141 e2c1
000142 9319
000143 8308       Anti_false_activation '4', return_On_4_Click
                 
                  return_On_4_Click:
000144 910f       pop r16
000145 91cf       pop YL
000146 91df       pop YH
000147 911f       pop temp
                 
000148 9bb0       sbis pinb,KBD_1		//wait until button is turned off
000149 cffe       rjmp PC-1
00014a 9508       ret
                  //-------On 5 click-----------------------------
                  On_5_click:
00014b 931f       push temp
00014c 93df       push YH
00014d 93cf       push YL
00014e 930f       push r16
                 
00014f e0d1
000150 e2c1
000151 9119
000152 8108
000153 3305
000154 f419
000155 3013
000156 f408
000157 c006
000158 e010
000159 e305
00015a e0d1
00015b e2c1
00015c 9319
00015d 8308       Anti_false_activation '5', return_On_5_Click
                 
                  return_On_5_Click:
00015e 910f       pop r16
00015f 91cf       pop YL
000160 91df       pop YH
000161 911f       pop temp
                 
000162 9bb1       sbis pinb,KBD_2		//wait until button is turned off
000163 cffe       rjmp PC-1
000164 9508       ret
                  //-------On 6 click-----------------------------
                  On_6_click:
000165 931f       push temp
000166 93df       push YH
000167 93cf       push YL
000168 930f       push r16
                 
000169 e0d1
00016a e2c1
00016b 9119
00016c 8108
00016d 3306
00016e f419
00016f 3013
000170 f408
000171 c006
000172 e010
000173 e306
000174 e0d1
000175 e2c1
000176 9319
000177 8308       Anti_false_activation '6', return_On_6_Click
                 
                  return_On_6_Click:
000178 910f       pop r16
000179 91cf       pop YL
00017a 91df       pop YH
00017b 911f       pop temp
                 
00017c 9bb0       sbis pinb,KBD_1		//wait until button is turned off
00017d cffe       rjmp PC-1
00017e 9508       ret
                  //-------On 7 click-----------------------------
                  On_7_click:
00017f 931f       push temp
000180 93df       push YH
000181 93cf       push YL
000182 930f       push r16
                 
000183 e0d1
000184 e2c1
000185 9119
000186 8108
000187 3307
000188 f419
000189 3013
00018a f408
00018b c006
00018c e010
00018d e307
00018e e0d1
00018f e2c1
000190 9319
000191 8308       Anti_false_activation '7', return_On_7_Click
                 
                  return_On_7_Click:
000192 910f       pop r16
000193 91cf       pop YL
000194 91df       pop YH
000195 911f       pop temp
                 
000196 9bb2       sbis pinb,KBD_3		//wait until button is turned off
000197 cffe       rjmp PC-1
000198 9508       ret
                  //-------On 8 click-----------------------------
                  On_8_click:
000199 931f       push temp
00019a 93df       push YH
00019b 93cf       push YL
00019c 930f       push r16
                 
00019d e0d1
00019e e2c1
00019f 9119
0001a0 8108
0001a1 3308
0001a2 f419
0001a3 3013
0001a4 f408
0001a5 c08b
0001a6 e010
0001a7 e308
0001a8 e0d1
0001a9 e2c1
0001aa 9319
0001ab 8308       Anti_false_activation '8', return_On_8_Click
                  
0001ac 932f
0001ad 93bf
0001ae 93af
0001af 931f
0001b0 93df
0001b1 93cf
0001b2 e0d1
0001b3 e2c0
0001b4 8128
0001b5 e015
0001b6 1321
0001b7 c001
0001b8 c072
0001b9 9523
0001ba e110
0001bb 9f12
0001bc 2da0
0001bd 2db1
0001be e610
0001bf 0fa1
0001c0 2711
0001c1 1fb1
0001c2 931f
0001c3 930f
0001c4 931f
0001c5 930f
0001c6 e010
0001c7 e800
0001c8 de70
0001c9 910f
0001ca 911f
0001cb 939f
0001cc 938f
0001cd 937f
0001ce ef90
0001cf e081
0001d0 e071
0001d1 de60
0001d2 917f
0001d3 918f
0001d4 919f
0001d5 910f
0001d6 911f
0001d7 931f
0001d8 930f
0001d9 93af
0001da 93bf
0001db 933f
0001dc e014
0001dd e131
0001de 910d
0001df de59
0001e0 939f
0001e1 938f
0001e2 937f
0001e3 ef90
0001e4 e081
0001e5 e071
0001e6 de4b
0001e7 917f
0001e8 918f
0001e9 919f
0001ea 953a
0001eb f791
0001ec 913f
0001ed 91bf
0001ee 91af
0001ef 910f
0001f0 911f
0001f1 e110
0001f2 9f12
0001f3 2da0
0001f4 2db1
0001f5 ec10
0001f6 0fa1
0001f7 2711
0001f8 1fb1
0001f9 931f
0001fa 930f
0001fb 931f
0001fc 930f
0001fd e010
0001fe ec00
0001ff de39
000200 910f
000201 911f
000202 939f
000203 938f
000204 937f
000205 ef90
000206 e081
000207 e071
000208 de29
000209 917f
00020a 918f
00020b 919f
00020c 910f
00020d 911f
00020e 931f
00020f 930f
000210 93af
000211 93bf
000212 933f
000213 e014
000214 e131
000215 910d
000216 de22
000217 939f
000218 938f
000219 937f
00021a ef90
00021b e081
00021c e071
00021d de14
00021e 917f
00021f 918f
000220 919f
000221 953a
000222 f791
000223 913f
000224 91bf
000225 91af
000226 910f
000227 911f
000228 e0d1
000229 e2c0
00022a 8328
00022b 91cf
00022c 91df
00022d 911f
00022e 91af
00022f 91bf
000230 912f       menu_next
                 
                  return_On_8_Click:
000231 910f       pop r16
000232 91cf       pop YL
000233 91df       pop YH
000234 911f       pop temp
                 
000235 9bb1       sbis pinb,KBD_2		//wait until button is turned off
000236 cffe       rjmp PC-1
000237 9508       ret
                  //-------On 9 click-----------------------------
                  On_9_click:
000238 931f       push temp
000239 93df       push YH
00023a 93cf       push YL
00023b 930f       push r16
                 
00023c e0d1
00023d e2c1
00023e 9119
00023f 8108
000240 3309
000241 f419
000242 3013
000243 f408
000244 c006
000245 e010
000246 e309
000247 e0d1
000248 e2c1
000249 9319
00024a 8308       Anti_false_activation '9', return_On_9_Click
                 
                  return_On_9_Click:
00024b 910f       pop r16
00024c 91cf       pop YL
00024d 91df       pop YH
00024e 911f       pop temp
                 
00024f 9bb0       sbis pinb,KBD_1		//wait until button is turned off
000250 cffe       rjmp PC-1
000251 9508       ret
                  //-------On * click-----------------------------
                  On_asterisk_click:
000252 931f       push temp
000253 93df       push YH
000254 93cf       push YL
000255 930f       push r16
                 
000256 e0d1
000257 e2c1
000258 9119
000259 8108
00025a 320a
00025b f419
00025c 3013
00025d f408
00025e c006
00025f e010
000260 e20a
000261 e0d1
000262 e2c1
000263 9319
000264 8308       Anti_false_activation '*', return_On_asterisk_Click
                 
                  return_On_asterisk_Click:
000265 910f       pop r16
000266 91cf       pop YL
000267 91df       pop YH
000268 911f       pop temp
                 
000269 9bb2       sbis pinb,KBD_3		//wait until button is turned off
00026a cffe       rjmp PC-1
00026b 9508       ret
                  //-------On 0 click-----------------------------
                  On_0_click:
00026c 931f       push temp
00026d 93df       push YH
00026e 93cf       push YL
00026f 930f       push r16
                 
000270 e0d1
000271 e2c1
000272 9119
000273 8108
000274 3300
000275 f419
000276 3013
000277 f408
000278 c006
000279 e010
00027a e300
00027b e0d1
00027c e2c1
00027d 9319
00027e 8308       Anti_false_activation '0', return_On_0_Click
                 
                  return_On_0_Click:
00027f 910f       pop r16
000280 91cf       pop YL
000281 91df       pop YH
000282 911f       pop temp
                 
000283 9bb1       sbis pinb,KBD_2		//wait until button is turned off
000284 cffe       rjmp PC-1
000285 9508       ret
                  //-------On # click-----------------------------
                  On_grid_click:
000286 931f       push temp
000287 93df       push YH
000288 93cf       push YL
000289 930f       push r16
                 
00028a e0d1
00028b e2c1
00028c 9119
00028d 8108
00028e 3203
00028f f419
000290 3013
000291 f408
000292 c006
000293 e010
000294 e203
000295 e0d1
000296 e2c1
000297 9319
000298 8308       Anti_false_activation '#', return_On_grid_Click
                 
                  return_On_grid_Click:
000299 910f       pop r16
00029a 91cf       pop YL
00029b 91df       pop YH
00029c 911f       pop temp
                 
00029d 9bb2       sbis pinb,KBD_3		//wait until button is turned off
00029e cffe       rjmp PC-1
00029f 9508       ret
                  //----------------------------------------------
                 //================================================================
                 .include "timers.inc"
                 
                  * timers.inc
                  *
                  *  Created: 05.11.2015 0:04:38
                  *   Author: Hogs
                  */ 
                 
                  //==============TIMER 1 (16-bit)============================================
                 
                  //======MACRO========================
                  //------Timer 1 Init-----------
                  .macro Timer1_Init
                  cli
                  ldi temp, 0 | (1<<OCIE1A)  //enable A Match Interrupt
                  out TIMSK,temp 
                  clr temp
                  out TCCR1A,temp		//Normal Timer Mode
                  ldi temp,0b0000_0011
                  out TCCR1B,temp		//Set prescaler 1/64
                  ldi r16,0x61			
                  ldi r17,0xA8
                  out OCR1AH,r16			//set A as 25000
                  out OCR1AL,r17			//that mean timer tick is 0.1sec
                  clr temp
                  out TCNT1H,temp		//set current timer/counter as 0
                  out TCNT1L,temp
                  sei
                  .endm
                  //-----------------------------
                  //======INTERRUPTS AND PROC==========
                  //------On Match A Interrupt------
                  Keyboard_check_interrupt:
0002a0 94f8       cli
0002a1 931f       push temp
0002a2 93df       push YH
0002a3 93cf       push YL
                 
0002a4 b310
0002a5 631c
0002a6 7f1b
0002a7 bb12
0002a8 9bb2
0002a9 dfa8
0002aa 9bb1
0002ab ddcc
0002ac 9bb0
0002ad de69
0002ae b310
0002af 631c
0002b0 7f17
0002b1 bb12
0002b2 9bb2
0002b3 ddaa
0002b4 9bb1
0002b5 de95
0002b6 9bb0
0002b7 dead
0002b8 b310
0002b9 631c
0002ba 7e1f
0002bb bb12
0002bc 9bb2
0002bd de73
0002be 9bb1
0002bf ded9
0002c0 9bb0
0002c1 df76
0002c2 b310
0002c3 631c
0002c4 7d1f
0002c5 bb12
0002c6 9bb2
0002c7 deb7
0002c8 9bb1
0002c9 dfa2
0002ca 9bb0
0002cb dfba       keyboard_check
                 
0002cc 2711       clr temp
0002cd bd1d       out TCNT1H,temp		//set current timer/counter as 0
0002ce bd1c       out TCNT1L,temp
                 
0002cf e0d1       ldi YH,high(tick_count)
0002d0 e2c1       ldi YL,low(tick_count)
0002d1 8118       ld temp,Y
0002d2 9513       inc temp
0002d3 8318       st Y,temp	
                 
0002d4 91cf       pop YL
0002d5 91df       pop YH
0002d6 911f       pop temp
0002d7 9478       sei
0002d8 9518       reti
                  //--------------------------------
                 
                 reset:
                 .include "core_init.inc"	//clear sram, registers and stack init
                 
                  * Clear all registers and SRAM
                  * Initialization stack
                  */ 
                 
                 //================SRAM CLEAR=================================
                 RAM_Flush:	
0002d9 e6e0      LDI	ZL,Low(SRAM_START)
0002da e0f0      LDI	ZH,High(SRAM_START)
0002db 2700      CLR	R16
                 Flush:
0002dc 9301      ST Z+,R16
0002dd 30f8      CPI	ZH,High(RAMEND+1)
0002de f7e9      BRNE Flush
0002df 36e0      CPI	ZL,Low(RAMEND+1)	
0002e0 f7d9      BRNE Flush 
0002e1 27ee      CLR	ZL
0002e2 27ff      CLR	ZH
                 //===============REGISTERS CLEAR=============================
0002e3 e1ee      LDI	ZL, 30			
0002e4 27ff      CLR	ZH		
0002e5 95ea      DEC	ZL		
0002e6 83f0      ST Z,ZH		
0002e7 f7e9      BRNE PC-2		
                 //===============STACK INIT==================================
0002e8 e50f      LDI R16,Low(RAMEND)		
0002e9 bf0d      OUT SPL,R16			
0002ea e008      LDI R16,High(RAMEND)
0002eb bf0e      OUT SPH,R16
                 //-----------Program start-------------------------
                 
0002ec 94f8
0002ed e110
0002ee bf19
0002ef 2711
0002f0 bd1f
0002f1 e013
0002f2 bd1e
0002f3 e601
0002f4 ea18
0002f5 bd0b
0002f6 bd1a
0002f7 2711
0002f8 bd1d
0002f9 bd1c
0002fa 9478      Timer1_Init
0002fb b317
0002fc 7f18
0002fd bb17
0002fe b318
0002ff 6017
000300 bb18
000301 b311
000302 631c
000303 bb11      keyboard_init				//initialization of ports for keyboard
000304 b314
000305 6f1c
000306 bb14
000307 b315
000308 7013
000309 bb15
00030a 939f
00030b 938f
00030c 937f
00030d ef92
00030e e08f
00030f e075
000310 dd21
000311 917f
000312 918f
000313 919f
000314 e310
000315 bb15
000316 9aab
000317 95c8
000318 98ab
000319 939f
00031a 938f
00031b 937f
00031c ee95
00031d e18e
00031e e079
00031f dd12
000320 917f
000321 918f
000322 919f
000323 9aab
000324 95c8
000325 98ab
000326 939f
000327 938f
000328 937f
000329 ef92
00032a e08f
00032b e075
00032c dd05
00032d 917f
00032e 918f
00032f 919f
000330 9aab
000331 95c8
000332 98ab
000333 939f
000334 938f
000335 937f
000336 ef92
000337 e08f
000338 e075
000339 dcf8
00033a 917f
00033b 918f
00033c 919f
00033d e210
00033e bb15
00033f 9aab
000340 95c8
000341 98ab
000342 939f
000343 938f
000344 937f
000345 ef90
000346 e081
000347 e071
000348 dce9
000349 917f
00034a 918f
00034b 919f
00034c 931f
00034d 930f
00034e e010
00034f e208
000350 dce8
000351 910f
000352 911f
000353 939f
000354 938f
000355 937f
000356 ef90
000357 e081
000358 e071
000359 dcd8
00035a 917f
00035b 918f
00035c 919f
00035d 931f
00035e 930f
00035f e010
000360 e001
000361 dcd7
000362 910f
000363 911f
000364 939f
000365 938f
000366 937f
000367 e89e
000368 e28a
000369 e071
00036a dcc7
00036b 917f
00036c 918f
00036d 919f
00036e 931f
00036f 930f
000370 e010
000371 e00f
000372 dcc6
000373 910f
000374 911f
000375 939f
000376 938f
000377 937f
000378 e89e
000379 e28a
00037a e071
00037b dcb6
00037c 917f
00037d 918f
00037e 919f
00037f 931f
000380 930f
000381 e010
000382 e400
000383 dcb5
000384 910f
000385 911f
000386 939f
000387 938f
000388 937f
000389 ef90
00038a e081
00038b e071
00038c dca5
00038d 917f
00038e 918f
00038f 919f
000390 931f
000391 930f
000392 e014
000393 e000
000394 dca4
000395 910f
000396 911f
000397 939f
000398 938f
000399 937f
00039a ef90
00039b e081
00039c e071
00039d dc94
00039e 917f
00039f 918f
0003a0 919f
0003a1 931f
0003a2 930f
0003a3 e014
0003a4 e000
0003a5 dc93
0003a6 910f
0003a7 911f
0003a8 939f
0003a9 938f
0003aa 937f
0003ab ef90
0003ac e081
0003ad e071
0003ae dc83
0003af 917f
0003b0 918f
0003b1 919f
0003b2 931f
0003b3 930f
0003b4 e014
0003b5 e000
0003b6 dc82
0003b7 910f
0003b8 911f
0003b9 939f
0003ba 938f
0003bb 937f
0003bc ef90
0003bd e081
0003be e071
0003bf dc72
0003c0 917f
0003c1 918f
0003c2 919f
0003c3 931f
0003c4 930f
0003c5 e014
0003c6 e000
0003c7 dc71
0003c8 910f
0003c9 911f
0003ca 939f
0003cb 938f
0003cc 937f
0003cd ef90
0003ce e081
0003cf e071
0003d0 dc61
0003d1 917f
0003d2 918f
0003d3 919f
0003d4 931f
0003d5 930f
0003d6 e014
0003d7 e004
0003d8 dc60
0003d9 910f
0003da 911f
0003db 939f
0003dc 938f
0003dd 937f
0003de ef90
0003df e081
0003e0 e071
0003e1 dc50
0003e2 917f
0003e3 918f
0003e4 919f
0003e5 931f
0003e6 930f
0003e7 e014
0003e8 e00e
0003e9 dc4f
0003ea 910f
0003eb 911f
0003ec 939f
0003ed 938f
0003ee 937f
0003ef ef90
0003f0 e081
0003f1 e071
0003f2 dc3f
0003f3 917f
0003f4 918f
0003f5 919f
0003f6 931f
0003f7 930f
0003f8 e014
0003f9 e10f
0003fa dc3e
0003fb 910f
0003fc 911f
0003fd 939f
0003fe 938f
0003ff 937f
000400 ef90
000401 e081
000402 e071
000403 dc2e
000404 917f
000405 918f
000406 919f
000407 931f
000408 930f
000409 e014
00040a e000
00040b dc2d
00040c 910f
00040d 911f
00040e 939f
00040f 938f
000410 937f
000411 ef90
000412 e081
000413 e071
000414 dc1d
000415 917f
000416 918f
000417 919f
000418 931f
000419 930f
00041a e014
00041b e000
00041c dc1c
00041d 910f
00041e 911f
00041f 939f
000420 938f
000421 937f
000422 ef90
000423 e081
000424 e071
000425 dc0c
000426 917f
000427 918f
000428 919f
000429 931f
00042a 930f
00042b e014
00042c e10f
00042d dc0b
00042e 910f
00042f 911f
000430 939f
000431 938f
000432 937f
000433 ef90
000434 e081
000435 e071
000436 dbfb
000437 917f
000438 918f
000439 919f
00043a 931f
00043b 930f
00043c e014
00043d e00e
00043e dbfa
00043f 910f
000440 911f
000441 939f
000442 938f
000443 937f
000444 ef90
000445 e081
000446 e071
000447 dbea
000448 917f
000449 918f
00044a 919f
00044b 931f
00044c 930f
00044d e014
00044e e004
00044f dbe9
000450 910f
000451 911f
000452 939f
000453 938f
000454 937f
000455 ef90
000456 e081
000457 e071
000458 dbd9
000459 917f
00045a 918f
00045b 919f
00045c 931f
00045d 930f
00045e e014
00045f e000
000460 dbd8
000461 910f
000462 911f
000463 939f
000464 938f
000465 937f
000466 ef90
000467 e081
000468 e071
000469 dbc8
00046a 917f
00046b 918f
00046c 919f
00046d 931f
00046e 930f
00046f e014
000470 e000
000471 dbc7
000472 910f
000473 911f
000474 939f
000475 938f
000476 937f
000477 ef90
000478 e081
000479 e071
00047a dbb7
00047b 917f
00047c 918f
00047d 919f
00047e 931f
00047f 930f
000480 e014
000481 e000
000482 dbb6
000483 910f
000484 911f
000485 939f
000486 938f
000487 937f
000488 ef90
000489 e081
00048a e071
00048b dba6
00048c 917f
00048d 918f
00048e 919f
00048f 931f
000490 930f
000491 e014
000492 e000
000493 dba5
000494 910f
000495 911f
000496 939f
000497 938f
000498 937f
000499 ef90
00049a e081
00049b e071
00049c db95
00049d 917f
00049e 918f
00049f 919f
0004a0 931f
0004a1 930f
0004a2 931f
0004a3 930f
0004a4 e010
0004a5 e800
0004a6 db92
0004a7 910f
0004a8 911f
0004a9 939f
0004aa 938f
0004ab 937f
0004ac ef90
0004ad e081
0004ae e071
0004af db82
0004b0 917f
0004b1 918f
0004b2 919f
0004b3 910f
0004b4 911f      LCD_init					//LCD initialization
0004b5 27dd
0004b6 e6c0
0004b7 27ee
0004b8 27ff
0004b9 ec31
0004ba db6e
0004bb 9309
0004bc 95e3
0004bd 953a
0004be f7d9
0004bf e0d1
0004c0 e2c0
0004c1 e010
0004c2 8318
0004c3 93ff
0004c4 93ef
0004c5 931f
0004c6 930f
0004c7 933f
0004c8 e0f0
0004c9 e6e0
0004ca e014
0004cb e131
0004cc 9101
0004cd db6b
0004ce 939f
0004cf 938f
0004d0 937f
0004d1 ef90
0004d2 e081
0004d3 e071
0004d4 db5d
0004d5 917f
0004d6 918f
0004d7 919f
0004d8 953a
0004d9 f791
0004da 913f
0004db 910f
0004dc 911f
0004dd 91ef
0004de 91ff
0004df 931f
0004e0 930f
0004e1 931f
0004e2 930f
0004e3 e010
0004e4 ec00
0004e5 db53
0004e6 910f
0004e7 911f
0004e8 939f
0004e9 938f
0004ea 937f
0004eb ef90
0004ec e081
0004ed e071
0004ee db43
0004ef 917f
0004f0 918f
0004f1 919f
0004f2 910f
0004f3 911f
0004f4 93ff
0004f5 93ef
0004f6 931f
0004f7 930f
0004f8 933f
0004f9 e0f0
0004fa ece0
0004fb e014
0004fc e131
0004fd 9101
0004fe db3a
0004ff 939f
000500 938f
000501 937f
000502 ef90
000503 e081
000504 e071
000505 db2c
000506 917f
000507 918f
000508 919f
000509 953a
00050a f791
00050b 913f
00050c 910f
00050d 911f
00050e 91ef
00050f 91ff      menu_init
                 
                 //-----------MAIN----------------------------------
                 main:			
000510 0000      	nop
000511 cffe      rjmp main		
                 //-------------------------------------------------
                 //========EEPROM SEGMENT=================================================
                 .eseg
                 .org 0
000000 4c
000001 65
000002 76
000003 65
000004 6c
000005 20
000006 43
000007 4f
000008 20
000009 20
00000a 20
00000b 20
00000c 20
00000d 20
00000e 20
00000f 20        ee_hello_msg:	.db "Level CO        "
000010 4c
000011 65
000012 76
000013 65
000014 6c
000015 20
000016 43
000017 48
000018 34
000019 20
00001a 20
00001b 20
00001c 20
00001d 20
00001e 20
00001f 00        ee_CH4_msg:		.db "Level CH4      ",0
000020 54
000021 65
000022 6d
000023 70
000024 65
000025 72
000026 61
000027 74
000028 75
000029 72
00002a 65
00002b 20
00002c 20
00002d 20
00002e 20
00002f 00        ee_temp_msg:	.db "Temperature    ",0
000030 43
000031 6f
000032 6f
000033 72
000034 64
000035 69
000036 6e
000037 61
000038 74
000039 65
00003a 73
00003b 20
00003c 20
00003d 20
00003e 20
00003f 00        ee_coords_msg:	.db "Coordinates    ",0
000040 54
000041 69
000042 6d
000043 65
000044 20
000045 20
000046 20
000047 20
000048 20
000049 20
00004a 20
00004b 20
00004c 20
00004d 20
00004e 20
00004f 00        ee_time_msg:	.db "Time           ",0
000050 53
000051 6f
000052 75
000053 6e
000054 64
000055 28
000056 35
000057 2d
000058 4f
000059 6e
00005a 2f
00005b 4f
00005c 66
00005d 66
00005e 29
00005f 00        ee_sound_msg:	.db "Sound(5-On/Off)",0
000060 74
000061 65
000062 73
000063 74
000064 20
000065 73
000066 74
000067 72
000068 20
000069 31
00006a 20
00006b 20
00006c 20
00006d 20
00006e 20
00006f 01        ee_test_msg1:	.db "test str 1     ",1
000070 74
000071 65
000072 73
000073 74
000074 20
000075 73
000076 74
000077 72
000078 20
000079 32
00007a 20
00007b 20
00007c 20
00007d 20
00007e 20
00007f 01        ee_test_msg2:	.db "test str 2     ",1
000080 74
000081 65
000082 73
000083 74
000084 20
000085 73
000086 74
000087 72
000088 20
000089 33
00008a 20
00008b 20
00008c 20
00008d 20
00008e 20
00008f 01        ee_test_msg3:	.db "test str 3     ",1
000090 74
000091 65
000092 73
000093 74
000094 20
000095 73
000096 74
000097 72
000098 20
000099 34
00009a 20
00009b 20
00009c 20
00009d 20
00009e 20
00009f 01        ee_test_msg4:	.db "test str 4     ",1
0000a0 74
0000a1 65
0000a2 73
0000a3 74
0000a4 20
0000a5 73
0000a6 74
0000a7 72
0000a8 20
0000a9 35
0000aa 20
0000ab 20
0000ac 20
0000ad 20
0000ae 20
0000af 01        ee_test_msg5:	.db "test str 5     ",1
0000b0 74
0000b1 65
0000b2 73
0000b3 74
0000b4 20
0000b5 73
0000b6 74
0000b7 72
0000b8 20
0000b9 36
0000ba 20
0000bb 20
0000bc 20
0000bd 20
0000be 20
0000bf 20        ee_test_msg6:	.db "test str 6      "
                 //=======================================================================


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

"ATmega32" register use summary:
r0 :   4 r1 :   4 r2 :   0 r3 :   0 r4 :   0 r5 :   0 r6 :   0 r7 :   0 
r8 :   0 r9 :   0 r10:   0 r11:   0 r12:   0 r13:   0 r14:   0 r15:   0 
r16: 202 r17: 275 r18:  16 r19:  26 r20:   0 r21:   0 r22:   0 r23: 115 
r24: 115 r25: 115 r26:  20 r27:  20 r28:  61 r29:  61 r30:  14 r31:  13 
x  :   4 y  :  56 z  :   4 
Registers used: 18 out of 35 (51.4%)

"ATmega32" instruction use summary:
.lds  :   0 .sts  :   0 adc   :   4 add   :   4 adiw  :   0 and   :   0 
andi  :  10 asr   :   0 bclr  :   0 bld   :   0 brbc  :   0 brbs  :   0 
brcc  :   0 brcs  :   0 break :   0 breq  :   0 brge  :   0 brhc  :   0 
brhs  :   0 brid  :   0 brie  :   0 brlo  :   0 brlt  :   0 brmi  :   0 
brne  :  25 brpl  :   0 brsh  :  12 brtc  :   0 brts  :   0 brvc  :   0 
brvs  :   0 bset  :   0 bst   :   0 call  :   0 cbi   :   6 cbr   :   0 
clc   :   0 clh   :   0 cli   :   3 cln   :   0 clr   :  14 cls   :   0 
clt   :   0 clv   :   0 clz   :   0 com   :   0 cp    :   0 cpc   :   0 
cpi   :  26 cpse  :   2 dec   :  12 eor   :   0 fmul  :   0 fmuls :   0 
fmulsu:   0 icall :   0 ijmp  :   0 in    :  10 inc   :   3 jmp   :   0 
ld    :  33 ldd   :   0 ldi   : 291 lds   :   0 lpm   :  27 lsl   :   4 
lsr   :   0 mov   :   8 movw  :   0 mul   :   4 muls  :   0 mulsu :   0 
neg   :   0 nop   :   1 or    :   2 ori   :   7 out   :  28 pop   : 272 
push  : 272 rcall :  83 ret   :  15 reti  :  20 rjmp  :  32 rol   :   0 
ror   :   0 sbc   :   0 sbci  :   0 sbi   :   7 sbic  :   1 sbis  :  24 
sbiw  :   0 sbr   :   0 sbrc  :   0 sbrs  :   0 sec   :   0 seh   :   0 
sei   :   3 sen   :   0 ser   :   0 ses   :   0 set   :   0 sev   :   0 
sez   :   0 sleep :   0 spm   :   0 st    :  31 std   :   0 sts   :   0 
sub   :   0 subi  :   0 swap  :   0 tst   :   0 wdr   :   0 
Instructions used: 34 out of 113 (30.1%)

"ATmega32" memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x000a24   2556      0   2556   32768   7.8%
[.dseg] 0x000060 0x000123      0    195    195    2048   9.5%
[.eseg] 0x000000 0x0000c0      0    192    192    1024  18.8%

Assembly complete, 0 errors, 0 warnings
