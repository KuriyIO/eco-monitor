
AVRASM ver. 2.1.57  D:\diplom\eco\eco\eco.asm Thu Nov 12 21:21:27 2015

[builtin](2): Including file 'D:\dev\Atmel Toolchain\AVR Assembler\Native\2.1.1175\avrassembler\Include\m32def.inc'
D:\diplom\eco\eco\eco.asm(1): Including file 'D:\dev\Atmel Toolchain\AVR Assembler\Native\2.1.1175\avrassembler\Include\m32def.inc'
D:\diplom\eco\eco\eco.asm(27): Including file 'D:\diplom\eco\eco\int_table.inc'
D:\diplom\eco\eco\eco.asm(28): Including file 'D:\diplom\eco\eco\sound.inc'
D:\diplom\eco\eco\eco.asm(29): Including file 'D:\diplom\eco\eco\menu.inc'
D:\diplom\eco\eco\eco.asm(30): Including file 'D:\diplom\eco\eco\LCD.inc'
D:\diplom\eco\eco\eco.asm(31): Including file 'D:\diplom\eco\eco\keyboard.inc'
D:\diplom\eco\eco\eco.asm(32): Including file 'D:\diplom\eco\eco\timers.inc'
D:\diplom\eco\eco\eco.asm(36): Including file 'D:\diplom\eco\eco\core_init.inc'
                 
                 .include "m32def.inc" //include define for ATmega32 controller
                 
                 ;***** Created: 2011-02-09 12:03 ******* Source: ATmega32.xml ************
                 ;*************************************************************************
                 ;* A P P L I C A T I O N   N O T E   F O R   T H E   A V R   F A M I L Y
                 ;* 
                 ;* Number            : AVR000
                 ;* File Name         : "m32def.inc"
                 ;* Title             : Register/Bit Definitions for the ATmega32
                 ;* Date              : 2011-02-09
                 ;* Version           : 2.35
                 ;* Support E-mail    : avr@atmel.com
                 ;* Target MCU        : ATmega32
                 ;* 
                 ;* DESCRIPTION
                 ;* When including this file in the assembly program file, all I/O register 
                 ;* names and I/O register bit names appearing in the data book can be used.
                 ;* In addition, the six registers forming the three data pointers X, Y and 
                 ;* Z have been assigned names XL - ZH. Highest RAM address for Internal 
                 ;* SRAM is also defined 
                 ;* 
                 ;* The Register names are represented by their hexadecimal address.
                 ;* 
                 ;* The Register Bit names are represented by their bit number (0-7).
                 ;* 
                 ;* Please observe the difference in using the bit names with instructions
                 ;* such as "sbr"/"cbr" (set/clear bit in register) and "sbrs"/"sbrc"
                 ;* (skip if bit in register set/cleared). The following example illustrates
                 ;* this:
                 ;* 
                 ;* in    r16,PORTB             ;read PORTB latch
                 ;* sbr   r16,(1<<PB6)+(1<<PB5) ;set PB6 and PB5 (use masks, not bit#)
                 ;* out   PORTB,r16             ;output to PORTB
                 ;* 
                 ;* in    r16,TIFR              ;read the Timer Interrupt Flag Register
                 ;* sbrc  r16,TOV0              ;test the overflow flag (use bit#)
                 ;* rjmp  TOV0_is_set           ;jump if set
                 ;* ...                         ;otherwise do something else
                 ;*************************************************************************
                 
                 #ifndef _M32DEF_INC_
                 #define _M32DEF_INC_
                 
                 
                 #pragma partinc 0
                 
                 ; ***** SPECIFY DEVICE ***************************************************
                 .device ATmega32
                 #pragma AVRPART ADMIN PART_NAME ATmega32
                 .equ	SIGNATURE_000	= 0x1e
                 .equ	SIGNATURE_001	= 0x95
                 .equ	SIGNATURE_002	= 0x02
                 
                 #pragma AVRPART CORE CORE_VERSION V2E
                 
                 
                 ; ***** I/O REGISTER DEFINITIONS *****************************************
                 ; NOTE:
                 ; Definitions marked "MEMORY MAPPED"are extended I/O ports
                 ; and cannot be used with IN/OUT instructions
                 .equ	SREG	= 0x3f
                 .equ	SPL	= 0x3d
                 .equ	SPH	= 0x3e
                 .equ	OCR0	= 0x3c
                 .equ	GICR	= 0x3b
                 .equ	GIFR	= 0x3a
                 .equ	TIMSK	= 0x39
                 .equ	TIFR	= 0x38
                 .equ	SPMCR	= 0x37
                 .equ	TWCR	= 0x36
                 .equ	MCUCR	= 0x35
                 .equ	MCUCSR	= 0x34
                 .equ	TCCR0	= 0x33
                 .equ	TCNT0	= 0x32
                 .equ	OSCCAL	= 0x31
                 .equ	OCDR	= 0x31
                 .equ	SFIOR	= 0x30
                 .equ	TCCR1A	= 0x2f
                 .equ	TCCR1B	= 0x2e
                 .equ	TCNT1L	= 0x2c
                 .equ	TCNT1H	= 0x2d
                 .equ	OCR1AL	= 0x2a
                 .equ	OCR1AH	= 0x2b
                 .equ	OCR1BL	= 0x28
                 .equ	OCR1BH	= 0x29
                 .equ	ICR1L	= 0x26
                 .equ	ICR1H	= 0x27
                 .equ	TCCR2	= 0x25
                 .equ	TCNT2	= 0x24
                 .equ	OCR2	= 0x23
                 .equ	ASSR	= 0x22
                 .equ	WDTCR	= 0x21
                 .equ	UBRRH	= 0x20
                 .equ	UCSRC	= 0x20
                 .equ	EEARL	= 0x1e
                 .equ	EEARH	= 0x1f
                 .equ	EEDR	= 0x1d
                 .equ	EECR	= 0x1c
                 .equ	PORTA	= 0x1b
                 .equ	DDRA	= 0x1a
                 .equ	PINA	= 0x19
                 .equ	PORTB	= 0x18
                 .equ	DDRB	= 0x17
                 .equ	PINB	= 0x16
                 .equ	PORTC	= 0x15
                 .equ	DDRC	= 0x14
                 .equ	PINC	= 0x13
                 .equ	PORTD	= 0x12
                 .equ	DDRD	= 0x11
                 .equ	PIND	= 0x10
                 .equ	SPDR	= 0x0f
                 .equ	SPSR	= 0x0e
                 .equ	SPCR	= 0x0d
                 .equ	UDR	= 0x0c
                 .equ	UCSRA	= 0x0b
                 .equ	UCSRB	= 0x0a
                 .equ	UBRRL	= 0x09
                 .equ	ACSR	= 0x08
                 .equ	ADMUX	= 0x07
                 .equ	ADCSRA	= 0x06
                 .equ	ADCH	= 0x05
                 .equ	ADCL	= 0x04
                 .equ	TWDR	= 0x03
                 .equ	TWAR	= 0x02
                 .equ	TWSR	= 0x01
                 .equ	TWBR	= 0x00
                 
                 
                 ; ***** BIT DEFINITIONS **************************************************
                 
                 ; ***** EEPROM ***********************
                 ; EEDR - EEPROM Data Register
                 .equ	EEDR0	= 0	; EEPROM Data Register bit 0
                 .equ	EEDR1	= 1	; EEPROM Data Register bit 1
                 .equ	EEDR2	= 2	; EEPROM Data Register bit 2
                 .equ	EEDR3	= 3	; EEPROM Data Register bit 3
                 .equ	EEDR4	= 4	; EEPROM Data Register bit 4
                 .equ	EEDR5	= 5	; EEPROM Data Register bit 5
                 .equ	EEDR6	= 6	; EEPROM Data Register bit 6
                 .equ	EEDR7	= 7	; EEPROM Data Register bit 7
                 
                 ; EECR - EEPROM Control Register
                 .equ	EERE	= 0	; EEPROM Read Enable
                 .equ	EEWE	= 1	; EEPROM Write Enable
                 .equ	EEMWE	= 2	; EEPROM Master Write Enable
                 .equ	EERIE	= 3	; EEPROM Ready Interrupt Enable
                 
                 
                 ; ***** WATCHDOG *********************
                 ; WDTCR - Watchdog Timer Control Register
                 .equ	WDP0	= 0	; Watch Dog Timer Prescaler bit 0
                 .equ	WDP1	= 1	; Watch Dog Timer Prescaler bit 1
                 .equ	WDP2	= 2	; Watch Dog Timer Prescaler bit 2
                 .equ	WDE	= 3	; Watch Dog Enable
                 .equ	WDTOE	= 4	; RW
                 .equ	WDDE	= WDTOE	; For compatibility
                 
                 
                 ; ***** EXTERNAL_INTERRUPT ***********
                 ; GICR - General Interrupt Control Register
                 .equ	GIMSK	= GICR	; For compatibility
                 .equ	IVCE	= 0	; Interrupt Vector Change Enable
                 .equ	IVSEL	= 1	; Interrupt Vector Select
                 .equ	INT2	= 5	; External Interrupt Request 2 Enable
                 .equ	INT0	= 6	; External Interrupt Request 0 Enable
                 .equ	INT1	= 7	; External Interrupt Request 1 Enable
                 
                 ; GIFR - General Interrupt Flag Register
                 .equ	INTF2	= 5	; External Interrupt Flag 2
                 .equ	INTF0	= 6	; External Interrupt Flag 0
                 .equ	INTF1	= 7	; External Interrupt Flag 1
                 
                 ; MCUCR - General Interrupt Control Register
                 .equ	ISC00	= 0	; Interrupt Sense Control 0 Bit 0
                 .equ	ISC01	= 1	; Interrupt Sense Control 0 Bit 1
                 .equ	ISC10	= 2	; Interrupt Sense Control 1 Bit 0
                 .equ	ISC11	= 3	; Interrupt Sense Control 1 Bit 1
                 
                 ; MCUCSR - MCU Control And Status Register
                 .equ	ISC2	= 6	; Interrupt Sense Control 2
                 
                 
                 ; ***** TIMER_COUNTER_0 **************
                 ; TCCR0 - Timer/Counter Control Register
                 .equ	CS00	= 0	; Clock Select 1
                 .equ	CS01	= 1	; Clock Select 1
                 .equ	CS02	= 2	; Clock Select 2
                 .equ	WGM01	= 3	; Waveform Generation Mode 1
                 .equ	CTC0	= WGM01	; For compatibility
                 .equ	COM00	= 4	; Compare match Output Mode 0
                 .equ	COM01	= 5	; Compare Match Output Mode 1
                 .equ	WGM00	= 6	; Waveform Generation Mode
                 .equ	PWM0	= WGM00	; For compatibility
                 .equ	FOC0	= 7	; Force Output Compare
                 
                 ; TCNT0 - Timer/Counter Register
                 .equ	TCNT0_0	= 0	; 
                 .equ	TCNT0_1	= 1	; 
                 .equ	TCNT0_2	= 2	; 
                 .equ	TCNT0_3	= 3	; 
                 .equ	TCNT0_4	= 4	; 
                 .equ	TCNT0_5	= 5	; 
                 .equ	TCNT0_6	= 6	; 
                 .equ	TCNT0_7	= 7	; 
                 
                 ; OCR0 - Output Compare Register
                 .equ	OCR0_0	= 0	; 
                 .equ	OCR0_1	= 1	; 
                 .equ	OCR0_2	= 2	; 
                 .equ	OCR0_3	= 3	; 
                 .equ	OCR0_4	= 4	; 
                 .equ	OCR0_5	= 5	; 
                 .equ	OCR0_6	= 6	; 
                 .equ	OCR0_7	= 7	; 
                 
                 ; TIMSK - Timer/Counter Interrupt Mask Register
                 .equ	TOIE0	= 0	; Timer/Counter0 Overflow Interrupt Enable
                 .equ	OCIE0	= 1	; Timer/Counter0 Output Compare Match Interrupt register
                 
                 ; TIFR - Timer/Counter Interrupt Flag register
                 .equ	TOV0	= 0	; Timer/Counter0 Overflow Flag
                 .equ	OCF0	= 1	; Output Compare Flag 0
                 
                 
                 ; ***** TIMER_COUNTER_2 **************
                 ; TIMSK - Timer/Counter Interrupt Mask register
                 .equ	TOIE2	= 6	; Timer/Counter2 Overflow Interrupt Enable
                 .equ	OCIE2	= 7	; Timer/Counter2 Output Compare Match Interrupt Enable
                 
                 ; TIFR - Timer/Counter Interrupt Flag Register
                 .equ	TOV2	= 6	; Timer/Counter2 Overflow Flag
                 .equ	OCF2	= 7	; Output Compare Flag 2
                 
                 ; TCCR2 - Timer/Counter2 Control Register
                 .equ	CS20	= 0	; Clock Select bit 0
                 .equ	CS21	= 1	; Clock Select bit 1
                 .equ	CS22	= 2	; Clock Select bit 2
                 .equ	WGM21	= 3	; Clear Timer/Counter2 on Compare Match
                 .equ	CTC2	= WGM21	; For compatibility
                 .equ	COM20	= 4	; Compare Output Mode bit 0
                 .equ	COM21	= 5	; Compare Output Mode bit 1
                 .equ	WGM20	= 6	; Pulse Width Modulator Enable
                 .equ	PWM2	= WGM20	; For compatibility
                 .equ	FOC2	= 7	; Force Output Compare
                 
                 ; TCNT2 - Timer/Counter2
                 .equ	TCNT2_0	= 0	; Timer/Counter 2 bit 0
                 .equ	TCNT2_1	= 1	; Timer/Counter 2 bit 1
                 .equ	TCNT2_2	= 2	; Timer/Counter 2 bit 2
                 .equ	TCNT2_3	= 3	; Timer/Counter 2 bit 3
                 .equ	TCNT2_4	= 4	; Timer/Counter 2 bit 4
                 .equ	TCNT2_5	= 5	; Timer/Counter 2 bit 5
                 .equ	TCNT2_6	= 6	; Timer/Counter 2 bit 6
                 .equ	TCNT2_7	= 7	; Timer/Counter 2 bit 7
                 
                 ; OCR2 - Timer/Counter2 Output Compare Register
                 .equ	OCR2_0	= 0	; Timer/Counter2 Output Compare Register Bit 0
                 .equ	OCR2_1	= 1	; Timer/Counter2 Output Compare Register Bit 1
                 .equ	OCR2_2	= 2	; Timer/Counter2 Output Compare Register Bit 2
                 .equ	OCR2_3	= 3	; Timer/Counter2 Output Compare Register Bit 3
                 .equ	OCR2_4	= 4	; Timer/Counter2 Output Compare Register Bit 4
                 .equ	OCR2_5	= 5	; Timer/Counter2 Output Compare Register Bit 5
                 .equ	OCR2_6	= 6	; Timer/Counter2 Output Compare Register Bit 6
                 .equ	OCR2_7	= 7	; Timer/Counter2 Output Compare Register Bit 7
                 
                 ; ASSR - Asynchronous Status Register
                 .equ	TCR2UB	= 0	; Timer/counter Control Register2 Update Busy
                 .equ	OCR2UB	= 1	; Output Compare Register2 Update Busy
                 .equ	TCN2UB	= 2	; Timer/Counter2 Update Busy
                 .equ	AS2	= 3	; Asynchronous Timer/counter2
                 
                 
                 ; ***** TIMER_COUNTER_1 **************
                 ; TIMSK - Timer/Counter Interrupt Mask Register
                 .equ	TOIE1	= 2	; Timer/Counter1 Overflow Interrupt Enable
                 .equ	OCIE1B	= 3	; Timer/Counter1 Output CompareB Match Interrupt Enable
                 .equ	OCIE1A	= 4	; Timer/Counter1 Output CompareA Match Interrupt Enable
                 .equ	TICIE1	= 5	; Timer/Counter1 Input Capture Interrupt Enable
                 
                 ; TIFR - Timer/Counter Interrupt Flag register
                 .equ	TOV1	= 2	; Timer/Counter1 Overflow Flag
                 .equ	OCF1B	= 3	; Output Compare Flag 1B
                 .equ	OCF1A	= 4	; Output Compare Flag 1A
                 .equ	ICF1	= 5	; Input Capture Flag 1
                 
                 ; TCCR1A - Timer/Counter1 Control Register A
                 .equ	WGM10	= 0	; Waveform Generation Mode
                 .equ	PWM10	= WGM10	; For compatibility
                 .equ	WGM11	= 1	; Waveform Generation Mode
                 .equ	PWM11	= WGM11	; For compatibility
                 .equ	FOC1B	= 2	; Force Output Compare 1B
                 .equ	FOC1A	= 3	; Force Output Compare 1A
                 .equ	COM1B0	= 4	; Compare Output Mode 1B, bit 0
                 .equ	COM1B1	= 5	; Compare Output Mode 1B, bit 1
                 .equ	COM1A0	= 6	; Compare Ouput Mode 1A, bit 0
                 .equ	COM1A1	= 7	; Compare Output Mode 1A, bit 1
                 
                 ; TCCR1B - Timer/Counter1 Control Register B
                 .equ	CS10	= 0	; Prescaler source of Timer/Counter 1
                 .equ	CS11	= 1	; Prescaler source of Timer/Counter 1
                 .equ	CS12	= 2	; Prescaler source of Timer/Counter 1
                 .equ	WGM12	= 3	; Waveform Generation Mode
                 .equ	CTC10	= WGM12	; For compatibility
                 .equ	CTC1	= WGM12	; For compatibility
                 .equ	WGM13	= 4	; Waveform Generation Mode
                 .equ	CTC11	= WGM13	; For compatibility
                 .equ	ICES1	= 6	; Input Capture 1 Edge Select
                 .equ	ICNC1	= 7	; Input Capture 1 Noise Canceler
                 
                 
                 ; ***** SPI **************************
                 ; SPDR - SPI Data Register
                 .equ	SPDR0	= 0	; SPI Data Register bit 0
                 .equ	SPDR1	= 1	; SPI Data Register bit 1
                 .equ	SPDR2	= 2	; SPI Data Register bit 2
                 .equ	SPDR3	= 3	; SPI Data Register bit 3
                 .equ	SPDR4	= 4	; SPI Data Register bit 4
                 .equ	SPDR5	= 5	; SPI Data Register bit 5
                 .equ	SPDR6	= 6	; SPI Data Register bit 6
                 .equ	SPDR7	= 7	; SPI Data Register bit 7
                 
                 ; SPSR - SPI Status Register
                 .equ	SPI2X	= 0	; Double SPI Speed Bit
                 .equ	WCOL	= 6	; Write Collision Flag
                 .equ	SPIF	= 7	; SPI Interrupt Flag
                 
                 ; SPCR - SPI Control Register
                 .equ	SPR0	= 0	; SPI Clock Rate Select 0
                 .equ	SPR1	= 1	; SPI Clock Rate Select 1
                 .equ	CPHA	= 2	; Clock Phase
                 .equ	CPOL	= 3	; Clock polarity
                 .equ	MSTR	= 4	; Master/Slave Select
                 .equ	DORD	= 5	; Data Order
                 .equ	SPE	= 6	; SPI Enable
                 .equ	SPIE	= 7	; SPI Interrupt Enable
                 
                 
                 ; ***** USART ************************
                 ; UDR - USART I/O Data Register
                 .equ	UDR0	= 0	; USART I/O Data Register bit 0
                 .equ	UDR1	= 1	; USART I/O Data Register bit 1
                 .equ	UDR2	= 2	; USART I/O Data Register bit 2
                 .equ	UDR3	= 3	; USART I/O Data Register bit 3
                 .equ	UDR4	= 4	; USART I/O Data Register bit 4
                 .equ	UDR5	= 5	; USART I/O Data Register bit 5
                 .equ	UDR6	= 6	; USART I/O Data Register bit 6
                 .equ	UDR7	= 7	; USART I/O Data Register bit 7
                 
                 ; UCSRA - USART Control and Status Register A
                 .equ	USR	= UCSRA	; For compatibility
                 .equ	MPCM	= 0	; Multi-processor Communication Mode
                 .equ	U2X	= 1	; Double the USART transmission speed
                 .equ	UPE	= 2	; Parity Error
                 .equ	PE	= UPE	; For compatibility
                 .equ	DOR	= 3	; Data overRun
                 .equ	FE	= 4	; Framing Error
                 .equ	UDRE	= 5	; USART Data Register Empty
                 .equ	TXC	= 6	; USART Transmitt Complete
                 .equ	RXC	= 7	; USART Receive Complete
                 
                 ; UCSRB - USART Control and Status Register B
                 .equ	UCR	= UCSRB	; For compatibility
                 .equ	TXB8	= 0	; Transmit Data Bit 8
                 .equ	RXB8	= 1	; Receive Data Bit 8
                 .equ	UCSZ2	= 2	; Character Size
                 .equ	CHR9	= UCSZ2	; For compatibility
                 .equ	TXEN	= 3	; Transmitter Enable
                 .equ	RXEN	= 4	; Receiver Enable
                 .equ	UDRIE	= 5	; USART Data register Empty Interrupt Enable
                 .equ	TXCIE	= 6	; TX Complete Interrupt Enable
                 .equ	RXCIE	= 7	; RX Complete Interrupt Enable
                 
                 ; UCSRC - USART Control and Status Register C
                 .equ	UCPOL	= 0	; Clock Polarity
                 .equ	UCSZ0	= 1	; Character Size
                 .equ	UCSZ1	= 2	; Character Size
                 .equ	USBS	= 3	; Stop Bit Select
                 .equ	UPM0	= 4	; Parity Mode Bit 0
                 .equ	UPM1	= 5	; Parity Mode Bit 1
                 .equ	UMSEL	= 6	; USART Mode Select
                 .equ	URSEL	= 7	; Register Select
                 
                 .equ	UBRRHI	= UBRRH	; For compatibility
                 
                 ; ***** ANALOG_COMPARATOR ************
                 ; SFIOR - Special Function IO Register
                 .equ	ACME	= 3	; Analog Comparator Multiplexer Enable
                 
                 ; ACSR - Analog Comparator Control And Status Register
                 .equ	ACIS0	= 0	; Analog Comparator Interrupt Mode Select bit 0
                 .equ	ACIS1	= 1	; Analog Comparator Interrupt Mode Select bit 1
                 .equ	ACIC	= 2	; Analog Comparator Input Capture Enable
                 .equ	ACIE	= 3	; Analog Comparator Interrupt Enable
                 .equ	ACI	= 4	; Analog Comparator Interrupt Flag
                 .equ	ACO	= 5	; Analog Compare Output
                 .equ	ACBG	= 6	; Analog Comparator Bandgap Select
                 .equ	ACD	= 7	; Analog Comparator Disable
                 
                 
                 ; ***** AD_CONVERTER *****************
                 ; ADMUX - The ADC multiplexer Selection Register
                 .equ	MUX0	= 0	; Analog Channel and Gain Selection Bits
                 .equ	MUX1	= 1	; Analog Channel and Gain Selection Bits
                 .equ	MUX2	= 2	; Analog Channel and Gain Selection Bits
                 .equ	MUX3	= 3	; Analog Channel and Gain Selection Bits
                 .equ	MUX4	= 4	; Analog Channel and Gain Selection Bits
                 .equ	ADLAR	= 5	; Left Adjust Result
                 .equ	REFS0	= 6	; Reference Selection Bit 0
                 .equ	REFS1	= 7	; Reference Selection Bit 1
                 
                 ; ADCSRA - The ADC Control and Status register
                 .equ	ADCSR	= ADCSRA	; For compatibility
                 .equ	ADPS0	= 0	; ADC  Prescaler Select Bits
                 .equ	ADPS1	= 1	; ADC  Prescaler Select Bits
                 .equ	ADPS2	= 2	; ADC  Prescaler Select Bits
                 .equ	ADIE	= 3	; ADC Interrupt Enable
                 .equ	ADIF	= 4	; ADC Interrupt Flag
                 .equ	ADATE	= 5	; When this bit is written to one,the Timer/Counter2 prescaler will be reset.The bit will be cleared by hardware after the operation is performed.Writing a zero to this bit will have no effect.This bit will always be read as zero if Timer/C                 ounter2 is clocked by the internal CPU clock.If this bit is written when Timer/Counter2 is operating in asynchronous mode,the bit will remain one until the prescaler has been reset.
                 .equ	ADFR	= ADATE	; For compatibility
                 .equ	ADSC	= 6	; ADC Start Conversion
                 .equ	ADEN	= 7	; ADC Enable
                 
                 ; ADCH - ADC Data Register High Byte
                 .equ	ADCH0	= 0	; ADC Data Register High Byte Bit 0
                 .equ	ADCH1	= 1	; ADC Data Register High Byte Bit 1
                 .equ	ADCH2	= 2	; ADC Data Register High Byte Bit 2
                 .equ	ADCH3	= 3	; ADC Data Register High Byte Bit 3
                 .equ	ADCH4	= 4	; ADC Data Register High Byte Bit 4
                 .equ	ADCH5	= 5	; ADC Data Register High Byte Bit 5
                 .equ	ADCH6	= 6	; ADC Data Register High Byte Bit 6
                 .equ	ADCH7	= 7	; ADC Data Register High Byte Bit 7
                 
                 ; ADCL - ADC Data Register Low Byte
                 .equ	ADCL0	= 0	; ADC Data Register Low Byte Bit 0
                 .equ	ADCL1	= 1	; ADC Data Register Low Byte Bit 1
                 .equ	ADCL2	= 2	; ADC Data Register Low Byte Bit 2
                 .equ	ADCL3	= 3	; ADC Data Register Low Byte Bit 3
                 .equ	ADCL4	= 4	; ADC Data Register Low Byte Bit 4
                 .equ	ADCL5	= 5	; ADC Data Register Low Byte Bit 5
                 .equ	ADCL6	= 6	; ADC Data Register Low Byte Bit 6
                 .equ	ADCL7	= 7	; ADC Data Register Low Byte Bit 7
                 
                 ; SFIOR - Special Function IO Register
                 .equ	ADTS0	= 5	; ADC Auto Trigger Source 0
                 .equ	ADTS1	= 6	; ADC Auto Trigger Source 1
                 .equ	ADTS2	= 7	; ADC Auto Trigger Source 2
                 
                 
                 ; ***** PORTA ************************
                 ; PORTA - Port A Data Register
                 .equ	PORTA0	= 0	; Port A Data Register bit 0
                 .equ	PA0	= 0	; For compatibility
                 .equ	PORTA1	= 1	; Port A Data Register bit 1
                 .equ	PA1	= 1	; For compatibility
                 .equ	PORTA2	= 2	; Port A Data Register bit 2
                 .equ	PA2	= 2	; For compatibility
                 .equ	PORTA3	= 3	; Port A Data Register bit 3
                 .equ	PA3	= 3	; For compatibility
                 .equ	PORTA4	= 4	; Port A Data Register bit 4
                 .equ	PA4	= 4	; For compatibility
                 .equ	PORTA5	= 5	; Port A Data Register bit 5
                 .equ	PA5	= 5	; For compatibility
                 .equ	PORTA6	= 6	; Port A Data Register bit 6
                 .equ	PA6	= 6	; For compatibility
                 .equ	PORTA7	= 7	; Port A Data Register bit 7
                 .equ	PA7	= 7	; For compatibility
                 
                 ; DDRA - Port A Data Direction Register
                 .equ	DDA0	= 0	; Data Direction Register, Port A, bit 0
                 .equ	DDA1	= 1	; Data Direction Register, Port A, bit 1
                 .equ	DDA2	= 2	; Data Direction Register, Port A, bit 2
                 .equ	DDA3	= 3	; Data Direction Register, Port A, bit 3
                 .equ	DDA4	= 4	; Data Direction Register, Port A, bit 4
                 .equ	DDA5	= 5	; Data Direction Register, Port A, bit 5
                 .equ	DDA6	= 6	; Data Direction Register, Port A, bit 6
                 .equ	DDA7	= 7	; Data Direction Register, Port A, bit 7
                 
                 ; PINA - Port A Input Pins
                 .equ	PINA0	= 0	; Input Pins, Port A bit 0
                 .equ	PINA1	= 1	; Input Pins, Port A bit 1
                 .equ	PINA2	= 2	; Input Pins, Port A bit 2
                 .equ	PINA3	= 3	; Input Pins, Port A bit 3
                 .equ	PINA4	= 4	; Input Pins, Port A bit 4
                 .equ	PINA5	= 5	; Input Pins, Port A bit 5
                 .equ	PINA6	= 6	; Input Pins, Port A bit 6
                 .equ	PINA7	= 7	; Input Pins, Port A bit 7
                 
                 
                 ; ***** PORTB ************************
                 ; PORTB - Port B Data Register
                 .equ	PORTB0	= 0	; Port B Data Register bit 0
                 .equ	PB0	= 0	; For compatibility
                 .equ	PORTB1	= 1	; Port B Data Register bit 1
                 .equ	PB1	= 1	; For compatibility
                 .equ	PORTB2	= 2	; Port B Data Register bit 2
                 .equ	PB2	= 2	; For compatibility
                 .equ	PORTB3	= 3	; Port B Data Register bit 3
                 .equ	PB3	= 3	; For compatibility
                 .equ	PORTB4	= 4	; Port B Data Register bit 4
                 .equ	PB4	= 4	; For compatibility
                 .equ	PORTB5	= 5	; Port B Data Register bit 5
                 .equ	PB5	= 5	; For compatibility
                 .equ	PORTB6	= 6	; Port B Data Register bit 6
                 .equ	PB6	= 6	; For compatibility
                 .equ	PORTB7	= 7	; Port B Data Register bit 7
                 .equ	PB7	= 7	; For compatibility
                 
                 ; DDRB - Port B Data Direction Register
                 .equ	DDB0	= 0	; Port B Data Direction Register bit 0
                 .equ	DDB1	= 1	; Port B Data Direction Register bit 1
                 .equ	DDB2	= 2	; Port B Data Direction Register bit 2
                 .equ	DDB3	= 3	; Port B Data Direction Register bit 3
                 .equ	DDB4	= 4	; Port B Data Direction Register bit 4
                 .equ	DDB5	= 5	; Port B Data Direction Register bit 5
                 .equ	DDB6	= 6	; Port B Data Direction Register bit 6
                 .equ	DDB7	= 7	; Port B Data Direction Register bit 7
                 
                 ; PINB - Port B Input Pins
                 .equ	PINB0	= 0	; Port B Input Pins bit 0
                 .equ	PINB1	= 1	; Port B Input Pins bit 1
                 .equ	PINB2	= 2	; Port B Input Pins bit 2
                 .equ	PINB3	= 3	; Port B Input Pins bit 3
                 .equ	PINB4	= 4	; Port B Input Pins bit 4
                 .equ	PINB5	= 5	; Port B Input Pins bit 5
                 .equ	PINB6	= 6	; Port B Input Pins bit 6
                 .equ	PINB7	= 7	; Port B Input Pins bit 7
                 
                 
                 ; ***** PORTC ************************
                 ; PORTC - Port C Data Register
                 .equ	PORTC0	= 0	; Port C Data Register bit 0
                 .equ	PC0	= 0	; For compatibility
                 .equ	PORTC1	= 1	; Port C Data Register bit 1
                 .equ	PC1	= 1	; For compatibility
                 .equ	PORTC2	= 2	; Port C Data Register bit 2
                 .equ	PC2	= 2	; For compatibility
                 .equ	PORTC3	= 3	; Port C Data Register bit 3
                 .equ	PC3	= 3	; For compatibility
                 .equ	PORTC4	= 4	; Port C Data Register bit 4
                 .equ	PC4	= 4	; For compatibility
                 .equ	PORTC5	= 5	; Port C Data Register bit 5
                 .equ	PC5	= 5	; For compatibility
                 .equ	PORTC6	= 6	; Port C Data Register bit 6
                 .equ	PC6	= 6	; For compatibility
                 .equ	PORTC7	= 7	; Port C Data Register bit 7
                 .equ	PC7	= 7	; For compatibility
                 
                 ; DDRC - Port C Data Direction Register
                 .equ	DDC0	= 0	; Port C Data Direction Register bit 0
                 .equ	DDC1	= 1	; Port C Data Direction Register bit 1
                 .equ	DDC2	= 2	; Port C Data Direction Register bit 2
                 .equ	DDC3	= 3	; Port C Data Direction Register bit 3
                 .equ	DDC4	= 4	; Port C Data Direction Register bit 4
                 .equ	DDC5	= 5	; Port C Data Direction Register bit 5
                 .equ	DDC6	= 6	; Port C Data Direction Register bit 6
                 .equ	DDC7	= 7	; Port C Data Direction Register bit 7
                 
                 ; PINC - Port C Input Pins
                 .equ	PINC0	= 0	; Port C Input Pins bit 0
                 .equ	PINC1	= 1	; Port C Input Pins bit 1
                 .equ	PINC2	= 2	; Port C Input Pins bit 2
                 .equ	PINC3	= 3	; Port C Input Pins bit 3
                 .equ	PINC4	= 4	; Port C Input Pins bit 4
                 .equ	PINC5	= 5	; Port C Input Pins bit 5
                 .equ	PINC6	= 6	; Port C Input Pins bit 6
                 .equ	PINC7	= 7	; Port C Input Pins bit 7
                 
                 
                 ; ***** PORTD ************************
                 ; PORTD - Port D Data Register
                 .equ	PORTD0	= 0	; Port D Data Register bit 0
                 .equ	PD0	= 0	; For compatibility
                 .equ	PORTD1	= 1	; Port D Data Register bit 1
                 .equ	PD1	= 1	; For compatibility
                 .equ	PORTD2	= 2	; Port D Data Register bit 2
                 .equ	PD2	= 2	; For compatibility
                 .equ	PORTD3	= 3	; Port D Data Register bit 3
                 .equ	PD3	= 3	; For compatibility
                 .equ	PORTD4	= 4	; Port D Data Register bit 4
                 .equ	PD4	= 4	; For compatibility
                 .equ	PORTD5	= 5	; Port D Data Register bit 5
                 .equ	PD5	= 5	; For compatibility
                 .equ	PORTD6	= 6	; Port D Data Register bit 6
                 .equ	PD6	= 6	; For compatibility
                 .equ	PORTD7	= 7	; Port D Data Register bit 7
                 .equ	PD7	= 7	; For compatibility
                 
                 ; DDRD - Port D Data Direction Register
                 .equ	DDD0	= 0	; Port D Data Direction Register bit 0
                 .equ	DDD1	= 1	; Port D Data Direction Register bit 1
                 .equ	DDD2	= 2	; Port D Data Direction Register bit 2
                 .equ	DDD3	= 3	; Port D Data Direction Register bit 3
                 .equ	DDD4	= 4	; Port D Data Direction Register bit 4
                 .equ	DDD5	= 5	; Port D Data Direction Register bit 5
                 .equ	DDD6	= 6	; Port D Data Direction Register bit 6
                 .equ	DDD7	= 7	; Port D Data Direction Register bit 7
                 
                 ; PIND - Port D Input Pins
                 .equ	PIND0	= 0	; Port D Input Pins bit 0
                 .equ	PIND1	= 1	; Port D Input Pins bit 1
                 .equ	PIND2	= 2	; Port D Input Pins bit 2
                 .equ	PIND3	= 3	; Port D Input Pins bit 3
                 .equ	PIND4	= 4	; Port D Input Pins bit 4
                 .equ	PIND5	= 5	; Port D Input Pins bit 5
                 .equ	PIND6	= 6	; Port D Input Pins bit 6
                 .equ	PIND7	= 7	; Port D Input Pins bit 7
                 
                 
                 ; ***** CPU **************************
                 ; SREG - Status Register
                 .equ	SREG_C	= 0	; Carry Flag
                 .equ	SREG_Z	= 1	; Zero Flag
                 .equ	SREG_N	= 2	; Negative Flag
                 .equ	SREG_V	= 3	; Two's Complement Overflow Flag
                 .equ	SREG_S	= 4	; Sign Bit
                 .equ	SREG_H	= 5	; Half Carry Flag
                 .equ	SREG_T	= 6	; Bit Copy Storage
                 .equ	SREG_I	= 7	; Global Interrupt Enable
                 
                 ; MCUCR - MCU Control Register
                 ;.equ	ISC00	= 0	; Interrupt Sense Control 0 Bit 0
                 ;.equ	ISC01	= 1	; Interrupt Sense Control 0 Bit 1
                 ;.equ	ISC10	= 2	; Interrupt Sense Control 1 Bit 0
                 ;.equ	ISC11	= 3	; Interrupt Sense Control 1 Bit 1
                 .equ	SM0	= 4	; Sleep Mode Select
                 .equ	SM1	= 5	; Sleep Mode Select
                 .equ	SM2	= 6	; Sleep Mode Select
                 .equ	SE	= 7	; Sleep Enable
                 
                 ; MCUCSR - MCU Control And Status Register
                 .equ	MCUSR	= MCUCSR	; For compatibility
                 .equ	PORF	= 0	; Power-on reset flag
                 .equ	EXTRF	= 1	; External Reset Flag
                 .equ	BORF	= 2	; Brown-out Reset Flag
                 .equ	WDRF	= 3	; Watchdog Reset Flag
                 .equ	JTRF	= 4	; JTAG Reset Flag
                 .equ	JTD	= 7	; JTAG Interface Disable
                 
                 ; OSCCAL - Oscillator Calibration Value
                 .equ	CAL0	= 0	; Oscillator Calibration Value Bit0
                 .equ	CAL1	= 1	; Oscillator Calibration Value Bit1
                 .equ	CAL2	= 2	; Oscillator Calibration Value Bit2
                 .equ	CAL3	= 3	; Oscillator Calibration Value Bit3
                 .equ	CAL4	= 4	; Oscillator Calibration Value Bit4
                 .equ	CAL5	= 5	; Oscillator Calibration Value Bit5
                 .equ	CAL6	= 6	; Oscillator Calibration Value Bit6
                 .equ	CAL7	= 7	; Oscillator Calibration Value Bit7
                 
                 ; SFIOR - Special Function IO Register
                 .equ	PSR10	= 0	; Prescaler Reset Timer/Counter1&0
                 .equ	PSR2	= 1	; Prescaler Reset Timer/Counter2
                 .equ	PUD	= 2	; Pull-up Disable
                 
                 
                 ; ***** BOOT_LOAD ********************
                 ; SPMCR - Store Program Memory Control Register
                 .equ	SPMEN	= 0	; Store Program Memory Enable
                 .equ	PGERS	= 1	; Page Erase
                 .equ	PGWRT	= 2	; Page Write
                 .equ	BLBSET	= 3	; Boot Lock Bit Set
                 .equ	RWWSRE	= 4	; Read While Write secion read enable
                 .equ	ASRE	= RWWSRE	; For compatibility
                 .equ	RWWSB	= 6	; Read While Write Section Busy
                 .equ	ASB	= RWWSB	; For compatibility
                 .equ	SPMIE	= 7	; SPM Interrupt Enable
                 
                 
                 ; ***** TWI **************************
                 ; TWBR - TWI Bit Rate register
                 .equ	TWBR0	= 0	; 
                 .equ	TWBR1	= 1	; 
                 .equ	TWBR2	= 2	; 
                 .equ	TWBR3	= 3	; 
                 .equ	TWBR4	= 4	; 
                 .equ	TWBR5	= 5	; 
                 .equ	TWBR6	= 6	; 
                 .equ	TWBR7	= 7	; 
                 
                 ; TWCR - TWI Control Register
                 .equ	TWIE	= 0	; TWI Interrupt Enable
                 .equ	TWEN	= 2	; TWI Enable Bit
                 .equ	TWWC	= 3	; TWI Write Collition Flag
                 .equ	TWSTO	= 4	; TWI Stop Condition Bit
                 .equ	TWSTA	= 5	; TWI Start Condition Bit
                 .equ	TWEA	= 6	; TWI Enable Acknowledge Bit
                 .equ	TWINT	= 7	; TWI Interrupt Flag
                 
                 ; TWSR - TWI Status Register
                 .equ	TWPS0	= 0	; TWI Prescaler bits
                 .equ	TWPS1	= 1	; TWI Prescaler bits
                 .equ	TWS3	= 3	; TWI Status
                 .equ	TWS4	= 4	; TWI Status
                 .equ	TWS5	= 5	; TWI Status
                 .equ	TWS6	= 6	; TWI Status
                 .equ	TWS7	= 7	; TWI Status
                 
                 ; TWDR - TWI Data register
                 .equ	TWD0	= 0	; TWI Data Register Bit 0
                 .equ	TWD1	= 1	; TWI Data Register Bit 1
                 .equ	TWD2	= 2	; TWI Data Register Bit 2
                 .equ	TWD3	= 3	; TWI Data Register Bit 3
                 .equ	TWD4	= 4	; TWI Data Register Bit 4
                 .equ	TWD5	= 5	; TWI Data Register Bit 5
                 .equ	TWD6	= 6	; TWI Data Register Bit 6
                 .equ	TWD7	= 7	; TWI Data Register Bit 7
                 
                 ; TWAR - TWI (Slave) Address register
                 .equ	TWGCE	= 0	; TWI General Call Recognition Enable Bit
                 .equ	TWA0	= 1	; TWI (Slave) Address register Bit 0
                 .equ	TWA1	= 2	; TWI (Slave) Address register Bit 1
                 .equ	TWA2	= 3	; TWI (Slave) Address register Bit 2
                 .equ	TWA3	= 4	; TWI (Slave) Address register Bit 3
                 .equ	TWA4	= 5	; TWI (Slave) Address register Bit 4
                 .equ	TWA5	= 6	; TWI (Slave) Address register Bit 5
                 .equ	TWA6	= 7	; TWI (Slave) Address register Bit 6
                 
                 
                 
                 ; ***** LOCKSBITS ********************************************************
                 .equ	LB1	= 0	; Lock bit
                 .equ	LB2	= 1	; Lock bit
                 .equ	BLB01	= 2	; Boot Lock bit
                 .equ	BLB02	= 3	; Boot Lock bit
                 .equ	BLB11	= 4	; Boot lock bit
                 .equ	BLB12	= 5	; Boot lock bit
                 
                 
                 ; ***** FUSES ************************************************************
                 ; LOW fuse bits
                 .equ	CKSEL0	= 0	; Select Clock Source
                 .equ	CKSEL1	= 1	; Select Clock Source
                 .equ	CKSEL2	= 2	; Select Clock Source
                 .equ	CKSEL3	= 3	; Select Clock Source
                 .equ	BODEN	= 6	; Brown out detector enable
                 .equ	BODLEVEL	= 7	; Brown out detector trigger level
                 
                 ; HIGH fuse bits
                 .equ	BOOTRST	= 0	; Select Reset Vector
                 .equ	BOOTSZ0	= 1	; Select Boot Size
                 .equ	BOOTSZ1	= 2	; Select Boot Size
                 .equ	EESAVE	= 3	; EEPROM memory is preserved through chip erase
                 .equ	SPIEN	= 5	; Enable Serial programming and Data Downloading
                 .equ	JTAGEN	= 6	; Enable JTAG
                 .equ	OCDEN	= 7	; Enable OCD
                 
                 
                 
                 ; ***** CPU REGISTER DEFINITIONS *****************************************
                 .def	XH	= r27
                 .def	XL	= r26
                 .def	YH	= r29
                 .def	YL	= r28
                 .def	ZH	= r31
                 .def	ZL	= r30
                 
                 
                 
                 ; ***** DATA MEMORY DECLARATIONS *****************************************
                 .equ	FLASHEND	= 0x3fff	; Note: Word address
                 .equ	IOEND	= 0x003f
                 .equ	SRAM_START	= 0x0060
                 .equ	SRAM_SIZE	= 2048
                 .equ	RAMEND	= 0x085f
                 .equ	XRAMEND	= 0x0000
                 .equ	E2END	= 0x03ff
                 .equ	EEPROMEND	= 0x03ff
                 .equ	EEADRBITS	= 10
                 #pragma AVRPART MEMORY PROG_FLASH 32768
                 #pragma AVRPART MEMORY EEPROM 1024
                 #pragma AVRPART MEMORY INT_SRAM SIZE 2048
                 #pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 
                 
                 ; ***** BOOTLOADER DECLARATIONS ******************************************
                 .equ	NRWW_START_ADDR	= 0x3800
                 .equ	NRWW_STOP_ADDR	= 0x3fff
                 .equ	RWW_START_ADDR	= 0x0
                 .equ	RWW_STOP_ADDR	= 0x37ff
                 .equ	PAGESIZE	= 64
                 .equ	FIRSTBOOTSTART	= 0x3f00
                 .equ	SECONDBOOTSTART	= 0x3e00
                 .equ	THIRDBOOTSTART	= 0x3c00
                 .equ	FOURTHBOOTSTART	= 0x3800
                 .equ	SMALLBOOTSTART	= FIRSTBOOTSTART
                 .equ	LARGEBOOTSTART	= FOURTHBOOTSTART
                 
                 
                 
                 ; ***** INTERRUPT VECTORS ************************************************
                 .equ	INT0addr	= 0x0002	; External Interrupt Request 0
                 .equ	INT1addr	= 0x0004	; External Interrupt Request 1
                 .equ	INT2addr	= 0x0006	; External Interrupt Request 2
                 .equ	OC2addr	= 0x0008	; Timer/Counter2 Compare Match
                 .equ	OVF2addr	= 0x000a	; Timer/Counter2 Overflow
                 .equ	ICP1addr	= 0x000c	; Timer/Counter1 Capture Event
                 .equ	OC1Aaddr	= 0x000e	; Timer/Counter1 Compare Match A
                 .equ	OC1Baddr	= 0x0010	; Timer/Counter1 Compare Match B
                 .equ	OVF1addr	= 0x0012	; Timer/Counter1 Overflow
                 .equ	OC0addr	= 0x0014	; Timer/Counter0 Compare Match
                 .equ	OVF0addr	= 0x0016	; Timer/Counter0 Overflow
                 .equ	SPIaddr	= 0x0018	; Serial Transfer Complete
                 .equ	URXCaddr	= 0x001a	; USART, Rx Complete
                 .equ	UDREaddr	= 0x001c	; USART Data Register Empty
                 .equ	UTXCaddr	= 0x001e	; USART, Tx Complete
                 .equ	ADCCaddr	= 0x0020	; ADC Conversion Complete
                 .equ	ERDYaddr	= 0x0022	; EEPROM Ready
                 .equ	ACIaddr	= 0x0024	; Analog Comparator
                 .equ	TWIaddr	= 0x0026	; 2-wire Serial Interface
                 .equ	SPMRaddr	= 0x0028	; Store Program Memory Ready
                 
                 .equ	INT_VECTORS_SIZE	= 42	; size in words
                 
                 #endif  /* _M32DEF_INC_ */
                 
                 
                 
                 ;***** Created: 2011-02-09 12:03 ******* Source: ATmega32.xml ************
                 ;*************************************************************************
                 ;* A P P L I C A T I O N   N O T E   F O R   T H E   A V R   F A M I L Y
                 ;* 
                 ;* Number            : AVR000
                 ;* File Name         : "m32def.inc"
                 ;* Title             : Register/Bit Definitions for the ATmega32
                 ;* Date              : 2011-02-09
                 ;* Version           : 2.35
                 ;* Support E-mail    : avr@atmel.com
                 ;* Target MCU        : ATmega32
                 ;* 
                 ;* DESCRIPTION
                 ;* When including this file in the assembly program file, all I/O register 
                 ;* names and I/O register bit names appearing in the data book can be used.
                 ;* In addition, the six registers forming the three data pointers X, Y and 
                 ;* Z have been assigned names XL - ZH. Highest RAM address for Internal 
                 ;* SRAM is also defined 
                 ;* 
                 ;* The Register names are represented by their hexadecimal address.
                 ;* 
                 ;* The Register Bit names are represented by their bit number (0-7).
                 ;* 
                 ;* Please observe the difference in using the bit names with instructions
                 ;* such as "sbr"/"cbr" (set/clear bit in register) and "sbrs"/"sbrc"
                 ;* (skip if bit in register set/cleared). The following example illustrates
                 ;* this:
                 ;* 
                 ;* in    r16,PORTB             ;read PORTB latch
                 ;* sbr   r16,(1<<PB6)+(1<<PB5) ;set PB6 and PB5 (use masks, not bit#)
                 ;* out   PORTB,r16             ;output to PORTB
                 ;* 
                 ;* in    r16,TIFR              ;read the Timer Interrupt Flag Register
                 ;* sbrc  r16,TOV0              ;test the overflow flag (use bit#)
                 ;* rjmp  TOV0_is_set           ;jump if set
                 ;* ...                         ;otherwise do something else
                 ;*************************************************************************
                 
                 #ifndef _M32DEF_INC_
                 
                 #endif  /* _M32DEF_INC_ */
                 
                 
                  .def temp=r17		   //define r16 as temp
                  .def byte=r16		   //define r17 as byte (will be used for send byte to LCD)
                  .def menu_loc=r18
                 
                 //==========DATA SEGMENT=================================================
                 // In this segment we can to reserve some memory
                 // for strings for example...
                 .dseg
                 .org 0x0060						//starting from 0x0060 because 
                 								//before that adress we have reserved memory for registers
000060           CO_msg:				.byte 16	//hello world string
000070           CH4_msg:			.byte 16	//CH4 level message string
000080           temperature_msg:	.byte 16	//Temperature message string
000090           time_msg:			.byte 16	//Time message string
0000a0           coords_msg:			.byte 16	//Coordinates message string
0000b0           sound_msg:			.byte 16	//Sound option message string
0000c0           test:				.byte 96	//reserve bytes for 2nd string messages
000120           menu_location:		.byte 1		//current menu location
000121           tick_count:			.byte 1		//count of button activations
000122           last_btn:			.byte 1		//number of last pressed button
000123           sound_status:		.byte 1		//status of sound
                 
                 //==========CODE SEGMENT=================================================
                 .cseg
                 .include "int_table.inc"	//interrupt vectors
                 
                  * Interrupt vectors table
                  */ 
                 
                  //=========INTERRUPT VECTORS TABLE=============================================
                  .org $000 //RESET
000000 c364       rjmp reset 
                  .org $002 //INT0 External Interrupt Request 0
000002 9518       reti
                  .org $004 //INT1 External Interrupt Request 1
000004 9518       reti
                  .org $006 //INT2 External Interrupt Request 2
000006 9518       reti
                  .org $008 //TIMER2 COMP Timer/Counter2 Compare Match
000008 9518       reti
                  .org $00A //TIMER2 OVF Timer/Counter2 Overflow
00000a 9518       reti
                  .org $00C //TIMER1 CAPT Timer/Counter1 Capture Event
00000c 9518       reti
                  .org $00E //TIMER1 COMPA Timer/Counter1 Compare Match A
00000e c30c       rjmp Keyboard_check_interrupt
                  .org $010 //TIMER1 COMPB Timer/Counter1 Compare Match B
000010 c04e       rjmp Sound_play_and_pause
                  .org $012 //TIMER1 OVF Timer/Counter1 Overflow
000012 9518       reti
                  .org $014 //TIMER0 COMP Timer/Counter0 Compare Match
000014 c044       rjmp Sound_generation
                  .org $016 //TIMER0 OVF Timer/Counter0 Overflow
000016 9518       reti
                  .org $018 //SPI, STC Serial Transfer Complete
000018 9518       reti
                  .org $01A //USART, RXC USART, Rx Complete
00001a 9518       reti
                  .org $01C //USART, UDRE USART Data Register Empty
00001c 9518       reti
                  .org $01E //USART, TXC USART, Tx Complete
00001e 9518       reti
                  .org $020 //ADC ADC Conversion Complete
000020 9518       reti
                  .org $022 //EE_RDY EEPROM Ready
000022 9518       reti
                  .org $024 //ANA_COMP Analog Comparator
000024 9518       reti
                  .org $026 //TWI Two-wire Serial Interface
000026 9518       reti
                  .org $028 //SPM_RDY Store Program Memory Ready
000028 9518       reti
                 //===============================================================================================
                 
                 .include "sound.inc"		//macro and procedures for buzzer sound
                 
                  * sound.inc
                  *
                  *  Created: 10.11.2015 23:44:51
                  *   Author: Hogs
                  */ 
                 
                  .equ BUZZER = 6				//6 - is number of pin for buzzer
                  .equ sound_general_status = 0	//number of sound_status bit, 
                 								//for get general sound status (sound_on/sound_off)
                  .equ sound_freq = 23			//frequency of sound
                 
                  //=======Sound macro=======================================
                  //-------Sound Init---------------------------
                  .macro sound_init
                  in temp, ddrd
                  ori temp, (0 | (1<<BUZZER))	//set buzzer pin as output
                  out ddrd,temp
                  in temp, portd
                  andi temp, ~(1<<BUZZER)	//set buzzer pin as 0
                  out portd, temp
                 
                 								//setting timer0
                  clr temp
                  out TCNT0,temp		//set counter as 0
                  ldi temp,sound_freq
                  out OCR0,temp		//set sound frequency
                  in temp, TIMSK
                  ori temp, (1<<OCIE0)	//
                  out TIMSK, temp	//enable On match timer 0 interrupt
                  .endm
                  //-------Timer0 enable---------------------------
                  .macro Timer0_enable
                  push temp
                  ldi temp, 0 | (1<<WGM01) | (1<<CS02)
                  out TCCR0, temp //set timer in CTC mode with 256 prescaler (enable)
                  pop temp
                  .endm
                  //-------Timer0 disable---------------------------
                  .macro Timer0_disable
                  push temp
                  clr temp
                  out TCCR0, temp //disable timer0
                  pop temp
                  .endm
                   //-------Timer 0 toggle--------------------------
                  .macro Timer0_toggle
                  push temp
                 
                  in temp, TCCR0			//if TCCR0 is empty
                  cpi temp,0				//then set timer on
                  breq set_timer_on		//else set timer off
                 
                  Timer0_disable
                  rjmp end_timer_toggle	//disable timer
                 
                  set_timer_on:
                  Timer0_enable
                 
                  end_timer_toggle:
                  pop temp
                  .endm
                  //=======PROCEDURES=======================================================
                  //-------Sound Alarm enable----------------------
                  sound_alarm_enable:
000029 931f       push temp
00002a 93df       push YH
00002b 93cf       push YL
                 
00002c e0d1       ldi YH,high(sound_status)	//
00002d e2c3       ldi YL,low(sound_status)	//set sound status in RAM
                  
00002e e011       ldi temp, 0 | (1<<sound_general_status)
00002f 8318       st Y,temp	//set general sound status and pause status
                 
000030 b719       in temp, TIMSK
000031 6018       ori temp, (1<<OCIE1B)	//set OCIE1B as 1
000032 bf19       out TIMSK, temp	//enable interrupt(every 0.5sec)
                 
000033 931f
000034 e01c
000035 bf13
000036 911f       Timer0_enable		//enable timer0
                 
000037 91cf       pop YL
000038 91df       pop YH
000039 911f       pop temp
00003a 9508       ret
                  //-------Sound Alarm disable---------------------
                  sound_alarm_disable:
00003b 931f       push temp
00003c 93df       push YH
00003d 93cf       push YL
                  
00003e e0d1       ldi YH,high(sound_status)	//
00003f e2c3       ldi YL,low(sound_status)	//set sound status in RAM
                 
000040 e010       ldi temp, 0
000041 8318       st Y,temp			//set general sound status as 0 (alarm disable:)
                 
000042 b719       in temp, TIMSK
000043 7f17       andi temp, ~(1<<OCIE1B)	//set OCIE1B as 0
000044 bf19       out TIMSK, temp	//disable interrupt
                 
000045 931f
000046 2711
000047 bf13
000048 911f       Timer0_disable		//stop sound generation
                 
000049 27cc       clr YL
00004a 27dd       clr YH
00004b 94f8       cli
00004c bddd       out TCNT1H,YH	//clear counter of timer1
00004d bdcc       out TCNT1L,YL
00004e 9478       sei
                 
00004f e00c       ldi r16,0x0C			//set A as standart value	
000050 e315       ldi r17,0x35
000051 94f8       cli
000052 bd0b       out OCR1AH,r16			//set A as 3125
000053 bd1a       out OCR1AL,r17			//that mean timer tick is every 0.05sec
000054 9478       sei
                 
000055 91cf       pop YL
000056 91df       pop YH
000057 911f       pop temp
000058 9508       ret
                  //-----------------------------------------------
                 
                  //=======Sound interrupts==================================
                 
                  //-------Sound generation interrupt-----------
                  Sound_generation:
000059 9b86       sbis pind, BUZZER
00005a c002       rjmp Buzzer_set_1
00005b 9896       cbi portd, BUZZER	//if buzzer pin is 1, then set it as 0
00005c 9518       reti
                  Buzzer_set_1:
00005d 9a96       sbi portd, BUZZER	//if buzzer pin is 0, then set is as 1
00005e 9518       reti
                 
                  //--------Sound play/pause interrupt----------
                  Sound_play_and_pause:
00005f 931f       push temp
000060 93df       push YH
000061 93cf       push YL
                 
000062 e0dc       ldi YH,0x0C
000063 e3c5       ldi YL,0x35
000064 94f8       cli
000065 bddb       out OCR1AH,YH	//set timer1 A as 3125
000066 bdca       out OCR1AL,YL	//for correct work with keyboard
000067 9478       sei
                 
000068 931f
000069 b713
00006a 3010
00006b f029
00006c 931f
00006d 2711
00006e bf13
00006f 911f
000070 c004
000071 931f
000072 e01c
000073 bf13
000074 911f
000075 911f       Timer0_toggle
                 
000076 27cc       clr YL
000077 27dd       clr YH
000078 94f8       cli
000079 bddd       out TCNT1H,YH	//clear counter of timer1
00007a bdcc       out TCNT1L,YL
00007b 9478       sei
                 
00007c 91cf       pop YL
00007d 91df       pop YH
00007e 911f       pop temp
00007f 9518       reti
                  //--------------------------------------------
                 .include "menu.inc"			//macro for menu uses
                 
                  * menu.inc
                  *
                  *  Created: 26.10.2015 0:27:02
                  *   Author: Hogs
                  */ 
                 
                  //========MACRO==========================================
                 
                  //--------Init menu page--------------------
                  .macro menu_init
                 
                  load_strings_to_SRAM		//save strings from eeprom to ram
                 
                  ldi YH,high(menu_location) //set current menu page as 0 (first page)
                  ldi YL,low(menu_location)	//
                  ldi temp,0
                  st Y,temp
                 
                  LCD_print_str CO_msg		//print first menu page
                  second_line
                  LCD_print_str CO_msg+96
                  .endm
                  //------------------------------------------
                 
                  //--------Menu previous page----------------
                  .macro menu_prev
                 
                  push menu_loc			//Save all register which will be used
                  push XH				//
                  push XL				//
                  push temp
                  push YH
                  push YL
                 
                  cli
                  ldi YH,high(menu_location)		//load to Y register adress of
                  ldi YL,low(menu_location)		//current menu page
                  ld menu_loc,Y					//read from SRAM current menu page
                  sei
                 
                  ldi temp,0					//if current page is first
                  cpse menu_loc,temp			//then going out of procedure
                  rjmp PC+2					//else - continue
                  rjmp Return_On_2_Click		//
                 
                  dec menu_loc				//decrease page because menu moving up
                  
                  ldi temp,16				//
                  mul temp,menu_loc			//counting adress of string
                  mov XL,r0					//which contain first string
                  mov XH,r1					//of menu message
                  ldi temp,0x60				//
                  add XL,temp				//adress = ((page - 1)*16)+96
                  clr temp					//
                  adc XH,temp				//
                 
                  cli
                  first_line					//set first line for print
                  LCD_print_str_reg			//print message from adress (in X register)
                  sei
                 
                  ldi temp,16				//
                  mul temp,menu_loc			//counting adress of string
                  mov XL,r0					//which contain second string
                  mov XH,r1					//of menu message
                  ldi temp,0xC0				//
                  add XL,temp				//adress = ((page - 1) * 16)+192
                  clr temp					//
                  adc XH,temp				//
                 
                  cli
                  second_line				//set second line for print
                  LCD_print_str_reg			//print second string
                 
                  ldi YH,high(menu_location)	//
                  ldi YL,low(menu_location)	//Save current page status to SRAM
                  st Y,menu_loc				//
                  sei
                 
                  Return_On_2_Click:			
                  pop YL					//return all of used registers
                  pop YH					//to their place
                  pop temp
                  pop XL
                  pop XH
                  pop menu_loc
                 
                  .endm
                  //------------------------------------------
                 
                  //--------Menu next page--------------------
                  .macro menu_next
                 
                  push menu_loc		//save to stack
                  push XH			//all of used registers
                  push XL
                  push temp
                  push YH
                  push YL
                 
                  cli
                  ldi YH,high(menu_location)	//
                  ldi YL,low(menu_location)	//read number of current page from SRAM
                  ld menu_loc,Y				//
                  sei
                 
                  ldi temp,5					//if this page is last
                  cpse menu_loc,temp			//then go to return of procedure
                  rjmp PC+2					//else - continue
                  rjmp Return_On_8_Click		//
                 
                  inc menu_loc		//increase page because moving down
                  
                  ldi temp,16			//counting of first string adress
                  mul temp,menu_loc		//and move it to X register
                  mov XL,r0				//
                  mov XH,r1				//adress = ((page + 1) * 16)+96
                  ldi temp,0x60
                  add XL,temp
                  clr temp
                  adc XH,temp
                 
                  cli
                  first_line			//
                  LCD_print_str_reg	//printing first line
                  sei
                 
                  ldi temp,16		//counting of second string adress
                  mul temp,menu_loc	//and move it to X register
                  mov XL,r0			//
                  mov XH,r1			//adress = ((page + 1) * 16)+192
                  ldi temp,0xC0
                  add XL,temp
                  clr temp
                  adc XH,temp
                 
                  cli
                  second_line		//
                  LCD_print_str_reg	//printing second line
                 
                  ldi YH,high(menu_location)	//
                  ldi YL,low(menu_location)	//save new current page to SRAM
                  st Y,menu_loc				//
                  sei
                 
                  Return_On_8_Click:
                  pop YL				//return all of used registers
                  pop YH				//
                  pop temp
                  pop XL
                  pop XH
                  pop menu_loc
                 
                  .endm
                  //------------------------------------------
                 
                  //      Read from EEPROM and write it in SRAM
                  .macro load_strings_to_SRAM
                  cli
                  clr YH		 //load to YH register 0
                  ldi YL,0x60 //load to YL 0x60 coz 0x0060 - sram start
                  clr ZL		 //clear Z register
                  clr ZH
                  //?????????????????-----DEBUG------????????????????????????????????????????????????????????????????????
                  ldi r19,193			//r19 is a counter
                 						//USE <LDI r19,97> AFTER DEBUG
                  //?????????????????????????????????????????????????????????????????????????????????????????????????????
                 
                  EE_read_loop:			//loop 96 times
                  rcall EEPROM_read_byte //read byte from EEPROM
                  st Y+,byte				//Store byte to SRAM and post-Inc adress
                  inc ZL					//increment Z register after reading byte
                 
                  dec r19				//loop things...
                  brne EE_read_loop		//go to EE_read_loop label if r19 is not 0
                  sei
                  .endm
                 
                 //--------------------------------------------
                 
                  //=========PROCEDURES=====================================
                  //------Read Byte form EEPROM-----------------------
                 
                  EEPROM_read_byte:
                  ; Wait for completion of previous write
000080 99e1       sbic EECR,EEWE
000081 cffe       rjmp EEPROM_read_byte
                 
000082 94f8       cli //disable all interrupts
                 
                  ; Set up address (Z register) in address register
000083 bbff       out EEARH, ZH
000084 bbee       out EEARL, ZL
                  ; Start eeprom read by writing EERE
000085 9ae0       sbi EECR,EERE
                  ; Read data from data register
000086 b30d       in byte,EEDR
                 
000087 9478       sei //enable interrupts
000088 9508       ret
                 .include "LCD.inc"			//macro and procedures for HD44780 like displays
                 
                  * Macro and procedures
                  * for HD44780 like LCD 
                  * Sorry for bad english...
                  */ 
                 
                  .equ data = 0x04	   //create constant cmd = 0b00000100 
                  .equ cmd = 0		   //create constant data = 0
                  .equ RS = 2		   //RS - 2nd pin in port C
                  .equ E = 3			   //E - is strob line, is a 3rd pin in port C
                  .equ D4 = 4		   //LCD data pins in port C
                  .equ D5 = 5
                  .equ D6 = 6
                  .equ D7 = 7
                 
                  //========MACRO================================================================
                  
                 //----------delay---------------------------------------------
                   
                  .macro delay
                  push r25
                  push r24
                  push r23
                 
                  ldi r25,@0
                  ldi r24,@1
                  ldi r23,@2
                 
                  rcall delay_proc
                 
                  pop r23
                  pop r24
                  pop r25
                  .endm
                 
                 //------------------------------------------------------------------------
                 
                  //      LCD initialization
                  .macro LCD_init
                  LCD_port_init		//init port C as output
                 
                  delay 242,15,5		//50 ms delay
                  ldi temp,0x30
                  out portc,temp		//send 0x30
                  sbi portc,E
                  lpm
                  cbi portc,E
                  delay 229,30,9		//100 ms delay
                  sbi portc,E
                  lpm				//send 0x30
                  cbi portc,E
                  delay 242,15,5		//50 ms delay 
                  sbi portc,E
                  lpm				//send 0x30
                  cbi portc,E
                  delay 242,15,5		//50 ms delay
                  ldi temp,0x20
                  out portc,temp
                  sbi portc,E		//send 0x20
                  lpm
                  cbi portc,E
                  delay 240,1,1		//delay 45us
                 
                  LCD_send_cmd 0x28	//init 4-bit mode 2 lines
                  delay 240,1,1 //delay 45us
                  LCD_send_cmd 0x01	//clear display
                  delay 142,42,1 //delay 2ms
                  LCD_send_cmd 0x0F	//display ON
                  delay 142,42,1 //delay 2ms
                 
                  LCD_send_cmd 0b0100_0000	//Set CGRAM adress as 0x00
                  delay 240,1,1 //delay 45us
                 
                  LCD_send_symbol 0b00000000			//Start sending bytes for draw a new symbol
                  delay 240,1,1 //delay 45us			//in this case i draw upper arrow
                  LCD_send_symbol 0b00000000			//for do that i sending next bytes
                  delay 240,1,1 //delay 45us			//
                  LCD_send_symbol 0b00000000			//00000000
                  delay 240,1,1 //delay 45us			//00000000
                  LCD_send_symbol 0b00000000			//00000000
                  delay 240,1,1 //delay 45us			//00000000
                  LCD_send_symbol 0b00000100			//00000100
                  delay 240,1,1 //delay 45us			//00001110
                  LCD_send_symbol 0b00001110			//00011111
                  delay 240,1,1 //delay 45us			//00000000
                  LCD_send_symbol 0b00011111			//
                  delay 240,1,1 //delay 45us			//
                  LCD_send_symbol 0b00000000			//
                  delay 240,1,1 //delay 45us			//
                 
                  LCD_send_symbol 0b00000000			//the same like previous but for draw down arrow
                  delay 240,1,1 //delay 45us
                  LCD_send_symbol 0b00011111
                  delay 240,1,1 //delay 45us
                  LCD_send_symbol 0b00001110
                  delay 240,1,1 //delay 45us
                  LCD_send_symbol 0b00000100
                  delay 240,1,1 //delay 45us
                  LCD_send_symbol 0b00000000
                  delay 240,1,1 //delay 45us
                  LCD_send_symbol 0b00000000
                  delay 240,1,1 //delay 45us
                  LCD_send_symbol 0b00000000
                  delay 240,1,1 //delay 45us
                  LCD_send_symbol 0b00000000
                  delay 240,1,1 //delay 45us
                 
                  first_line	//set DDRAM as 0 (in start of first line)
                  .endm
                 
                 //------------------------------------------------------------------------
                 
                  //      LCD clear
                  .macro LCD_clear
                  push temp
                  push byte
                  LCD_send_cmd 0x01	//clear display
                  delay 142,42,1 //delay 2ms
                  pop byte
                  pop temp
                  .endm
                 
                 //------------------------------------------------------------------------
                 
                  //      1st line
                  .macro first_line
                  push temp
                  push byte
                  LCD_send_cmd 0x80	//first line
                  delay 240,1,1 //delay 45us
                  pop byte
                  pop temp
                  .endm
                 
                 //------------------------------------------------------------------------
                 
                  //      2nd line
                  .macro second_line
                  push temp
                  push byte
                  LCD_send_cmd 0xC0	//second line
                  delay 240,1,1 //delay 45us
                  pop byte
                  pop temp
                  .endm
                 
                 //------------------------------------------------------------------------
                 
                  //      set port C as output for working with display
                  .macro LCD_port_init  
                  in temp, ddrc
                  ori temp, (0 | (1<<RS) | (1<<E) | (1<<D4) | (1<<D5) | (1<<D6) | (1<<D7))
                  out ddrc,temp
                  in temp,portc
                  andi temp, (~(0 | (1<<RS) | (1<<E) | (1<<D4) | (1<<D5) | (1<<D6) | (1<<D7)))
                  out portc,temp
                  .endm
                 
                 //------------------------------------------------------------------------
                 
                  //      send command to LCD
                  .macro LCD_send_cmd
                  push temp
                  push byte	
                  ldi temp,cmd
                  ldi byte,@0
                  rcall LCD_send_byte_proc
                  pop byte
                  pop temp
                  .endm
                 
                 //------------------------------------------------------------------------
                 
                  //      send symbol to LCD
                  .macro LCD_send_symbol	
                  push temp
                  push byte
                  ldi temp,4
                  ldi byte,@0
                  rcall LCD_send_byte_proc
                  pop byte
                  pop temp
                  .endm
                 
                 //------------------------------------------------------------------------
                 
                  //      print 16-symbol string from sram adress (if adress is const)
                  .macro LCD_print_str
                  push ZH
                  push ZL
                  push temp
                  push byte
                  push r19
                  ldi ZH,high(@0)	//load to high Z-byte high byte of adress
                  ldi ZL,low(@0)	//load to low Z-byte low byte of adress
                  ldi temp,data	//temp = 0x04 for send data to LCD
                 
                  ldi r19,17			//r19 is a counter
                  sram_read_loop:	//loop 16 times
                  ld byte,Z+			//read from SRAM and post-inc
                  rcall LCD_send_byte_proc	//print symbol to LCD
                  delay 240,1,1 //delay 45us
                  dec r19			//loop things...
                  brne sram_read_loop//go to sram_read_loop label if r19 is not 0
                 
                  pop r19
                  pop byte
                  pop temp
                  pop ZL
                  pop ZH
                  .endm
                 
                 //------------------------------------------------------------------------
                 
                  //      print 16-symbol string from sram adress (if adress is in register)
                  //					ADRESS MUST BE IN X REGISTER
                  .macro LCD_print_str_reg
                  push temp
                  push byte
                  push XL
                  push XH
                  push r19
                 
                  ldi temp,data	//temp = 0x04 for send data to LCD
                 
                  ldi r19,17			//r19 is a counter
                  sram_read_loop:	//loop 16 times
                  ld byte,X+			//read from SRAM and post-inc
                  rcall LCD_send_byte_proc	//print symbol to LCD
                  delay 240,1,1 //delay 45us
                  dec r19			//loop things...
                  brne sram_read_loop//go to sram_read_loop label if r19 is not 0
                 
                  pop r19
                  pop XH
                  pop XL
                  pop byte
                  pop temp
                  .endm
                 
                 //------------------------------------------------------------------------
                 
                 //==============PROCEDURES=====================================================
                 
                  //------delay proc-------------------------------------------------------
                       
                  delay_proc:
                 
                 delay_proc_label: 
000089 959a      	dec  r25
00008a f7f1          brne delay_proc_label
00008b 958a          dec  r24
00008c f7e1          brne delay_proc_label
00008d 957a      	dec  r23
00008e f7d1          brne delay_proc_label
                 
00008f 9508       ret
                 
                 //------Send byte to LCD as 4-but mode------------------------------------
                 
                  LCD_send_byte_proc:
000090 94f8       cli
000091 930f       push byte //save symbol to stack
000092 7014       andi temp,0b0000_0100
000093 bb15       out portc,temp //setting RS line
                 
                  //======High half-byte send=======
000094 7f00       andi byte,0xF0 //clear low half-byte
                 				//example:
                 				//before ANDI byte was 0b01011111
                 				//after byte is 0b01010000
                 
000095 2b10       or temp,byte	//add high half-byte to temp register
                 				//example:
                 				//before: temp = 0b00000100, byte = 0b11110000
                 				//after: temp = 0b11110100
                 
000096 bb15       out portc,temp //out temp to port C
000097 95c8       lpm			//3 clocks delay
000098 9aab       sbi portc,E	//enable E signal
000099 95c8       lpm			//3 clocks delay
00009a 98ab       cbi portc,E	//disable E signal
00009b 939f
00009c 938f
00009d 937f
00009e ef90
00009f e081
0000a0 e071
0000a1 dfe7
0000a2 917f
0000a3 918f
0000a4 919f       delay 240,1,1 //delay 45us
                  //======Low half-byte send========
0000a5 7014       andi temp,0b0000_0100
0000a6 910f       pop byte		//get symbol from stack
0000a7 9502       swap byte		//swap byte register
                 				//example:
                 				//before swap byte was: 0b01011010
                 				//after swap byte is:   0b10100101
0000a8 7f00       andi byte,0xF0 //clear high half-byte
                 				//example:
                 				//before andi: byte = 0b01011010
                 				//after: byte = 0b01010000
                 
0000a9 2b10       or temp,byte	//add symbol's low half-byte 
0000aa bb15       out portc,temp //out temp to port C
0000ab 95c8       lpm			//3 clocks delay
0000ac 9aab       sbi portc,E	//enable E
0000ad 95c8       lpm			//3 clocks delay
0000ae 98ab       cbi portc,E	//disable E
0000af 95c8       lpm			//3 clocks delay
                  //=====Set port C as 0xFF=========
0000b0 ef00       ldi byte,0xF0
0000b1 bb05       out portc,byte	//out to port C 0b11110000
0000b2 9478       sei
0000b3 9508       ret
                 //------------------------------------------------------------------------
                 //                          sorry for bad english
                 .include "keyboard.inc"		//macro and procedures for 3x4 keyboard
                 
                  * keyboard.inc
                  * macro and procedures for 3x4 keyboard
                  * Sorry for bad english
                  */ 
                 
                  .equ KBD_A = 2
                  .equ KBD_B = 3
                  .equ KBD_C = 4
                  .equ KBD_D = 5
                  .equ KBD_1 = 0
                  .equ KBD_2 = 1
                  .equ KBD_3 = 2
                  .equ count_of_ticks = 1	//count of ticks for prevent false activation macro
                 
                  //=======MACRO==========================================
                  //-------Preventing false activation----------------------------
                  .macro Anti_false_activation
                  
                  ldi YH,high(tick_count)
                  ldi YL,low(tick_count)
                  ld temp,Y+						//load to temp count of ticks
                  ld r16,Y						//load to r16 number of last pressed button
                 
                  cpi r16,@0							//compare block
                  brne end_of_activation_macro		//example on C language:
                  cpi temp,count_of_ticks			//	if(last_btn == @0)
                  brsh end_of_activation_macro		//	{
                 									//		if(tick > count_of_ticks)
                 									//		{
                 									//			tick = 0;
                 									//			do_something...
                 									//		}
                 									//		else
                 									//		{
                 									//			return of On_(button)_Click
                 									//		}
                 									//	}
                 									//	else
                 									//	{
                 									//		tick = 0;
                 									//		do_something...
                 									//	}
                 									//	last_btn=@0
                 
                  rjmp @1							//return of On_(some_btn)_Click
                 
                  end_of_activation_macro:			//label to end of macro for continue
                 
                  ldi temp,0							//saving to RAM
                  ldi r16,@0
                  ldi YH,high(tick_count)
                  ldi YL,low(tick_count)
                  st Y+,temp
                  st Y,r16
                 
                  .endm
                  //-------Initialization ports for working with keyboard---------
                  .macro keyboard_init
                  in temp,ddrb
                  andi temp, (~(0 | (1<<KBD_1) | (1<<KBD_2) | (1<<KBD_3)))
                  out ddrb,temp			//set KBD_1 KBD_2 KBD_3 as input
                 
                  in temp,portb
                  ori temp, (0 | (1<<KBD_1) | (1<<KBD_2) | (1<<KBD_3))
                  out portb,temp			//enable pull-ups for KBD_1 KBD_2 KBD_3
                 
                  in temp,ddrd
                  ori temp, (0 | (1<<KBD_A) | (1<<KBD_B) | (1<<KBD_C) | (1<<KBD_D))
                  out ddrd,temp			//set KBD_A KBD_B KBD_C KBD_D as output
                  .endm
                  //-------Check buttons------------------------------------------
                  .macro keyboard_check
                 
                 	in temp,pind		//set pins without corruption of other pins
                 	ori temp, 0 | (1<<KBD_A) | (1<<KBD_B) | (1<<KBD_C) | (1<<KBD_D)
                 	andi temp, (~(0 | (1<<KBD_A)))//set KBD_A as 0, and KBD_B,C,D as 1
                 	out portd,temp
                 
                 		sbis pinb,KBD_3
                 		rcall On_asterisk_Click
                 
                 		sbis pinb,KBD_2
                 		rcall On_2_Click
                 
                 		sbis pinb,KBD_1
                 		rcall On_3_Click
                 
                 	in temp,pind		//set pins without corruption of other pins
                 	ori temp, 0 | (1<<KBD_A) | (1<<KBD_B) | (1<<KBD_C) | (1<<KBD_D)
                 	andi temp, (~(0 | (1<<KBD_B)))//set KBD_B as 0, and KBD_A,C,D as 1
                 	out portd,temp
                 
                 		sbis pinb,KBD_3
                 		rcall On_1_Click
                 
                 		sbis pinb,KBD_2
                 		rcall On_5_Click
                 
                 		sbis pinb,KBD_1
                 		rcall On_6_Click
                 
                 	in temp,pind		//set pins without corruption of other pins
                 	ori temp, 0 | (1<<KBD_A) | (1<<KBD_B) | (1<<KBD_C) | (1<<KBD_D)
                 	andi temp, (~(0 | (1<<KBD_C)))//set KBD_C as 0, and KBD_A,B,D as 1
                 	out portd,temp
                 
                 		sbis pinb,KBD_3
                 		rcall On_4_Click
                 
                 		sbis pinb,KBD_2
                 		rcall On_8_Click
                 
                 		sbis pinb,KBD_1
                 		rcall On_9_Click
                 
                 	in temp,pind		//set pins without corruption of other pins
                 	ori temp, 0 | (1<<KBD_A) | (1<<KBD_B) | (1<<KBD_C) | (1<<KBD_D)
                 	andi temp, (~(0 | (1<<KBD_D)))//set KBD_D as 0, and KBD_A,B,C as 1
                 	out portd,temp
                 
                 		sbis pinb,KBD_3
                 		rcall On_7_Click
                 
                 		sbis pinb,KBD_2
                 		rcall On_0_Click
                 
                 		sbis pinb,KBD_1
                 		rcall On_grid_Click
                 
                  .endm
                 
                  //=======PROCEDURES=====================================
                  //-------On 1 click-----------------------------
                  On_1_click:
0000b4 931f       push temp
0000b5 93df       push YH
0000b6 93cf       push YL
0000b7 930f       push r16
                 
0000b8 e0d1
0000b9 e2c1
0000ba 9119
0000bb 8108
0000bc 3301
0000bd f419
0000be 3011
0000bf f408
0000c0 c006
0000c1 e010
0000c2 e301
0000c3 e0d1
0000c4 e2c1
0000c5 9319
0000c6 8308       Anti_false_activation '1', return_On_1_Click
                 
                  return_On_1_Click:
0000c7 910f       pop r16
0000c8 91cf       pop YL
0000c9 91df       pop YH
0000ca 911f       pop temp
                 
0000cb 9478       sei
0000cc 9bb2       sbis pinb,KBD_3		//wait until button is turned off
0000cd cffe       rjmp PC-1
0000ce 9508       ret
                  //-------On 2 click-----------------------------
                  On_2_click:
0000cf 931f       push temp
0000d0 93df       push YH
0000d1 93cf       push YL
0000d2 930f       push r16
                 
0000d3 e0d1
0000d4 e2c1
0000d5 9119
0000d6 8108
0000d7 3302
0000d8 f419
0000d9 3011
0000da f408
0000db c091
0000dc e010
0000dd e302
0000de e0d1
0000df e2c1
0000e0 9319
0000e1 8308       Anti_false_activation '2', return_On_2_Click
                 
0000e2 932f
0000e3 93bf
0000e4 93af
0000e5 931f
0000e6 93df
0000e7 93cf
0000e8 94f8
0000e9 e0d1
0000ea e2c0
0000eb 8128
0000ec 9478
0000ed e010
0000ee 1321
0000ef c001
0000f0 c076
0000f1 952a
0000f2 e110
0000f3 9f12
0000f4 2da0
0000f5 2db1
0000f6 e610
0000f7 0fa1
0000f8 2711
0000f9 1fb1
0000fa 94f8
0000fb 931f
0000fc 930f
0000fd 931f
0000fe 930f
0000ff e010
000100 e800
000101 df8e
000102 910f
000103 911f
000104 939f
000105 938f
000106 937f
000107 ef90
000108 e081
000109 e071
00010a df7e
00010b 917f
00010c 918f
00010d 919f
00010e 910f
00010f 911f
000110 931f
000111 930f
000112 93af
000113 93bf
000114 933f
000115 e014
000116 e131
000117 910d
000118 df77
000119 939f
00011a 938f
00011b 937f
00011c ef90
00011d e081
00011e e071
00011f df69
000120 917f
000121 918f
000122 919f
000123 953a
000124 f791
000125 913f
000126 91bf
000127 91af
000128 910f
000129 911f
00012a 9478
00012b e110
00012c 9f12
00012d 2da0
00012e 2db1
00012f ec10
000130 0fa1
000131 2711
000132 1fb1
000133 94f8
000134 931f
000135 930f
000136 931f
000137 930f
000138 e010
000139 ec00
00013a df55
00013b 910f
00013c 911f
00013d 939f
00013e 938f
00013f 937f
000140 ef90
000141 e081
000142 e071
000143 df45
000144 917f
000145 918f
000146 919f
000147 910f
000148 911f
000149 931f
00014a 930f
00014b 93af
00014c 93bf
00014d 933f
00014e e014
00014f e131
000150 910d
000151 df3e
000152 939f
000153 938f
000154 937f
000155 ef90
000156 e081
000157 e071
000158 df30
000159 917f
00015a 918f
00015b 919f
00015c 953a
00015d f791
00015e 913f
00015f 91bf
000160 91af
000161 910f
000162 911f
000163 e0d1
000164 e2c0
000165 8328
000166 9478
000167 91cf
000168 91df
000169 911f
00016a 91af
00016b 91bf
00016c 912f       menu_prev
                 
                  return_On_2_Click:
00016d 910f       pop r16
00016e 91cf       pop YL
00016f 91df       pop YH
000170 911f       pop temp
                 
000171 9478       sei
000172 9bb1       sbis pinb,KBD_2		//wait until button is turned off
000173 cffe       rjmp PC-1
000174 9508       ret
                  //-------On 3 click-----------------------------
                  On_3_click:
000175 931f       push temp
000176 93df       push YH
000177 93cf       push YL
000178 930f       push r16
                 
000179 e0d1
00017a e2c1
00017b 9119
00017c 8108
00017d 3303
00017e f419
00017f 3011
000180 f408
000181 c006
000182 e010
000183 e303
000184 e0d1
000185 e2c1
000186 9319
000187 8308       Anti_false_activation '3', return_On_3_Click
                  
                  return_On_3_Click:
000188 910f       pop r16
000189 91cf       pop YL
00018a 91df       pop YH
00018b 911f       pop temp
                 
00018c 9478       sei
00018d 9bb0       sbis pinb,KBD_1		//wait until button is turned off
00018e cffe       rjmp PC-1
00018f 9508       ret
                  //-------On 4 click-----------------------------
                  On_4_click:
000190 931f       push temp
000191 93df       push YH
000192 93cf       push YL
000193 930f       push r16
                 
000194 e0d1
000195 e2c1
000196 9119
000197 8108
000198 3304
000199 f419
00019a 3011
00019b f408
00019c c006
00019d e010
00019e e304
00019f e0d1
0001a0 e2c1
0001a1 9319
0001a2 8308       Anti_false_activation '4', return_On_4_Click
                 
                  return_On_4_Click:
0001a3 910f       pop r16
0001a4 91cf       pop YL
0001a5 91df       pop YH
0001a6 911f       pop temp
                 
0001a7 9478       sei
0001a8 9bb0       sbis pinb,KBD_1		//wait until button is turned off
0001a9 cffe       rjmp PC-1
0001aa 9508       ret
                  //-------On 5 click-----------------------------
                  On_5_click:
0001ab 931f       push temp
0001ac 93df       push YH
0001ad 93cf       push YL
0001ae 930f       push r16
                 
0001af e0d1
0001b0 e2c1
0001b1 9119
0001b2 8108
0001b3 3305
0001b4 f419
0001b5 3011
0001b6 f408
0001b7 c013
0001b8 e010
0001b9 e305
0001ba e0d1
0001bb e2c1
0001bc 9319
0001bd 8308       Anti_false_activation '5', return_On_5_Click
                 
0001be e0d1       ldi YH, high(menu_location)
0001bf e2c0       ldi YL, low(menu_location)
0001c0 8118       ld temp, Y			//load current menu page to temp
0001c1 3015       cpi temp,5			//if current page is sound
0001c2 f441       brne return_On_5_Click	//then continue, else return
0001c3 e0d1       ldi YH,high(sound_status)	//
0001c4 e2c3       ldi YL,low(sound_status)	//read sound status from RAM
0001c5 8118       ld temp,Y
                 
0001c6 fd10       sbrc temp,sound_general_status	//if sound is generally off then set sound on
0001c7 c002       rjmp sound_off					//else set sound off
                 
0001c8 de60       rcall sound_alarm_enable
0001c9 c001       rjmp return_On_5_Click
                 
                  sound_off:
0001ca de70       rcall sound_alarm_disable
                 
                  return_On_5_Click:
0001cb 910f       pop r16
0001cc 91cf       pop YL
0001cd 91df       pop YH
0001ce 911f       pop temp
                 
0001cf 9478       sei
0001d0 9bb1       sbis pinb,KBD_2		//wait until button is turned off
0001d1 cffe       rjmp PC-1
0001d2 9508       ret
                  //-------On 6 click-----------------------------
                  On_6_click:
0001d3 931f       push temp
0001d4 93df       push YH
0001d5 93cf       push YL
0001d6 930f       push r16
                 
0001d7 e0d1
0001d8 e2c1
0001d9 9119
0001da 8108
0001db 3306
0001dc f419
0001dd 3011
0001de f408
0001df c006
0001e0 e010
0001e1 e306
0001e2 e0d1
0001e3 e2c1
0001e4 9319
0001e5 8308       Anti_false_activation '6', return_On_6_Click
                 
                  return_On_6_Click:
0001e6 910f       pop r16
0001e7 91cf       pop YL
0001e8 91df       pop YH
0001e9 911f       pop temp
                 
0001ea 9478       sei
0001eb 9bb0       sbis pinb,KBD_1		//wait until button is turned off
0001ec cffe       rjmp PC-1
0001ed 9508       ret
                  //-------On 7 click-----------------------------
                  On_7_click:
0001ee 931f       push temp
0001ef 93df       push YH
0001f0 93cf       push YL
0001f1 930f       push r16
                 
0001f2 e0d1
0001f3 e2c1
0001f4 9119
0001f5 8108
0001f6 3307
0001f7 f419
0001f8 3011
0001f9 f408
0001fa c006
0001fb e010
0001fc e307
0001fd e0d1
0001fe e2c1
0001ff 9319
000200 8308       Anti_false_activation '7', return_On_7_Click
                 
                  return_On_7_Click:
000201 910f       pop r16
000202 91cf       pop YL
000203 91df       pop YH
000204 911f       pop temp
                 
000205 9478       sei
000206 9bb2       sbis pinb,KBD_3		//wait until button is turned off
000207 cffe       rjmp PC-1
000208 9508       ret
                  //-------On 8 click-----------------------------
                  On_8_click:
000209 931f       push temp
00020a 93df       push YH
00020b 93cf       push YL
00020c 930f       push r16
                 
00020d e0d1
00020e e2c1
00020f 9119
000210 8108
000211 3308
000212 f419
000213 3011
000214 f408
000215 c091
000216 e010
000217 e308
000218 e0d1
000219 e2c1
00021a 9319
00021b 8308       Anti_false_activation '8', return_On_8_Click
                  
00021c 932f
00021d 93bf
00021e 93af
00021f 931f
000220 93df
000221 93cf
000222 94f8
000223 e0d1
000224 e2c0
000225 8128
000226 9478
000227 e015
000228 1321
000229 c001
00022a c076
00022b 9523
00022c e110
00022d 9f12
00022e 2da0
00022f 2db1
000230 e610
000231 0fa1
000232 2711
000233 1fb1
000234 94f8
000235 931f
000236 930f
000237 931f
000238 930f
000239 e010
00023a e800
00023b de54
00023c 910f
00023d 911f
00023e 939f
00023f 938f
000240 937f
000241 ef90
000242 e081
000243 e071
000244 de44
000245 917f
000246 918f
000247 919f
000248 910f
000249 911f
00024a 931f
00024b 930f
00024c 93af
00024d 93bf
00024e 933f
00024f e014
000250 e131
000251 910d
000252 de3d
000253 939f
000254 938f
000255 937f
000256 ef90
000257 e081
000258 e071
000259 de2f
00025a 917f
00025b 918f
00025c 919f
00025d 953a
00025e f791
00025f 913f
000260 91bf
000261 91af
000262 910f
000263 911f
000264 9478
000265 e110
000266 9f12
000267 2da0
000268 2db1
000269 ec10
00026a 0fa1
00026b 2711
00026c 1fb1
00026d 94f8
00026e 931f
00026f 930f
000270 931f
000271 930f
000272 e010
000273 ec00
000274 de1b
000275 910f
000276 911f
000277 939f
000278 938f
000279 937f
00027a ef90
00027b e081
00027c e071
00027d de0b
00027e 917f
00027f 918f
000280 919f
000281 910f
000282 911f
000283 931f
000284 930f
000285 93af
000286 93bf
000287 933f
000288 e014
000289 e131
00028a 910d
00028b de04
00028c 939f
00028d 938f
00028e 937f
00028f ef90
000290 e081
000291 e071
000292 ddf6
000293 917f
000294 918f
000295 919f
000296 953a
000297 f791
000298 913f
000299 91bf
00029a 91af
00029b 910f
00029c 911f
00029d e0d1
00029e e2c0
00029f 8328
0002a0 9478
0002a1 91cf
0002a2 91df
0002a3 911f
0002a4 91af
0002a5 91bf
0002a6 912f       menu_next
                 
                  return_On_8_Click:
0002a7 910f       pop r16
0002a8 91cf       pop YL
0002a9 91df       pop YH
0002aa 911f       pop temp
                 
0002ab 9478       sei
0002ac 9bb1       sbis pinb,KBD_2		//wait until button is turned off
0002ad cffe       rjmp PC-1
0002ae 9508       ret
                  //-------On 9 click-----------------------------
                  On_9_click:
0002af 931f       push temp
0002b0 93df       push YH
0002b1 93cf       push YL
0002b2 930f       push r16
                 
0002b3 e0d1
0002b4 e2c1
0002b5 9119
0002b6 8108
0002b7 3309
0002b8 f419
0002b9 3011
0002ba f408
0002bb c006
0002bc e010
0002bd e309
0002be e0d1
0002bf e2c1
0002c0 9319
0002c1 8308       Anti_false_activation '9', return_On_9_Click
                 
                  return_On_9_Click:
0002c2 910f       pop r16
0002c3 91cf       pop YL
0002c4 91df       pop YH
0002c5 911f       pop temp
                 
0002c6 9478       sei
0002c7 9bb0       sbis pinb,KBD_1		//wait until button is turned off
0002c8 cffe       rjmp PC-1
0002c9 9508       ret
                  //-------On * click-----------------------------
                  On_asterisk_click:
0002ca 931f       push temp
0002cb 93df       push YH
0002cc 93cf       push YL
0002cd 930f       push r16
                 
0002ce e0d1
0002cf e2c1
0002d0 9119
0002d1 8108
0002d2 320a
0002d3 f419
0002d4 3011
0002d5 f408
0002d6 c006
0002d7 e010
0002d8 e20a
0002d9 e0d1
0002da e2c1
0002db 9319
0002dc 8308       Anti_false_activation '*', return_On_asterisk_Click
                 
                  return_On_asterisk_Click:
0002dd 910f       pop r16
0002de 91cf       pop YL
0002df 91df       pop YH
0002e0 911f       pop temp
                 
0002e1 9478       sei
0002e2 9bb2       sbis pinb,KBD_3		//wait until button is turned off
0002e3 cffe       rjmp PC-1
0002e4 9508       ret
                  //-------On 0 click-----------------------------
                  On_0_click:
0002e5 931f       push temp
0002e6 93df       push YH
0002e7 93cf       push YL
0002e8 930f       push r16
                 
0002e9 e0d1
0002ea e2c1
0002eb 9119
0002ec 8108
0002ed 3300
0002ee f419
0002ef 3011
0002f0 f408
0002f1 c006
0002f2 e010
0002f3 e300
0002f4 e0d1
0002f5 e2c1
0002f6 9319
0002f7 8308       Anti_false_activation '0', return_On_0_Click
                 
                  return_On_0_Click:
0002f8 910f       pop r16
0002f9 91cf       pop YL
0002fa 91df       pop YH
0002fb 911f       pop temp
                 
0002fc 9478       sei
0002fd 9bb1       sbis pinb,KBD_2		//wait until button is turned off
0002fe cffe       rjmp PC-1
0002ff 9508       ret
                  //-------On # click-----------------------------
                  On_grid_click:
000300 931f       push temp
000301 93df       push YH
000302 93cf       push YL
000303 930f       push r16
                 
000304 e0d1
000305 e2c1
000306 9119
000307 8108
000308 3203
000309 f419
00030a 3011
00030b f408
00030c c006
00030d e010
00030e e203
00030f e0d1
000310 e2c1
000311 9319
000312 8308       Anti_false_activation '#', return_On_grid_Click
                 
                  return_On_grid_Click:
000313 910f       pop r16
000314 91cf       pop YL
000315 91df       pop YH
000316 911f       pop temp
                 
000317 9478       sei
000318 9bb2       sbis pinb,KBD_3		//wait until button is turned off
000319 cffe       rjmp PC-1
00031a 9508       ret
                  //----------------------------------------------
                 //================================================================
                 .include "timers.inc"		//macro and procedures for timer(s)
                 
                  * timers.inc
                  *
                  *  Created: 05.11.2015 0:04:38
                  *   Author: Hogs
                  */ 
                 
                  //==============TIMER 0 (8bit)==============================================
                 
                 		//Timer 0 is reserved for sound generation
                 		//you can see how it works in sound.inc
                 		//all code which using timer 0 is there
                 
                  //==========================================================================
                  //==============TIMER 1 (16-bit)============================================
                 
                  //======MACRO========================
                  //------Timer 1 Init-----------
                  .macro Timer1_Init
                  cli
                  ldi temp, 0 | (1<<OCIE1A) //enable A Match Interrupt and Overflow Interrupt
                  out TIMSK,temp 
                  clr temp
                  out TCCR1A,temp		//Normal Timer Mode
                  ldi temp,0 | (1<<CS12)
                  out TCCR1B,temp		//Set prescaler 1/256
                  ldi r16,0x0C			
                  ldi r17,0x35
                  out OCR1AH,r16			//set A as 3125
                  out OCR1AL,r17			//that mean timer tick is every 0.05sec
                  ldi r16,0x7A			
                  ldi r17,0x12
                  out OCR1BH,r16			//set B as 32500
                  out OCR1BL,r17			//that mean timer tick is every 0.5sec
                  clr temp
                  out TCNT1H,temp		//set current timer/counter as 0
                  out TCNT1L,temp
                  sei
                  .endm
                  //-----------------------------
                  //======INTERRUPTS AND PROC==========
                  //------On Match A Interrupt------
                  Keyboard_check_interrupt:
00031b 931f       push temp
00031c 93df       push YH
00031d 93cf       push YL
                 
00031e b310
00031f 631c
000320 7f1b
000321 bb12
000322 9bb2
000323 dfa6
000324 9bb1
000325 dda9
000326 9bb0
000327 de4d
000328 b310
000329 631c
00032a 7f17
00032b bb12
00032c 9bb2
00032d dd86
00032e 9bb1
00032f de7b
000330 9bb0
000331 dea1
000332 b310
000333 631c
000334 7e1f
000335 bb12
000336 9bb2
000337 de58
000338 9bb1
000339 decf
00033a 9bb0
00033b df73
00033c b310
00033d 631c
00033e 7d1f
00033f bb12
000340 9bb2
000341 deac
000342 9bb1
000343 dfa1
000344 9bb0
000345 dfba       keyboard_check
                 
000346 e0d1       ldi YH,high(sound_status)	//
000347 e2c3       ldi YL,low(sound_status)	//get sound status in RAM
000348 8118       ld temp,Y					
000349 ff10       sbrs temp, sound_general_status	//if sound is off then 
00034a c00b       rjmp skip_A_addition				//OCIE1B interrupt will never happen
                 									//for prevent uncorrect timer work
                 									//I skip (OCR1A += 3125) if sound is off
                 
00034b b5ca       in YL, OCR1AL
00034c b5db       in YH, OCR1AH
00034d e315       ldi temp,0x35
00034e 0fc1       add YL,temp		//OCR1A += 3125
00034f e01c       ldi temp, 0x0C		//this need for correct work with keyboard
000350 1fd1       adc YH,temp		//if sound enable
000351 94f8       cli
000352 bddb       out OCR1AH,YH
000353 bdca       out OCR1AL,YL
000354 9478       sei
000355 c006       rjmp continue_A_add	//jump over TCNT1 clear, because if sound is on
                 						//TCNT1 must be cleared in OCIE1B interrupt
                 
                  skip_A_addition:
                 
000356 27cc       clr YL
000357 27dd       clr YH
000358 94f8       cli
000359 bddd       out TCNT1H,YH	//clear counter of timer1
00035a bdcc       out TCNT1L,YL
00035b 9478       sei
                 
                  continue_A_add:
00035c e0d1       ldi YH,high(tick_count)
00035d e2c1       ldi YL,low(tick_count)
00035e 8118       ld temp,Y				//tick_count++
00035f 9513       inc temp
000360 8318       st Y,temp	
                 
000361 91cf       pop YL
000362 91df       pop YH
000363 911f       pop temp
000364 9518       reti
                  //--------------------------------
                 
                 
                 reset:
                 .include "core_init.inc"	//clear sram, registers and stack init
                 
                  * Clear all registers and SRAM
                  * Initialization stack
                  */ 
                 
                 //================SRAM CLEAR=================================
                 RAM_Flush:	
000365 e6e0      LDI	ZL,Low(SRAM_START)
000366 e0f0      LDI	ZH,High(SRAM_START)
000367 2700      CLR	R16
                 Flush:
000368 9301      ST Z+,R16
000369 30f8      CPI	ZH,High(RAMEND+1)
00036a f7e9      BRNE Flush
00036b 36e0      CPI	ZL,Low(RAMEND+1)	
00036c f7d9      BRNE Flush 
00036d 27ee      CLR	ZL
00036e 27ff      CLR	ZH
                 //===============REGISTERS CLEAR=============================
00036f e1ee      LDI	ZL, 30			
000370 27ff      CLR	ZH		
000371 95ea      DEC	ZL		
000372 83f0      ST Z,ZH		
000373 f7e9      BRNE PC-2		
                 //===============STACK INIT==================================
000374 e50f      LDI R16,Low(RAMEND)		
000375 bf0d      OUT SPL,R16			
000376 e008      LDI R16,High(RAMEND)
000377 bf0e      OUT SPH,R16
                 //-----------Program start-------------------------
                 
000378 94f8
000379 e110
00037a bf19
00037b 2711
00037c bd1f
00037d e014
00037e bd1e
00037f e00c
000380 e315
000381 bd0b
000382 bd1a
000383 e70a
000384 e112
000385 bd09
000386 bd18
000387 2711
000388 bd1d
000389 bd1c
00038a 9478      Timer1_Init
00038b b317
00038c 7f18
00038d bb17
00038e b318
00038f 6017
000390 bb18
000391 b311
000392 631c
000393 bb11      keyboard_init				//initialization of ports for keyboard
000394 b314
000395 6f1c
000396 bb14
000397 b315
000398 7013
000399 bb15
00039a 939f
00039b 938f
00039c 937f
00039d ef92
00039e e08f
00039f e075
0003a0 dce8
0003a1 917f
0003a2 918f
0003a3 919f
0003a4 e310
0003a5 bb15
0003a6 9aab
0003a7 95c8
0003a8 98ab
0003a9 939f
0003aa 938f
0003ab 937f
0003ac ee95
0003ad e18e
0003ae e079
0003af dcd9
0003b0 917f
0003b1 918f
0003b2 919f
0003b3 9aab
0003b4 95c8
0003b5 98ab
0003b6 939f
0003b7 938f
0003b8 937f
0003b9 ef92
0003ba e08f
0003bb e075
0003bc dccc
0003bd 917f
0003be 918f
0003bf 919f
0003c0 9aab
0003c1 95c8
0003c2 98ab
0003c3 939f
0003c4 938f
0003c5 937f
0003c6 ef92
0003c7 e08f
0003c8 e075
0003c9 dcbf
0003ca 917f
0003cb 918f
0003cc 919f
0003cd e210
0003ce bb15
0003cf 9aab
0003d0 95c8
0003d1 98ab
0003d2 939f
0003d3 938f
0003d4 937f
0003d5 ef90
0003d6 e081
0003d7 e071
0003d8 dcb0
0003d9 917f
0003da 918f
0003db 919f
0003dc 931f
0003dd 930f
0003de e010
0003df e208
0003e0 dcaf
0003e1 910f
0003e2 911f
0003e3 939f
0003e4 938f
0003e5 937f
0003e6 ef90
0003e7 e081
0003e8 e071
0003e9 dc9f
0003ea 917f
0003eb 918f
0003ec 919f
0003ed 931f
0003ee 930f
0003ef e010
0003f0 e001
0003f1 dc9e
0003f2 910f
0003f3 911f
0003f4 939f
0003f5 938f
0003f6 937f
0003f7 e89e
0003f8 e28a
0003f9 e071
0003fa dc8e
0003fb 917f
0003fc 918f
0003fd 919f
0003fe 931f
0003ff 930f
000400 e010
000401 e00f
000402 dc8d
000403 910f
000404 911f
000405 939f
000406 938f
000407 937f
000408 e89e
000409 e28a
00040a e071
00040b dc7d
00040c 917f
00040d 918f
00040e 919f
00040f 931f
000410 930f
000411 e010
000412 e400
000413 dc7c
000414 910f
000415 911f
000416 939f
000417 938f
000418 937f
000419 ef90
00041a e081
00041b e071
00041c dc6c
00041d 917f
00041e 918f
00041f 919f
000420 931f
000421 930f
000422 e014
000423 e000
000424 dc6b
000425 910f
000426 911f
000427 939f
000428 938f
000429 937f
00042a ef90
00042b e081
00042c e071
00042d dc5b
00042e 917f
00042f 918f
000430 919f
000431 931f
000432 930f
000433 e014
000434 e000
000435 dc5a
000436 910f
000437 911f
000438 939f
000439 938f
00043a 937f
00043b ef90
00043c e081
00043d e071
00043e dc4a
00043f 917f
000440 918f
000441 919f
000442 931f
000443 930f
000444 e014
000445 e000
000446 dc49
000447 910f
000448 911f
000449 939f
00044a 938f
00044b 937f
00044c ef90
00044d e081
00044e e071
00044f dc39
000450 917f
000451 918f
000452 919f
000453 931f
000454 930f
000455 e014
000456 e000
000457 dc38
000458 910f
000459 911f
00045a 939f
00045b 938f
00045c 937f
00045d ef90
00045e e081
00045f e071
000460 dc28
000461 917f
000462 918f
000463 919f
000464 931f
000465 930f
000466 e014
000467 e004
000468 dc27
000469 910f
00046a 911f
00046b 939f
00046c 938f
00046d 937f
00046e ef90
00046f e081
000470 e071
000471 dc17
000472 917f
000473 918f
000474 919f
000475 931f
000476 930f
000477 e014
000478 e00e
000479 dc16
00047a 910f
00047b 911f
00047c 939f
00047d 938f
00047e 937f
00047f ef90
000480 e081
000481 e071
000482 dc06
000483 917f
000484 918f
000485 919f
000486 931f
000487 930f
000488 e014
000489 e10f
00048a dc05
00048b 910f
00048c 911f
00048d 939f
00048e 938f
00048f 937f
000490 ef90
000491 e081
000492 e071
000493 dbf5
000494 917f
000495 918f
000496 919f
000497 931f
000498 930f
000499 e014
00049a e000
00049b dbf4
00049c 910f
00049d 911f
00049e 939f
00049f 938f
0004a0 937f
0004a1 ef90
0004a2 e081
0004a3 e071
0004a4 dbe4
0004a5 917f
0004a6 918f
0004a7 919f
0004a8 931f
0004a9 930f
0004aa e014
0004ab e000
0004ac dbe3
0004ad 910f
0004ae 911f
0004af 939f
0004b0 938f
0004b1 937f
0004b2 ef90
0004b3 e081
0004b4 e071
0004b5 dbd3
0004b6 917f
0004b7 918f
0004b8 919f
0004b9 931f
0004ba 930f
0004bb e014
0004bc e10f
0004bd dbd2
0004be 910f
0004bf 911f
0004c0 939f
0004c1 938f
0004c2 937f
0004c3 ef90
0004c4 e081
0004c5 e071
0004c6 dbc2
0004c7 917f
0004c8 918f
0004c9 919f
0004ca 931f
0004cb 930f
0004cc e014
0004cd e00e
0004ce dbc1
0004cf 910f
0004d0 911f
0004d1 939f
0004d2 938f
0004d3 937f
0004d4 ef90
0004d5 e081
0004d6 e071
0004d7 dbb1
0004d8 917f
0004d9 918f
0004da 919f
0004db 931f
0004dc 930f
0004dd e014
0004de e004
0004df dbb0
0004e0 910f
0004e1 911f
0004e2 939f
0004e3 938f
0004e4 937f
0004e5 ef90
0004e6 e081
0004e7 e071
0004e8 dba0
0004e9 917f
0004ea 918f
0004eb 919f
0004ec 931f
0004ed 930f
0004ee e014
0004ef e000
0004f0 db9f
0004f1 910f
0004f2 911f
0004f3 939f
0004f4 938f
0004f5 937f
0004f6 ef90
0004f7 e081
0004f8 e071
0004f9 db8f
0004fa 917f
0004fb 918f
0004fc 919f
0004fd 931f
0004fe 930f
0004ff e014
000500 e000
000501 db8e
000502 910f
000503 911f
000504 939f
000505 938f
000506 937f
000507 ef90
000508 e081
000509 e071
00050a db7e
00050b 917f
00050c 918f
00050d 919f
00050e 931f
00050f 930f
000510 e014
000511 e000
000512 db7d
000513 910f
000514 911f
000515 939f
000516 938f
000517 937f
000518 ef90
000519 e081
00051a e071
00051b db6d
00051c 917f
00051d 918f
00051e 919f
00051f 931f
000520 930f
000521 e014
000522 e000
000523 db6c
000524 910f
000525 911f
000526 939f
000527 938f
000528 937f
000529 ef90
00052a e081
00052b e071
00052c db5c
00052d 917f
00052e 918f
00052f 919f
000530 931f
000531 930f
000532 931f
000533 930f
000534 e010
000535 e800
000536 db59
000537 910f
000538 911f
000539 939f
00053a 938f
00053b 937f
00053c ef90
00053d e081
00053e e071
00053f db49
000540 917f
000541 918f
000542 919f
000543 910f
000544 911f      LCD_init					//LCD initialization
000545 94f8
000546 27dd
000547 e6c0
000548 27ee
000549 27ff
00054a ec31
00054b db34
00054c 9309
00054d 95e3
00054e 953a
00054f f7d9
000550 9478
000551 e0d1
000552 e2c0
000553 e010
000554 8318
000555 93ff
000556 93ef
000557 931f
000558 930f
000559 933f
00055a e0f0
00055b e6e0
00055c e014
00055d e131
00055e 9101
00055f db30
000560 939f
000561 938f
000562 937f
000563 ef90
000564 e081
000565 e071
000566 db22
000567 917f
000568 918f
000569 919f
00056a 953a
00056b f791
00056c 913f
00056d 910f
00056e 911f
00056f 91ef
000570 91ff
000571 931f
000572 930f
000573 931f
000574 930f
000575 e010
000576 ec00
000577 db18
000578 910f
000579 911f
00057a 939f
00057b 938f
00057c 937f
00057d ef90
00057e e081
00057f e071
000580 db08
000581 917f
000582 918f
000583 919f
000584 910f
000585 911f
000586 93ff
000587 93ef
000588 931f
000589 930f
00058a 933f
00058b e0f0
00058c ece0
00058d e014
00058e e131
00058f 9101
000590 daff
000591 939f
000592 938f
000593 937f
000594 ef90
000595 e081
000596 e071
000597 daf1
000598 917f
000599 918f
00059a 919f
00059b 953a
00059c f791
00059d 913f
00059e 910f
00059f 911f
0005a0 91ef
0005a1 91ff      menu_init
0005a2 b311
0005a3 6410
0005a4 bb11
0005a5 b312
0005a6 7b1f
0005a7 bb12
0005a8 2711
0005a9 bf12
0005aa e117
0005ab bf1c
0005ac b719
0005ad 6012
0005ae bf19      sound_init
                 
                 //-----------MAIN----------------------------------
                 main:			
0005af 0000      	nop
0005b0 cffe      rjmp main		
                 //-------------------------------------------------
                 //========EEPROM SEGMENT=================================================
                 .eseg
                 .org 0
000000 4c
000001 65
000002 76
000003 65
000004 6c
000005 20
000006 43
000007 4f
000008 20
000009 20
00000a 20
00000b 20
00000c 20
00000d 20
00000e 20
00000f 20        ee_hello_msg:	.db "Level CO        "
000010 4c
000011 65
000012 76
000013 65
000014 6c
000015 20
000016 43
000017 48
000018 34
000019 20
00001a 20
00001b 20
00001c 20
00001d 20
00001e 20
00001f 00        ee_CH4_msg:		.db "Level CH4      ",0
000020 54
000021 65
000022 6d
000023 70
000024 65
000025 72
000026 61
000027 74
000028 75
000029 72
00002a 65
00002b 20
00002c 20
00002d 20
00002e 20
00002f 00        ee_temp_msg:	.db "Temperature    ",0
000030 43
000031 6f
000032 6f
000033 72
000034 64
000035 69
000036 6e
000037 61
000038 74
000039 65
00003a 73
00003b 20
00003c 20
00003d 20
00003e 20
00003f 00        ee_coords_msg:	.db "Coordinates    ",0
000040 54
000041 69
000042 6d
000043 65
000044 20
000045 20
000046 20
000047 20
000048 20
000049 20
00004a 20
00004b 20
00004c 20
00004d 20
00004e 20
00004f 00        ee_time_msg:	.db "Time           ",0
000050 53
000051 6f
000052 75
000053 6e
000054 64
000055 28
000056 35
000057 2d
000058 4f
000059 6e
00005a 2f
00005b 4f
00005c 66
00005d 66
00005e 29
00005f 00        ee_sound_msg:	.db "Sound(5-On/Off)",0
000060 74
000061 65
000062 73
000063 74
000064 20
000065 73
000066 74
000067 72
000068 20
000069 31
00006a 20
00006b 20
00006c 20
00006d 20
00006e 20
00006f 01        ee_test_msg1:	.db "test str 1     ",1
000070 74
000071 65
000072 73
000073 74
000074 20
000075 73
000076 74
000077 72
000078 20
000079 32
00007a 20
00007b 20
00007c 20
00007d 20
00007e 20
00007f 01        ee_test_msg2:	.db "test str 2     ",1
000080 74
000081 65
000082 73
000083 74
000084 20
000085 73
000086 74
000087 72
000088 20
000089 33
00008a 20
00008b 20
00008c 20
00008d 20
00008e 20
00008f 01        ee_test_msg3:	.db "test str 3     ",1
000090 74
000091 65
000092 73
000093 74
000094 20
000095 73
000096 74
000097 72
000098 20
000099 34
00009a 20
00009b 20
00009c 20
00009d 20
00009e 20
00009f 01        ee_test_msg4:	.db "test str 4     ",1
0000a0 74
0000a1 65
0000a2 73
0000a3 74
0000a4 20
0000a5 73
0000a6 74
0000a7 72
0000a8 20
0000a9 35
0000aa 20
0000ab 20
0000ac 20
0000ad 20
0000ae 20
0000af 01        ee_test_msg5:	.db "test str 5     ",1
0000b0 50
0000b1 72
0000b2 65
0000b3 73
0000b4 73
0000b5 20
0000b6 35
0000b7 20
0000b8 74
0000b9 6f
0000ba 20
0000bb 74
0000bc 65
0000bd 73
0000be 74
0000bf 20        ee_test_msg6:	.db "Press 5 to test "
                 //=======================================================================


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

"ATmega32" register use summary:
r0 :   4 r1 :   4 r2 :   0 r3 :   0 r4 :   0 r5 :   0 r6 :   0 r7 :   0 
r8 :   0 r9 :   0 r10:   0 r11:   0 r12:   0 r13:   0 r14:   0 r15:   0 
r16: 203 r17: 335 r18:  16 r19:  26 r20:   0 r21:   0 r22:   0 r23: 115 
r24: 115 r25: 115 r26:  20 r27:  20 r28:  83 r29:  83 r30:  14 r31:  13 
x  :   4 y  :  61 z  :   4 
Registers used: 18 out of 35 (51.4%)

"ATmega32" instruction use summary:
.lds  :   0 .sts  :   0 adc   :   5 add   :   5 adiw  :   0 and   :   0 
andi  :  12 asr   :   0 bclr  :   0 bld   :   0 brbc  :   0 brbs  :   0 
brcc  :   0 brcs  :   0 break :   0 breq  :   1 brge  :   0 brhc  :   0 
brhs  :   0 brid  :   0 brie  :   0 brlo  :   0 brlt  :   0 brmi  :   0 
brne  :  26 brpl  :   0 brsh  :  12 brtc  :   0 brts  :   0 brvc  :   0 
brvs  :   0 bset  :   0 bst   :   0 call  :   0 cbi   :   7 cbr   :   0 
clc   :   0 clh   :   0 cli   :  16 cln   :   0 clr   :  22 cls   :   0 
clt   :   0 clv   :   0 clz   :   0 com   :   0 cp    :   0 cpc   :   0 
cpi   :  28 cpse  :   2 dec   :  12 eor   :   0 fmul  :   0 fmuls :   0 
fmulsu:   0 icall :   0 ijmp  :   0 in    :  18 inc   :   3 jmp   :   0 
ld    :  36 ldd   :   0 ldi   : 314 lds   :   0 lpm   :  27 lsl   :   0 
lsr   :   0 mov   :   8 movw  :   0 mul   :   4 muls  :   0 mulsu :   0 
neg   :   0 nop   :   1 or    :   2 ori   :  10 out   :  51 pop   : 286 
push  : 286 rcall :  85 ret   :  17 reti  :  21 rjmp  :  40 rol   :   0 
ror   :   0 sbc   :   0 sbci  :   0 sbi   :   8 sbic  :   1 sbis  :  25 
sbiw  :   0 sbr   :   0 sbrc  :   1 sbrs  :   1 sec   :   0 seh   :   0 
sei   :  28 sen   :   0 ser   :   0 ses   :   0 set   :   0 sev   :   0 
sez   :   0 sleep :   0 spm   :   0 st    :  33 std   :   0 sts   :   0 
sub   :   0 subi  :   0 swap  :   1 tst   :   0 wdr   :   0 
Instructions used: 37 out of 113 (32.7%)

"ATmega32" memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x000b62   2874      0   2874   32768   8.8%
[.dseg] 0x000060 0x000124      0    196    196    2048   9.6%
[.eseg] 0x000000 0x0000c0      0    192    192    1024  18.8%

Assembly complete, 0 errors, 0 warnings
