
AVRASM ver. 2.1.57  D:\diplom\eco\eco\eco.asm Mon Oct 26 00:55:04 2015

[builtin](2): Including file 'D:\dev\Atmel Toolchain\AVR Assembler\Native\2.1.1175\avrassembler\Include\m32def.inc'
D:\diplom\eco\eco\eco.asm(1): Including file 'D:\dev\Atmel Toolchain\AVR Assembler\Native\2.1.1175\avrassembler\Include\m32def.inc'
D:\diplom\eco\eco\eco.asm(24): Including file 'D:\diplom\eco\eco\int_table.inc'
D:\diplom\eco\eco\eco.asm(25): Including file 'D:\diplom\eco\eco\menu.inc'
D:\diplom\eco\eco\eco.asm(26): Including file 'D:\diplom\eco\eco\LCD.inc'
D:\diplom\eco\eco\eco.asm(27): Including file 'D:\diplom\eco\eco\keyboard.inc'
D:\diplom\eco\eco\eco.asm(30): Including file 'D:\diplom\eco\eco\core_init.inc'
                 
                 .include "m32def.inc" //include define for ATmega32 controller
                 
                 ;***** Created: 2011-02-09 12:03 ******* Source: ATmega32.xml ************
                 ;*************************************************************************
                 ;* A P P L I C A T I O N   N O T E   F O R   T H E   A V R   F A M I L Y
                 ;* 
                 ;* Number            : AVR000
                 ;* File Name         : "m32def.inc"
                 ;* Title             : Register/Bit Definitions for the ATmega32
                 ;* Date              : 2011-02-09
                 ;* Version           : 2.35
                 ;* Support E-mail    : avr@atmel.com
                 ;* Target MCU        : ATmega32
                 ;* 
                 ;* DESCRIPTION
                 ;* When including this file in the assembly program file, all I/O register 
                 ;* names and I/O register bit names appearing in the data book can be used.
                 ;* In addition, the six registers forming the three data pointers X, Y and 
                 ;* Z have been assigned names XL - ZH. Highest RAM address for Internal 
                 ;* SRAM is also defined 
                 ;* 
                 ;* The Register names are represented by their hexadecimal address.
                 ;* 
                 ;* The Register Bit names are represented by their bit number (0-7).
                 ;* 
                 ;* Please observe the difference in using the bit names with instructions
                 ;* such as "sbr"/"cbr" (set/clear bit in register) and "sbrs"/"sbrc"
                 ;* (skip if bit in register set/cleared). The following example illustrates
                 ;* this:
                 ;* 
                 ;* in    r16,PORTB             ;read PORTB latch
                 ;* sbr   r16,(1<<PB6)+(1<<PB5) ;set PB6 and PB5 (use masks, not bit#)
                 ;* out   PORTB,r16             ;output to PORTB
                 ;* 
                 ;* in    r16,TIFR              ;read the Timer Interrupt Flag Register
                 ;* sbrc  r16,TOV0              ;test the overflow flag (use bit#)
                 ;* rjmp  TOV0_is_set           ;jump if set
                 ;* ...                         ;otherwise do something else
                 ;*************************************************************************
                 
                 #ifndef _M32DEF_INC_
                 #define _M32DEF_INC_
                 
                 
                 #pragma partinc 0
                 
                 ; ***** SPECIFY DEVICE ***************************************************
                 .device ATmega32
                 #pragma AVRPART ADMIN PART_NAME ATmega32
                 .equ	SIGNATURE_000	= 0x1e
                 .equ	SIGNATURE_001	= 0x95
                 .equ	SIGNATURE_002	= 0x02
                 
                 #pragma AVRPART CORE CORE_VERSION V2E
                 
                 
                 ; ***** I/O REGISTER DEFINITIONS *****************************************
                 ; NOTE:
                 ; Definitions marked "MEMORY MAPPED"are extended I/O ports
                 ; and cannot be used with IN/OUT instructions
                 .equ	SREG	= 0x3f
                 .equ	SPL	= 0x3d
                 .equ	SPH	= 0x3e
                 .equ	OCR0	= 0x3c
                 .equ	GICR	= 0x3b
                 .equ	GIFR	= 0x3a
                 .equ	TIMSK	= 0x39
                 .equ	TIFR	= 0x38
                 .equ	SPMCR	= 0x37
                 .equ	TWCR	= 0x36
                 .equ	MCUCR	= 0x35
                 .equ	MCUCSR	= 0x34
                 .equ	TCCR0	= 0x33
                 .equ	TCNT0	= 0x32
                 .equ	OSCCAL	= 0x31
                 .equ	OCDR	= 0x31
                 .equ	SFIOR	= 0x30
                 .equ	TCCR1A	= 0x2f
                 .equ	TCCR1B	= 0x2e
                 .equ	TCNT1L	= 0x2c
                 .equ	TCNT1H	= 0x2d
                 .equ	OCR1AL	= 0x2a
                 .equ	OCR1AH	= 0x2b
                 .equ	OCR1BL	= 0x28
                 .equ	OCR1BH	= 0x29
                 .equ	ICR1L	= 0x26
                 .equ	ICR1H	= 0x27
                 .equ	TCCR2	= 0x25
                 .equ	TCNT2	= 0x24
                 .equ	OCR2	= 0x23
                 .equ	ASSR	= 0x22
                 .equ	WDTCR	= 0x21
                 .equ	UBRRH	= 0x20
                 .equ	UCSRC	= 0x20
                 .equ	EEARL	= 0x1e
                 .equ	EEARH	= 0x1f
                 .equ	EEDR	= 0x1d
                 .equ	EECR	= 0x1c
                 .equ	PORTA	= 0x1b
                 .equ	DDRA	= 0x1a
                 .equ	PINA	= 0x19
                 .equ	PORTB	= 0x18
                 .equ	DDRB	= 0x17
                 .equ	PINB	= 0x16
                 .equ	PORTC	= 0x15
                 .equ	DDRC	= 0x14
                 .equ	PINC	= 0x13
                 .equ	PORTD	= 0x12
                 .equ	DDRD	= 0x11
                 .equ	PIND	= 0x10
                 .equ	SPDR	= 0x0f
                 .equ	SPSR	= 0x0e
                 .equ	SPCR	= 0x0d
                 .equ	UDR	= 0x0c
                 .equ	UCSRA	= 0x0b
                 .equ	UCSRB	= 0x0a
                 .equ	UBRRL	= 0x09
                 .equ	ACSR	= 0x08
                 .equ	ADMUX	= 0x07
                 .equ	ADCSRA	= 0x06
                 .equ	ADCH	= 0x05
                 .equ	ADCL	= 0x04
                 .equ	TWDR	= 0x03
                 .equ	TWAR	= 0x02
                 .equ	TWSR	= 0x01
                 .equ	TWBR	= 0x00
                 
                 
                 ; ***** BIT DEFINITIONS **************************************************
                 
                 ; ***** EEPROM ***********************
                 ; EEDR - EEPROM Data Register
                 .equ	EEDR0	= 0	; EEPROM Data Register bit 0
                 .equ	EEDR1	= 1	; EEPROM Data Register bit 1
                 .equ	EEDR2	= 2	; EEPROM Data Register bit 2
                 .equ	EEDR3	= 3	; EEPROM Data Register bit 3
                 .equ	EEDR4	= 4	; EEPROM Data Register bit 4
                 .equ	EEDR5	= 5	; EEPROM Data Register bit 5
                 .equ	EEDR6	= 6	; EEPROM Data Register bit 6
                 .equ	EEDR7	= 7	; EEPROM Data Register bit 7
                 
                 ; EECR - EEPROM Control Register
                 .equ	EERE	= 0	; EEPROM Read Enable
                 .equ	EEWE	= 1	; EEPROM Write Enable
                 .equ	EEMWE	= 2	; EEPROM Master Write Enable
                 .equ	EERIE	= 3	; EEPROM Ready Interrupt Enable
                 
                 
                 ; ***** WATCHDOG *********************
                 ; WDTCR - Watchdog Timer Control Register
                 .equ	WDP0	= 0	; Watch Dog Timer Prescaler bit 0
                 .equ	WDP1	= 1	; Watch Dog Timer Prescaler bit 1
                 .equ	WDP2	= 2	; Watch Dog Timer Prescaler bit 2
                 .equ	WDE	= 3	; Watch Dog Enable
                 .equ	WDTOE	= 4	; RW
                 .equ	WDDE	= WDTOE	; For compatibility
                 
                 
                 ; ***** EXTERNAL_INTERRUPT ***********
                 ; GICR - General Interrupt Control Register
                 .equ	GIMSK	= GICR	; For compatibility
                 .equ	IVCE	= 0	; Interrupt Vector Change Enable
                 .equ	IVSEL	= 1	; Interrupt Vector Select
                 .equ	INT2	= 5	; External Interrupt Request 2 Enable
                 .equ	INT0	= 6	; External Interrupt Request 0 Enable
                 .equ	INT1	= 7	; External Interrupt Request 1 Enable
                 
                 ; GIFR - General Interrupt Flag Register
                 .equ	INTF2	= 5	; External Interrupt Flag 2
                 .equ	INTF0	= 6	; External Interrupt Flag 0
                 .equ	INTF1	= 7	; External Interrupt Flag 1
                 
                 ; MCUCR - General Interrupt Control Register
                 .equ	ISC00	= 0	; Interrupt Sense Control 0 Bit 0
                 .equ	ISC01	= 1	; Interrupt Sense Control 0 Bit 1
                 .equ	ISC10	= 2	; Interrupt Sense Control 1 Bit 0
                 .equ	ISC11	= 3	; Interrupt Sense Control 1 Bit 1
                 
                 ; MCUCSR - MCU Control And Status Register
                 .equ	ISC2	= 6	; Interrupt Sense Control 2
                 
                 
                 ; ***** TIMER_COUNTER_0 **************
                 ; TCCR0 - Timer/Counter Control Register
                 .equ	CS00	= 0	; Clock Select 1
                 .equ	CS01	= 1	; Clock Select 1
                 .equ	CS02	= 2	; Clock Select 2
                 .equ	WGM01	= 3	; Waveform Generation Mode 1
                 .equ	CTC0	= WGM01	; For compatibility
                 .equ	COM00	= 4	; Compare match Output Mode 0
                 .equ	COM01	= 5	; Compare Match Output Mode 1
                 .equ	WGM00	= 6	; Waveform Generation Mode
                 .equ	PWM0	= WGM00	; For compatibility
                 .equ	FOC0	= 7	; Force Output Compare
                 
                 ; TCNT0 - Timer/Counter Register
                 .equ	TCNT0_0	= 0	; 
                 .equ	TCNT0_1	= 1	; 
                 .equ	TCNT0_2	= 2	; 
                 .equ	TCNT0_3	= 3	; 
                 .equ	TCNT0_4	= 4	; 
                 .equ	TCNT0_5	= 5	; 
                 .equ	TCNT0_6	= 6	; 
                 .equ	TCNT0_7	= 7	; 
                 
                 ; OCR0 - Output Compare Register
                 .equ	OCR0_0	= 0	; 
                 .equ	OCR0_1	= 1	; 
                 .equ	OCR0_2	= 2	; 
                 .equ	OCR0_3	= 3	; 
                 .equ	OCR0_4	= 4	; 
                 .equ	OCR0_5	= 5	; 
                 .equ	OCR0_6	= 6	; 
                 .equ	OCR0_7	= 7	; 
                 
                 ; TIMSK - Timer/Counter Interrupt Mask Register
                 .equ	TOIE0	= 0	; Timer/Counter0 Overflow Interrupt Enable
                 .equ	OCIE0	= 1	; Timer/Counter0 Output Compare Match Interrupt register
                 
                 ; TIFR - Timer/Counter Interrupt Flag register
                 .equ	TOV0	= 0	; Timer/Counter0 Overflow Flag
                 .equ	OCF0	= 1	; Output Compare Flag 0
                 
                 
                 ; ***** TIMER_COUNTER_2 **************
                 ; TIMSK - Timer/Counter Interrupt Mask register
                 .equ	TOIE2	= 6	; Timer/Counter2 Overflow Interrupt Enable
                 .equ	OCIE2	= 7	; Timer/Counter2 Output Compare Match Interrupt Enable
                 
                 ; TIFR - Timer/Counter Interrupt Flag Register
                 .equ	TOV2	= 6	; Timer/Counter2 Overflow Flag
                 .equ	OCF2	= 7	; Output Compare Flag 2
                 
                 ; TCCR2 - Timer/Counter2 Control Register
                 .equ	CS20	= 0	; Clock Select bit 0
                 .equ	CS21	= 1	; Clock Select bit 1
                 .equ	CS22	= 2	; Clock Select bit 2
                 .equ	WGM21	= 3	; Clear Timer/Counter2 on Compare Match
                 .equ	CTC2	= WGM21	; For compatibility
                 .equ	COM20	= 4	; Compare Output Mode bit 0
                 .equ	COM21	= 5	; Compare Output Mode bit 1
                 .equ	WGM20	= 6	; Pulse Width Modulator Enable
                 .equ	PWM2	= WGM20	; For compatibility
                 .equ	FOC2	= 7	; Force Output Compare
                 
                 ; TCNT2 - Timer/Counter2
                 .equ	TCNT2_0	= 0	; Timer/Counter 2 bit 0
                 .equ	TCNT2_1	= 1	; Timer/Counter 2 bit 1
                 .equ	TCNT2_2	= 2	; Timer/Counter 2 bit 2
                 .equ	TCNT2_3	= 3	; Timer/Counter 2 bit 3
                 .equ	TCNT2_4	= 4	; Timer/Counter 2 bit 4
                 .equ	TCNT2_5	= 5	; Timer/Counter 2 bit 5
                 .equ	TCNT2_6	= 6	; Timer/Counter 2 bit 6
                 .equ	TCNT2_7	= 7	; Timer/Counter 2 bit 7
                 
                 ; OCR2 - Timer/Counter2 Output Compare Register
                 .equ	OCR2_0	= 0	; Timer/Counter2 Output Compare Register Bit 0
                 .equ	OCR2_1	= 1	; Timer/Counter2 Output Compare Register Bit 1
                 .equ	OCR2_2	= 2	; Timer/Counter2 Output Compare Register Bit 2
                 .equ	OCR2_3	= 3	; Timer/Counter2 Output Compare Register Bit 3
                 .equ	OCR2_4	= 4	; Timer/Counter2 Output Compare Register Bit 4
                 .equ	OCR2_5	= 5	; Timer/Counter2 Output Compare Register Bit 5
                 .equ	OCR2_6	= 6	; Timer/Counter2 Output Compare Register Bit 6
                 .equ	OCR2_7	= 7	; Timer/Counter2 Output Compare Register Bit 7
                 
                 ; ASSR - Asynchronous Status Register
                 .equ	TCR2UB	= 0	; Timer/counter Control Register2 Update Busy
                 .equ	OCR2UB	= 1	; Output Compare Register2 Update Busy
                 .equ	TCN2UB	= 2	; Timer/Counter2 Update Busy
                 .equ	AS2	= 3	; Asynchronous Timer/counter2
                 
                 
                 ; ***** TIMER_COUNTER_1 **************
                 ; TIMSK - Timer/Counter Interrupt Mask Register
                 .equ	TOIE1	= 2	; Timer/Counter1 Overflow Interrupt Enable
                 .equ	OCIE1B	= 3	; Timer/Counter1 Output CompareB Match Interrupt Enable
                 .equ	OCIE1A	= 4	; Timer/Counter1 Output CompareA Match Interrupt Enable
                 .equ	TICIE1	= 5	; Timer/Counter1 Input Capture Interrupt Enable
                 
                 ; TIFR - Timer/Counter Interrupt Flag register
                 .equ	TOV1	= 2	; Timer/Counter1 Overflow Flag
                 .equ	OCF1B	= 3	; Output Compare Flag 1B
                 .equ	OCF1A	= 4	; Output Compare Flag 1A
                 .equ	ICF1	= 5	; Input Capture Flag 1
                 
                 ; TCCR1A - Timer/Counter1 Control Register A
                 .equ	WGM10	= 0	; Waveform Generation Mode
                 .equ	PWM10	= WGM10	; For compatibility
                 .equ	WGM11	= 1	; Waveform Generation Mode
                 .equ	PWM11	= WGM11	; For compatibility
                 .equ	FOC1B	= 2	; Force Output Compare 1B
                 .equ	FOC1A	= 3	; Force Output Compare 1A
                 .equ	COM1B0	= 4	; Compare Output Mode 1B, bit 0
                 .equ	COM1B1	= 5	; Compare Output Mode 1B, bit 1
                 .equ	COM1A0	= 6	; Compare Ouput Mode 1A, bit 0
                 .equ	COM1A1	= 7	; Compare Output Mode 1A, bit 1
                 
                 ; TCCR1B - Timer/Counter1 Control Register B
                 .equ	CS10	= 0	; Prescaler source of Timer/Counter 1
                 .equ	CS11	= 1	; Prescaler source of Timer/Counter 1
                 .equ	CS12	= 2	; Prescaler source of Timer/Counter 1
                 .equ	WGM12	= 3	; Waveform Generation Mode
                 .equ	CTC10	= WGM12	; For compatibility
                 .equ	CTC1	= WGM12	; For compatibility
                 .equ	WGM13	= 4	; Waveform Generation Mode
                 .equ	CTC11	= WGM13	; For compatibility
                 .equ	ICES1	= 6	; Input Capture 1 Edge Select
                 .equ	ICNC1	= 7	; Input Capture 1 Noise Canceler
                 
                 
                 ; ***** SPI **************************
                 ; SPDR - SPI Data Register
                 .equ	SPDR0	= 0	; SPI Data Register bit 0
                 .equ	SPDR1	= 1	; SPI Data Register bit 1
                 .equ	SPDR2	= 2	; SPI Data Register bit 2
                 .equ	SPDR3	= 3	; SPI Data Register bit 3
                 .equ	SPDR4	= 4	; SPI Data Register bit 4
                 .equ	SPDR5	= 5	; SPI Data Register bit 5
                 .equ	SPDR6	= 6	; SPI Data Register bit 6
                 .equ	SPDR7	= 7	; SPI Data Register bit 7
                 
                 ; SPSR - SPI Status Register
                 .equ	SPI2X	= 0	; Double SPI Speed Bit
                 .equ	WCOL	= 6	; Write Collision Flag
                 .equ	SPIF	= 7	; SPI Interrupt Flag
                 
                 ; SPCR - SPI Control Register
                 .equ	SPR0	= 0	; SPI Clock Rate Select 0
                 .equ	SPR1	= 1	; SPI Clock Rate Select 1
                 .equ	CPHA	= 2	; Clock Phase
                 .equ	CPOL	= 3	; Clock polarity
                 .equ	MSTR	= 4	; Master/Slave Select
                 .equ	DORD	= 5	; Data Order
                 .equ	SPE	= 6	; SPI Enable
                 .equ	SPIE	= 7	; SPI Interrupt Enable
                 
                 
                 ; ***** USART ************************
                 ; UDR - USART I/O Data Register
                 .equ	UDR0	= 0	; USART I/O Data Register bit 0
                 .equ	UDR1	= 1	; USART I/O Data Register bit 1
                 .equ	UDR2	= 2	; USART I/O Data Register bit 2
                 .equ	UDR3	= 3	; USART I/O Data Register bit 3
                 .equ	UDR4	= 4	; USART I/O Data Register bit 4
                 .equ	UDR5	= 5	; USART I/O Data Register bit 5
                 .equ	UDR6	= 6	; USART I/O Data Register bit 6
                 .equ	UDR7	= 7	; USART I/O Data Register bit 7
                 
                 ; UCSRA - USART Control and Status Register A
                 .equ	USR	= UCSRA	; For compatibility
                 .equ	MPCM	= 0	; Multi-processor Communication Mode
                 .equ	U2X	= 1	; Double the USART transmission speed
                 .equ	UPE	= 2	; Parity Error
                 .equ	PE	= UPE	; For compatibility
                 .equ	DOR	= 3	; Data overRun
                 .equ	FE	= 4	; Framing Error
                 .equ	UDRE	= 5	; USART Data Register Empty
                 .equ	TXC	= 6	; USART Transmitt Complete
                 .equ	RXC	= 7	; USART Receive Complete
                 
                 ; UCSRB - USART Control and Status Register B
                 .equ	UCR	= UCSRB	; For compatibility
                 .equ	TXB8	= 0	; Transmit Data Bit 8
                 .equ	RXB8	= 1	; Receive Data Bit 8
                 .equ	UCSZ2	= 2	; Character Size
                 .equ	CHR9	= UCSZ2	; For compatibility
                 .equ	TXEN	= 3	; Transmitter Enable
                 .equ	RXEN	= 4	; Receiver Enable
                 .equ	UDRIE	= 5	; USART Data register Empty Interrupt Enable
                 .equ	TXCIE	= 6	; TX Complete Interrupt Enable
                 .equ	RXCIE	= 7	; RX Complete Interrupt Enable
                 
                 ; UCSRC - USART Control and Status Register C
                 .equ	UCPOL	= 0	; Clock Polarity
                 .equ	UCSZ0	= 1	; Character Size
                 .equ	UCSZ1	= 2	; Character Size
                 .equ	USBS	= 3	; Stop Bit Select
                 .equ	UPM0	= 4	; Parity Mode Bit 0
                 .equ	UPM1	= 5	; Parity Mode Bit 1
                 .equ	UMSEL	= 6	; USART Mode Select
                 .equ	URSEL	= 7	; Register Select
                 
                 .equ	UBRRHI	= UBRRH	; For compatibility
                 
                 ; ***** ANALOG_COMPARATOR ************
                 ; SFIOR - Special Function IO Register
                 .equ	ACME	= 3	; Analog Comparator Multiplexer Enable
                 
                 ; ACSR - Analog Comparator Control And Status Register
                 .equ	ACIS0	= 0	; Analog Comparator Interrupt Mode Select bit 0
                 .equ	ACIS1	= 1	; Analog Comparator Interrupt Mode Select bit 1
                 .equ	ACIC	= 2	; Analog Comparator Input Capture Enable
                 .equ	ACIE	= 3	; Analog Comparator Interrupt Enable
                 .equ	ACI	= 4	; Analog Comparator Interrupt Flag
                 .equ	ACO	= 5	; Analog Compare Output
                 .equ	ACBG	= 6	; Analog Comparator Bandgap Select
                 .equ	ACD	= 7	; Analog Comparator Disable
                 
                 
                 ; ***** AD_CONVERTER *****************
                 ; ADMUX - The ADC multiplexer Selection Register
                 .equ	MUX0	= 0	; Analog Channel and Gain Selection Bits
                 .equ	MUX1	= 1	; Analog Channel and Gain Selection Bits
                 .equ	MUX2	= 2	; Analog Channel and Gain Selection Bits
                 .equ	MUX3	= 3	; Analog Channel and Gain Selection Bits
                 .equ	MUX4	= 4	; Analog Channel and Gain Selection Bits
                 .equ	ADLAR	= 5	; Left Adjust Result
                 .equ	REFS0	= 6	; Reference Selection Bit 0
                 .equ	REFS1	= 7	; Reference Selection Bit 1
                 
                 ; ADCSRA - The ADC Control and Status register
                 .equ	ADCSR	= ADCSRA	; For compatibility
                 .equ	ADPS0	= 0	; ADC  Prescaler Select Bits
                 .equ	ADPS1	= 1	; ADC  Prescaler Select Bits
                 .equ	ADPS2	= 2	; ADC  Prescaler Select Bits
                 .equ	ADIE	= 3	; ADC Interrupt Enable
                 .equ	ADIF	= 4	; ADC Interrupt Flag
                 .equ	ADATE	= 5	; When this bit is written to one,the Timer/Counter2 prescaler will be reset.The bit will be cleared by hardware after the operation is performed.Writing a zero to this bit will have no effect.This bit will always be read as zero if Timer/C                 ounter2 is clocked by the internal CPU clock.If this bit is written when Timer/Counter2 is operating in asynchronous mode,the bit will remain one until the prescaler has been reset.
                 .equ	ADFR	= ADATE	; For compatibility
                 .equ	ADSC	= 6	; ADC Start Conversion
                 .equ	ADEN	= 7	; ADC Enable
                 
                 ; ADCH - ADC Data Register High Byte
                 .equ	ADCH0	= 0	; ADC Data Register High Byte Bit 0
                 .equ	ADCH1	= 1	; ADC Data Register High Byte Bit 1
                 .equ	ADCH2	= 2	; ADC Data Register High Byte Bit 2
                 .equ	ADCH3	= 3	; ADC Data Register High Byte Bit 3
                 .equ	ADCH4	= 4	; ADC Data Register High Byte Bit 4
                 .equ	ADCH5	= 5	; ADC Data Register High Byte Bit 5
                 .equ	ADCH6	= 6	; ADC Data Register High Byte Bit 6
                 .equ	ADCH7	= 7	; ADC Data Register High Byte Bit 7
                 
                 ; ADCL - ADC Data Register Low Byte
                 .equ	ADCL0	= 0	; ADC Data Register Low Byte Bit 0
                 .equ	ADCL1	= 1	; ADC Data Register Low Byte Bit 1
                 .equ	ADCL2	= 2	; ADC Data Register Low Byte Bit 2
                 .equ	ADCL3	= 3	; ADC Data Register Low Byte Bit 3
                 .equ	ADCL4	= 4	; ADC Data Register Low Byte Bit 4
                 .equ	ADCL5	= 5	; ADC Data Register Low Byte Bit 5
                 .equ	ADCL6	= 6	; ADC Data Register Low Byte Bit 6
                 .equ	ADCL7	= 7	; ADC Data Register Low Byte Bit 7
                 
                 ; SFIOR - Special Function IO Register
                 .equ	ADTS0	= 5	; ADC Auto Trigger Source 0
                 .equ	ADTS1	= 6	; ADC Auto Trigger Source 1
                 .equ	ADTS2	= 7	; ADC Auto Trigger Source 2
                 
                 
                 ; ***** PORTA ************************
                 ; PORTA - Port A Data Register
                 .equ	PORTA0	= 0	; Port A Data Register bit 0
                 .equ	PA0	= 0	; For compatibility
                 .equ	PORTA1	= 1	; Port A Data Register bit 1
                 .equ	PA1	= 1	; For compatibility
                 .equ	PORTA2	= 2	; Port A Data Register bit 2
                 .equ	PA2	= 2	; For compatibility
                 .equ	PORTA3	= 3	; Port A Data Register bit 3
                 .equ	PA3	= 3	; For compatibility
                 .equ	PORTA4	= 4	; Port A Data Register bit 4
                 .equ	PA4	= 4	; For compatibility
                 .equ	PORTA5	= 5	; Port A Data Register bit 5
                 .equ	PA5	= 5	; For compatibility
                 .equ	PORTA6	= 6	; Port A Data Register bit 6
                 .equ	PA6	= 6	; For compatibility
                 .equ	PORTA7	= 7	; Port A Data Register bit 7
                 .equ	PA7	= 7	; For compatibility
                 
                 ; DDRA - Port A Data Direction Register
                 .equ	DDA0	= 0	; Data Direction Register, Port A, bit 0
                 .equ	DDA1	= 1	; Data Direction Register, Port A, bit 1
                 .equ	DDA2	= 2	; Data Direction Register, Port A, bit 2
                 .equ	DDA3	= 3	; Data Direction Register, Port A, bit 3
                 .equ	DDA4	= 4	; Data Direction Register, Port A, bit 4
                 .equ	DDA5	= 5	; Data Direction Register, Port A, bit 5
                 .equ	DDA6	= 6	; Data Direction Register, Port A, bit 6
                 .equ	DDA7	= 7	; Data Direction Register, Port A, bit 7
                 
                 ; PINA - Port A Input Pins
                 .equ	PINA0	= 0	; Input Pins, Port A bit 0
                 .equ	PINA1	= 1	; Input Pins, Port A bit 1
                 .equ	PINA2	= 2	; Input Pins, Port A bit 2
                 .equ	PINA3	= 3	; Input Pins, Port A bit 3
                 .equ	PINA4	= 4	; Input Pins, Port A bit 4
                 .equ	PINA5	= 5	; Input Pins, Port A bit 5
                 .equ	PINA6	= 6	; Input Pins, Port A bit 6
                 .equ	PINA7	= 7	; Input Pins, Port A bit 7
                 
                 
                 ; ***** PORTB ************************
                 ; PORTB - Port B Data Register
                 .equ	PORTB0	= 0	; Port B Data Register bit 0
                 .equ	PB0	= 0	; For compatibility
                 .equ	PORTB1	= 1	; Port B Data Register bit 1
                 .equ	PB1	= 1	; For compatibility
                 .equ	PORTB2	= 2	; Port B Data Register bit 2
                 .equ	PB2	= 2	; For compatibility
                 .equ	PORTB3	= 3	; Port B Data Register bit 3
                 .equ	PB3	= 3	; For compatibility
                 .equ	PORTB4	= 4	; Port B Data Register bit 4
                 .equ	PB4	= 4	; For compatibility
                 .equ	PORTB5	= 5	; Port B Data Register bit 5
                 .equ	PB5	= 5	; For compatibility
                 .equ	PORTB6	= 6	; Port B Data Register bit 6
                 .equ	PB6	= 6	; For compatibility
                 .equ	PORTB7	= 7	; Port B Data Register bit 7
                 .equ	PB7	= 7	; For compatibility
                 
                 ; DDRB - Port B Data Direction Register
                 .equ	DDB0	= 0	; Port B Data Direction Register bit 0
                 .equ	DDB1	= 1	; Port B Data Direction Register bit 1
                 .equ	DDB2	= 2	; Port B Data Direction Register bit 2
                 .equ	DDB3	= 3	; Port B Data Direction Register bit 3
                 .equ	DDB4	= 4	; Port B Data Direction Register bit 4
                 .equ	DDB5	= 5	; Port B Data Direction Register bit 5
                 .equ	DDB6	= 6	; Port B Data Direction Register bit 6
                 .equ	DDB7	= 7	; Port B Data Direction Register bit 7
                 
                 ; PINB - Port B Input Pins
                 .equ	PINB0	= 0	; Port B Input Pins bit 0
                 .equ	PINB1	= 1	; Port B Input Pins bit 1
                 .equ	PINB2	= 2	; Port B Input Pins bit 2
                 .equ	PINB3	= 3	; Port B Input Pins bit 3
                 .equ	PINB4	= 4	; Port B Input Pins bit 4
                 .equ	PINB5	= 5	; Port B Input Pins bit 5
                 .equ	PINB6	= 6	; Port B Input Pins bit 6
                 .equ	PINB7	= 7	; Port B Input Pins bit 7
                 
                 
                 ; ***** PORTC ************************
                 ; PORTC - Port C Data Register
                 .equ	PORTC0	= 0	; Port C Data Register bit 0
                 .equ	PC0	= 0	; For compatibility
                 .equ	PORTC1	= 1	; Port C Data Register bit 1
                 .equ	PC1	= 1	; For compatibility
                 .equ	PORTC2	= 2	; Port C Data Register bit 2
                 .equ	PC2	= 2	; For compatibility
                 .equ	PORTC3	= 3	; Port C Data Register bit 3
                 .equ	PC3	= 3	; For compatibility
                 .equ	PORTC4	= 4	; Port C Data Register bit 4
                 .equ	PC4	= 4	; For compatibility
                 .equ	PORTC5	= 5	; Port C Data Register bit 5
                 .equ	PC5	= 5	; For compatibility
                 .equ	PORTC6	= 6	; Port C Data Register bit 6
                 .equ	PC6	= 6	; For compatibility
                 .equ	PORTC7	= 7	; Port C Data Register bit 7
                 .equ	PC7	= 7	; For compatibility
                 
                 ; DDRC - Port C Data Direction Register
                 .equ	DDC0	= 0	; Port C Data Direction Register bit 0
                 .equ	DDC1	= 1	; Port C Data Direction Register bit 1
                 .equ	DDC2	= 2	; Port C Data Direction Register bit 2
                 .equ	DDC3	= 3	; Port C Data Direction Register bit 3
                 .equ	DDC4	= 4	; Port C Data Direction Register bit 4
                 .equ	DDC5	= 5	; Port C Data Direction Register bit 5
                 .equ	DDC6	= 6	; Port C Data Direction Register bit 6
                 .equ	DDC7	= 7	; Port C Data Direction Register bit 7
                 
                 ; PINC - Port C Input Pins
                 .equ	PINC0	= 0	; Port C Input Pins bit 0
                 .equ	PINC1	= 1	; Port C Input Pins bit 1
                 .equ	PINC2	= 2	; Port C Input Pins bit 2
                 .equ	PINC3	= 3	; Port C Input Pins bit 3
                 .equ	PINC4	= 4	; Port C Input Pins bit 4
                 .equ	PINC5	= 5	; Port C Input Pins bit 5
                 .equ	PINC6	= 6	; Port C Input Pins bit 6
                 .equ	PINC7	= 7	; Port C Input Pins bit 7
                 
                 
                 ; ***** PORTD ************************
                 ; PORTD - Port D Data Register
                 .equ	PORTD0	= 0	; Port D Data Register bit 0
                 .equ	PD0	= 0	; For compatibility
                 .equ	PORTD1	= 1	; Port D Data Register bit 1
                 .equ	PD1	= 1	; For compatibility
                 .equ	PORTD2	= 2	; Port D Data Register bit 2
                 .equ	PD2	= 2	; For compatibility
                 .equ	PORTD3	= 3	; Port D Data Register bit 3
                 .equ	PD3	= 3	; For compatibility
                 .equ	PORTD4	= 4	; Port D Data Register bit 4
                 .equ	PD4	= 4	; For compatibility
                 .equ	PORTD5	= 5	; Port D Data Register bit 5
                 .equ	PD5	= 5	; For compatibility
                 .equ	PORTD6	= 6	; Port D Data Register bit 6
                 .equ	PD6	= 6	; For compatibility
                 .equ	PORTD7	= 7	; Port D Data Register bit 7
                 .equ	PD7	= 7	; For compatibility
                 
                 ; DDRD - Port D Data Direction Register
                 .equ	DDD0	= 0	; Port D Data Direction Register bit 0
                 .equ	DDD1	= 1	; Port D Data Direction Register bit 1
                 .equ	DDD2	= 2	; Port D Data Direction Register bit 2
                 .equ	DDD3	= 3	; Port D Data Direction Register bit 3
                 .equ	DDD4	= 4	; Port D Data Direction Register bit 4
                 .equ	DDD5	= 5	; Port D Data Direction Register bit 5
                 .equ	DDD6	= 6	; Port D Data Direction Register bit 6
                 .equ	DDD7	= 7	; Port D Data Direction Register bit 7
                 
                 ; PIND - Port D Input Pins
                 .equ	PIND0	= 0	; Port D Input Pins bit 0
                 .equ	PIND1	= 1	; Port D Input Pins bit 1
                 .equ	PIND2	= 2	; Port D Input Pins bit 2
                 .equ	PIND3	= 3	; Port D Input Pins bit 3
                 .equ	PIND4	= 4	; Port D Input Pins bit 4
                 .equ	PIND5	= 5	; Port D Input Pins bit 5
                 .equ	PIND6	= 6	; Port D Input Pins bit 6
                 .equ	PIND7	= 7	; Port D Input Pins bit 7
                 
                 
                 ; ***** CPU **************************
                 ; SREG - Status Register
                 .equ	SREG_C	= 0	; Carry Flag
                 .equ	SREG_Z	= 1	; Zero Flag
                 .equ	SREG_N	= 2	; Negative Flag
                 .equ	SREG_V	= 3	; Two's Complement Overflow Flag
                 .equ	SREG_S	= 4	; Sign Bit
                 .equ	SREG_H	= 5	; Half Carry Flag
                 .equ	SREG_T	= 6	; Bit Copy Storage
                 .equ	SREG_I	= 7	; Global Interrupt Enable
                 
                 ; MCUCR - MCU Control Register
                 ;.equ	ISC00	= 0	; Interrupt Sense Control 0 Bit 0
                 ;.equ	ISC01	= 1	; Interrupt Sense Control 0 Bit 1
                 ;.equ	ISC10	= 2	; Interrupt Sense Control 1 Bit 0
                 ;.equ	ISC11	= 3	; Interrupt Sense Control 1 Bit 1
                 .equ	SM0	= 4	; Sleep Mode Select
                 .equ	SM1	= 5	; Sleep Mode Select
                 .equ	SM2	= 6	; Sleep Mode Select
                 .equ	SE	= 7	; Sleep Enable
                 
                 ; MCUCSR - MCU Control And Status Register
                 .equ	MCUSR	= MCUCSR	; For compatibility
                 .equ	PORF	= 0	; Power-on reset flag
                 .equ	EXTRF	= 1	; External Reset Flag
                 .equ	BORF	= 2	; Brown-out Reset Flag
                 .equ	WDRF	= 3	; Watchdog Reset Flag
                 .equ	JTRF	= 4	; JTAG Reset Flag
                 .equ	JTD	= 7	; JTAG Interface Disable
                 
                 ; OSCCAL - Oscillator Calibration Value
                 .equ	CAL0	= 0	; Oscillator Calibration Value Bit0
                 .equ	CAL1	= 1	; Oscillator Calibration Value Bit1
                 .equ	CAL2	= 2	; Oscillator Calibration Value Bit2
                 .equ	CAL3	= 3	; Oscillator Calibration Value Bit3
                 .equ	CAL4	= 4	; Oscillator Calibration Value Bit4
                 .equ	CAL5	= 5	; Oscillator Calibration Value Bit5
                 .equ	CAL6	= 6	; Oscillator Calibration Value Bit6
                 .equ	CAL7	= 7	; Oscillator Calibration Value Bit7
                 
                 ; SFIOR - Special Function IO Register
                 .equ	PSR10	= 0	; Prescaler Reset Timer/Counter1&0
                 .equ	PSR2	= 1	; Prescaler Reset Timer/Counter2
                 .equ	PUD	= 2	; Pull-up Disable
                 
                 
                 ; ***** BOOT_LOAD ********************
                 ; SPMCR - Store Program Memory Control Register
                 .equ	SPMEN	= 0	; Store Program Memory Enable
                 .equ	PGERS	= 1	; Page Erase
                 .equ	PGWRT	= 2	; Page Write
                 .equ	BLBSET	= 3	; Boot Lock Bit Set
                 .equ	RWWSRE	= 4	; Read While Write secion read enable
                 .equ	ASRE	= RWWSRE	; For compatibility
                 .equ	RWWSB	= 6	; Read While Write Section Busy
                 .equ	ASB	= RWWSB	; For compatibility
                 .equ	SPMIE	= 7	; SPM Interrupt Enable
                 
                 
                 ; ***** TWI **************************
                 ; TWBR - TWI Bit Rate register
                 .equ	TWBR0	= 0	; 
                 .equ	TWBR1	= 1	; 
                 .equ	TWBR2	= 2	; 
                 .equ	TWBR3	= 3	; 
                 .equ	TWBR4	= 4	; 
                 .equ	TWBR5	= 5	; 
                 .equ	TWBR6	= 6	; 
                 .equ	TWBR7	= 7	; 
                 
                 ; TWCR - TWI Control Register
                 .equ	TWIE	= 0	; TWI Interrupt Enable
                 .equ	TWEN	= 2	; TWI Enable Bit
                 .equ	TWWC	= 3	; TWI Write Collition Flag
                 .equ	TWSTO	= 4	; TWI Stop Condition Bit
                 .equ	TWSTA	= 5	; TWI Start Condition Bit
                 .equ	TWEA	= 6	; TWI Enable Acknowledge Bit
                 .equ	TWINT	= 7	; TWI Interrupt Flag
                 
                 ; TWSR - TWI Status Register
                 .equ	TWPS0	= 0	; TWI Prescaler bits
                 .equ	TWPS1	= 1	; TWI Prescaler bits
                 .equ	TWS3	= 3	; TWI Status
                 .equ	TWS4	= 4	; TWI Status
                 .equ	TWS5	= 5	; TWI Status
                 .equ	TWS6	= 6	; TWI Status
                 .equ	TWS7	= 7	; TWI Status
                 
                 ; TWDR - TWI Data register
                 .equ	TWD0	= 0	; TWI Data Register Bit 0
                 .equ	TWD1	= 1	; TWI Data Register Bit 1
                 .equ	TWD2	= 2	; TWI Data Register Bit 2
                 .equ	TWD3	= 3	; TWI Data Register Bit 3
                 .equ	TWD4	= 4	; TWI Data Register Bit 4
                 .equ	TWD5	= 5	; TWI Data Register Bit 5
                 .equ	TWD6	= 6	; TWI Data Register Bit 6
                 .equ	TWD7	= 7	; TWI Data Register Bit 7
                 
                 ; TWAR - TWI (Slave) Address register
                 .equ	TWGCE	= 0	; TWI General Call Recognition Enable Bit
                 .equ	TWA0	= 1	; TWI (Slave) Address register Bit 0
                 .equ	TWA1	= 2	; TWI (Slave) Address register Bit 1
                 .equ	TWA2	= 3	; TWI (Slave) Address register Bit 2
                 .equ	TWA3	= 4	; TWI (Slave) Address register Bit 3
                 .equ	TWA4	= 5	; TWI (Slave) Address register Bit 4
                 .equ	TWA5	= 6	; TWI (Slave) Address register Bit 5
                 .equ	TWA6	= 7	; TWI (Slave) Address register Bit 6
                 
                 
                 
                 ; ***** LOCKSBITS ********************************************************
                 .equ	LB1	= 0	; Lock bit
                 .equ	LB2	= 1	; Lock bit
                 .equ	BLB01	= 2	; Boot Lock bit
                 .equ	BLB02	= 3	; Boot Lock bit
                 .equ	BLB11	= 4	; Boot lock bit
                 .equ	BLB12	= 5	; Boot lock bit
                 
                 
                 ; ***** FUSES ************************************************************
                 ; LOW fuse bits
                 .equ	CKSEL0	= 0	; Select Clock Source
                 .equ	CKSEL1	= 1	; Select Clock Source
                 .equ	CKSEL2	= 2	; Select Clock Source
                 .equ	CKSEL3	= 3	; Select Clock Source
                 .equ	BODEN	= 6	; Brown out detector enable
                 .equ	BODLEVEL	= 7	; Brown out detector trigger level
                 
                 ; HIGH fuse bits
                 .equ	BOOTRST	= 0	; Select Reset Vector
                 .equ	BOOTSZ0	= 1	; Select Boot Size
                 .equ	BOOTSZ1	= 2	; Select Boot Size
                 .equ	EESAVE	= 3	; EEPROM memory is preserved through chip erase
                 .equ	SPIEN	= 5	; Enable Serial programming and Data Downloading
                 .equ	JTAGEN	= 6	; Enable JTAG
                 .equ	OCDEN	= 7	; Enable OCD
                 
                 
                 
                 ; ***** CPU REGISTER DEFINITIONS *****************************************
                 .def	XH	= r27
                 .def	XL	= r26
                 .def	YH	= r29
                 .def	YL	= r28
                 .def	ZH	= r31
                 .def	ZL	= r30
                 
                 
                 
                 ; ***** DATA MEMORY DECLARATIONS *****************************************
                 .equ	FLASHEND	= 0x3fff	; Note: Word address
                 .equ	IOEND	= 0x003f
                 .equ	SRAM_START	= 0x0060
                 .equ	SRAM_SIZE	= 2048
                 .equ	RAMEND	= 0x085f
                 .equ	XRAMEND	= 0x0000
                 .equ	E2END	= 0x03ff
                 .equ	EEPROMEND	= 0x03ff
                 .equ	EEADRBITS	= 10
                 #pragma AVRPART MEMORY PROG_FLASH 32768
                 #pragma AVRPART MEMORY EEPROM 1024
                 #pragma AVRPART MEMORY INT_SRAM SIZE 2048
                 #pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 
                 
                 ; ***** BOOTLOADER DECLARATIONS ******************************************
                 .equ	NRWW_START_ADDR	= 0x3800
                 .equ	NRWW_STOP_ADDR	= 0x3fff
                 .equ	RWW_START_ADDR	= 0x0
                 .equ	RWW_STOP_ADDR	= 0x37ff
                 .equ	PAGESIZE	= 64
                 .equ	FIRSTBOOTSTART	= 0x3f00
                 .equ	SECONDBOOTSTART	= 0x3e00
                 .equ	THIRDBOOTSTART	= 0x3c00
                 .equ	FOURTHBOOTSTART	= 0x3800
                 .equ	SMALLBOOTSTART	= FIRSTBOOTSTART
                 .equ	LARGEBOOTSTART	= FOURTHBOOTSTART
                 
                 
                 
                 ; ***** INTERRUPT VECTORS ************************************************
                 .equ	INT0addr	= 0x0002	; External Interrupt Request 0
                 .equ	INT1addr	= 0x0004	; External Interrupt Request 1
                 .equ	INT2addr	= 0x0006	; External Interrupt Request 2
                 .equ	OC2addr	= 0x0008	; Timer/Counter2 Compare Match
                 .equ	OVF2addr	= 0x000a	; Timer/Counter2 Overflow
                 .equ	ICP1addr	= 0x000c	; Timer/Counter1 Capture Event
                 .equ	OC1Aaddr	= 0x000e	; Timer/Counter1 Compare Match A
                 .equ	OC1Baddr	= 0x0010	; Timer/Counter1 Compare Match B
                 .equ	OVF1addr	= 0x0012	; Timer/Counter1 Overflow
                 .equ	OC0addr	= 0x0014	; Timer/Counter0 Compare Match
                 .equ	OVF0addr	= 0x0016	; Timer/Counter0 Overflow
                 .equ	SPIaddr	= 0x0018	; Serial Transfer Complete
                 .equ	URXCaddr	= 0x001a	; USART, Rx Complete
                 .equ	UDREaddr	= 0x001c	; USART Data Register Empty
                 .equ	UTXCaddr	= 0x001e	; USART, Tx Complete
                 .equ	ADCCaddr	= 0x0020	; ADC Conversion Complete
                 .equ	ERDYaddr	= 0x0022	; EEPROM Ready
                 .equ	ACIaddr	= 0x0024	; Analog Comparator
                 .equ	TWIaddr	= 0x0026	; 2-wire Serial Interface
                 .equ	SPMRaddr	= 0x0028	; Store Program Memory Ready
                 
                 .equ	INT_VECTORS_SIZE	= 42	; size in words
                 
                 #endif  /* _M32DEF_INC_ */
                 
                 
                 
                 ;***** Created: 2011-02-09 12:03 ******* Source: ATmega32.xml ************
                 ;*************************************************************************
                 ;* A P P L I C A T I O N   N O T E   F O R   T H E   A V R   F A M I L Y
                 ;* 
                 ;* Number            : AVR000
                 ;* File Name         : "m32def.inc"
                 ;* Title             : Register/Bit Definitions for the ATmega32
                 ;* Date              : 2011-02-09
                 ;* Version           : 2.35
                 ;* Support E-mail    : avr@atmel.com
                 ;* Target MCU        : ATmega32
                 ;* 
                 ;* DESCRIPTION
                 ;* When including this file in the assembly program file, all I/O register 
                 ;* names and I/O register bit names appearing in the data book can be used.
                 ;* In addition, the six registers forming the three data pointers X, Y and 
                 ;* Z have been assigned names XL - ZH. Highest RAM address for Internal 
                 ;* SRAM is also defined 
                 ;* 
                 ;* The Register names are represented by their hexadecimal address.
                 ;* 
                 ;* The Register Bit names are represented by their bit number (0-7).
                 ;* 
                 ;* Please observe the difference in using the bit names with instructions
                 ;* such as "sbr"/"cbr" (set/clear bit in register) and "sbrs"/"sbrc"
                 ;* (skip if bit in register set/cleared). The following example illustrates
                 ;* this:
                 ;* 
                 ;* in    r16,PORTB             ;read PORTB latch
                 ;* sbr   r16,(1<<PB6)+(1<<PB5) ;set PB6 and PB5 (use masks, not bit#)
                 ;* out   PORTB,r16             ;output to PORTB
                 ;* 
                 ;* in    r16,TIFR              ;read the Timer Interrupt Flag Register
                 ;* sbrc  r16,TOV0              ;test the overflow flag (use bit#)
                 ;* rjmp  TOV0_is_set           ;jump if set
                 ;* ...                         ;otherwise do something else
                 ;*************************************************************************
                 
                 #ifndef _M32DEF_INC_
                 
                 #endif  /* _M32DEF_INC_ */
                 
                 
                  .def temp=r17		   //define r16 as temp
                  .def byte=r16		   //define r17 as byte (will be used for send byte to LCD)
                  .def menu_loc=r18
                 
                 //==========DATA SEGMENT=================================================
                 // In this segment we can to reserve some memory
                 // for strings for example...
                 .dseg
                 .org 0x0060						//starting from 0x0060 because 
                 								//before that adress we have reserved memory for registers
000060           CO_msg:				.byte 16	//hello world string
000070           CH4_msg:			.byte 16	//CH4 level message string
000080           temperature_msg:	.byte 16	//Temperature message string
000090           time_msg:			.byte 16	//Time message string
0000a0           coords_msg:			.byte 16	//Coordinates message string
0000b0           sound_msg:			.byte 16	//Sound option message string
0000c0           test:				.byte 96	//reserve bytes for 2nd string messages
000120           menu_location:		.byte 1		//current menu location
                 
                 //==========CODE SEGMENT=================================================
                 .cseg
                 .include "int_table.inc"	//interrupt vectors
                 
                  * Interrupt vectors table
                  */ 
                 
                  //=========INTERRUPT VECTORS TABLE=============================================
                  .ORG 0x000        ; (RESET) 
000000 c14c       RJMP reset
                  .ORG 0x002
000002 9518       RETI             ; (INT0) External Interrupt Request 0
                  .ORG 0x004
000004 9518       RETI             ; (INT1) External Interrupt Request 1
                  .ORG 0x006
000006 9518       RETI			  ; (TIMER2 COMP) Timer/Counter2 Compare Match
                  .ORG 0x008
000008 9518       RETI             ; (TIMER2 OVF) Timer/Counter2 Overflow
                  .ORG 0x00A
00000a 9518       RETI			  ; (TIMER1 CAPT) Timer/Counter1 Capture Event
                  .ORG 0x00C 
00000c 9518       RETI             ; (TIMER1 COMPA) Timer/Counter1 Compare Match A
                  .ORG 0x00E
00000e 9518       RETI             ; (TIMER1 COMPB) Timer/Counter1 Compare Match B
                  .ORG 0x010
000010 9518       RETI             ; (TIMER1 OVF) Timer/Counter1 Overflow
                  .ORG 0x012
000012 9518       RETI             ; (TIMER0 OVF) Timer/Counter0 Overflow
                  .ORG 0x014
000014 9518       RETI             ; (SPI,STC) Serial Transfer Complete
                  .ORG 0x016
000016 9518       RETI    	      ; (USART,RXC) USART, Rx Complete
                  .ORG 0x018
000018 9518       RETI             ; (USART,UDRE) USART Data Register Empty
                  .ORG 0x01A
00001a 9518       RETI             ; (USART,TXC) USART, Tx Complete
                  .ORG 0x01C
00001c 9518       RETI	          ; (ADC) ADC Conversion Complete
                  .ORG 0x01E
00001e 9518       RETI             ; (EE_RDY) EEPROM Ready
                  .ORG 0x020
000020 9518       RETI             ; (ANA_COMP) Analog Comparator
                  .ORG 0x022
000022 9518       RETI             ; (TWI) 2-wire Serial Interface
                  .ORG 0x024
000024 9518       RETI             ; (INT2) External Interrupt Request 2
                  .ORG 0x026
000026 9518       RETI             ; (TIMER0 COMP) Timer/Counter0 Compare Match
                  .ORG 0x028
000028 9518       RETI             ; (SPM_RDY) Store Program Memory Ready
                  .ORG 0x030        ; End of table
                 //===============================================================================================
                 
                 .include "menu.inc"			//macro for menu uses
                 
                  * menu.inc
                  *
                  *  Created: 26.10.2015 0:27:02
                  *   Author: Hogs
                  */ 
                 
                  //========MACRO==========================================
                 
                  //--------Init menu page--------------------
                  .macro menu_init
                 
                  load_strings_to_SRAM		//save strings from eeprom to ram
                 
                  ldi YH,high(menu_location) //set current menu page as 0 (first page)
                  ldi YL,low(menu_location)	//
                  ldi temp,0
                  st Y,temp
                 
                  LCD_print_str CO_msg		//print first menu page
                  second_line
                  LCD_print_str CO_msg+96
                  .endm
                  //------------------------------------------
                 
                  //--------Menu previous page----------------
                  .macro menu_prev
                 
                  push menu_loc			//Save all register which will be used
                  push XH				//
                  push XL				//
                  push temp
                  push YH
                  push YL
                 
                  ldi YH,high(menu_location)		//load to Y register adress of
                  ldi YL,low(menu_location)		//current menu page
                  ld menu_loc,Y					//read from SRAM current menu page
                 
                  ldi temp,0					//if current page is first
                  cpse menu_loc,temp			//then going out of procedure
                  rjmp PC+2					//else - continue
                  rjmp Return_On_2_Click		//
                 
                  dec menu_loc				//decrease page because menu moving up
                  
                  ldi temp,16				//
                  mul temp,menu_loc			//counting adress of string
                  mov XL,r0					//which contain first string
                  mov XH,r1					//of menu message
                  ldi temp,0x60				//
                  add XL,temp				//adress = ((page - 1)*16)+96
                  clr temp					//
                  adc XH,temp				//
                 
                  first_line					//set first line for print
                  LCD_print_str_reg			//print message from adress (in X register)
                  
                  ldi temp,16				//
                  mul temp,menu_loc			//counting adress of string
                  mov XL,r0					//which contain second string
                  mov XH,r1					//of menu message
                  ldi temp,0xC0				//
                  add XL,temp				//adress = ((page - 1) * 16)+192
                  clr temp					//
                  adc XH,temp				//
                 
                  second_line				//set second line for print
                  LCD_print_str_reg			//print second string
                 
                  ldi YH,high(menu_location)	//
                  ldi YL,low(menu_location)	//Save current page status to SRAM
                  st Y,menu_loc				//
                 
                  Return_On_2_Click:			
                  pop YL					//return all of used registers
                  pop YH					//to their place
                  pop temp
                  pop XL
                  pop XH
                  pop menu_loc
                 
                  .endm
                  //------------------------------------------
                 
                  //--------Menu next page--------------------
                  .macro menu_next
                 
                  push menu_loc		//save to stack
                  push XH			//all of used registers
                  push XL
                  push temp
                  push YH
                  push YL
                 
                  ldi YH,high(menu_location)	//
                  ldi YL,low(menu_location)	//read number of current page from SRAM
                  ld menu_loc,Y				//
                 
                  ldi temp,5					//if this page is last
                  cpse menu_loc,temp			//then go to return of procedure
                  rjmp PC+2					//else - continue
                  rjmp Return_On_8_Click		//
                 
                  inc menu_loc		//increase page because moving down
                  
                  ldi temp,16			//counting of first string adress
                  mul temp,menu_loc		//and move it to X register
                  mov XL,r0				//
                  mov XH,r1				//adress = ((page + 1) * 16)+96
                  ldi temp,0x60
                  add XL,temp
                  clr temp
                  adc XH,temp
                 
                  first_line			//
                  LCD_print_str_reg	//printing first line
                 
                  ldi temp,16		//counting of second string adress
                  mul temp,menu_loc	//and move it to X register
                  mov XL,r0			//
                  mov XH,r1			//adress = ((page + 1) * 16)+192
                  ldi temp,0xC0
                  add XL,temp
                  clr temp
                  adc XH,temp
                 
                  second_line		//
                  LCD_print_str_reg	//printing second line
                 
                  ldi YH,high(menu_location)	//
                  ldi YL,low(menu_location)	//save new current page to SRAM
                  st Y,menu_loc				//
                 
                  Return_On_8_Click:
                  pop YL				//return all of used registers
                  pop YH				//
                  pop temp
                  pop XL
                  pop XH
                  pop menu_loc
                 
                  .endm
                  //------------------------------------------
                 
                  //      Read from EEPROM and write it in SRAM
                  .macro load_strings_to_SRAM
                  clr YH		 //load to YH register 0
                  ldi YL,0x60 //load to YL 0x60 coz 0x0060 - sram start
                  clr ZL		 //clear Z register
                  clr ZH
                  //?????????????????-----DEBUG------????????????????????????????????????????????????????????????????????
                  ldi r19,193			//r19 is a counter
                 						//USE <LDI r19,97> AFTER DEBUG
                  //?????????????????????????????????????????????????????????????????????????????????????????????????????
                 
                  EE_read_loop:			//loop 96 times
                  rcall EEPROM_read_byte //read byte from EEPROM
                  st Y+,byte				//Store byte to SRAM and post-Inc adress
                  inc ZL					//increment Z register after reading byte
                 
                  dec r19				//loop things...
                  brne EE_read_loop		//go to EE_read_loop label if r19 is not 0
                  .endm
                 
                 //--------------------------------------------
                 
                  //=========PROCEDURES=====================================
                  //------Read Byte form EEPROM-----------------------
                 
                  EEPROM_read_byte:
                  ; Wait for completion of previous write
000030 99e1       sbic EECR,EEWE
000031 cffe       rjmp EEPROM_read_byte
                 
000032 94f8       cli //disable all interrupts
                 
                  ; Set up address (Z register) in address register
000033 bbff       out EEARH, ZH
000034 bbee       out EEARL, ZL
                  ; Start eeprom read by writing EERE
000035 9ae0       sbi EECR,EERE
                  ; Read data from data register
000036 b30d       in byte,EEDR
                 
000037 9478       sei //enable interrupts
000038 9508       ret
                 .include "LCD.inc"			//macro and procedures for HD44780 like displays
                 
                  * Macro and procedures
                  * for HD44780 like LCD 
                  * Sorry for bad english...
                  */ 
                 
                  .equ data = 0x04	   //create constant cmd = 0b00000100 
                  .equ cmd = 0		   //create constant data = 0
                 
                  //========MACRO================================================================
                  
                 //------45 microseconds delay---------------------------------------------
                   
                  .macro delay_45us
                  rcall delay_45us_proc
                  .endm
                 
                 //------2 ms delay---------------------------------------------
                   
                  .macro delay_2ms
                  rcall delay_2ms_proc
                  .endm
                 
                 //------------------------------------------------------------------------
                 
                  //      LCD initialization
                  .macro LCD_init
                  LCD_port_init		//init port C as output
                 
                  ldi temp,0x20
                  out portc,temp
                  sbi portc,3
                  lpm
                  cbi portc,3
                  ldi temp,0xF0
                  out portc,temp
                 
                  LCD_send_cmd 0x28	//init 4-bit mode 2 lines
                  delay_45us
                  LCD_send_cmd 0x01	//clear display
                  delay_2ms
                  LCD_send_cmd 0x0F	//display ON
                  delay_45us
                 
                  LCD_send_cmd 0b0100_0000	//Set CGRAM adress as 0x00
                  delay_45us
                 
                  LCD_send_symbol 0b00000000			//Start sending bytes for draw a new symbol
                  delay_45us							//in this case i draw upper arrow
                  LCD_send_symbol 0b00000000			//for do that i sending next bytes
                  delay_45us							//
                  LCD_send_symbol 0b00000000			//00000000
                  delay_45us							//00000000
                  LCD_send_symbol 0b00000000			//00000000
                  delay_45us							//00000000
                  LCD_send_symbol 0b00000100			//00000100
                  delay_45us							//00001110
                  LCD_send_symbol 0b00001110			//00011111
                  delay_45us							//00000000
                  LCD_send_symbol 0b00011111			//
                  delay_45us							//
                  LCD_send_symbol 0b00000000			//
                  delay_45us							//
                 
                  LCD_send_symbol 0b00000000			//the same like previous but for draw down arrow
                  delay_45us
                  LCD_send_symbol 0b00011111
                  delay_45us
                  LCD_send_symbol 0b00001110
                  delay_45us
                  LCD_send_symbol 0b00000100
                  delay_45us
                  LCD_send_symbol 0b00000000
                  delay_45us
                  LCD_send_symbol 0b00000000
                  delay_45us
                  LCD_send_symbol 0b00000000
                  delay_45us
                  LCD_send_symbol 0b00000000
                  delay_45us
                 
                  first_line	//set DDRAM as 0 (in start of first line)
                  .endm
                 
                 //------------------------------------------------------------------------
                 
                  //      LCD clear
                  .macro LCD_clear
                  push temp
                  push byte
                  LCD_send_cmd 0x01	//clear display
                  delay_2ms
                  pop byte
                  pop temp
                  .endm
                 
                 //------------------------------------------------------------------------
                 
                  //      1st line
                  .macro first_line
                  push temp
                  push byte
                  LCD_send_cmd 0x80	//first line
                  delay_45us
                  pop byte
                  pop temp
                  .endm
                 
                 //------------------------------------------------------------------------
                 
                  //      2nd line
                  .macro second_line
                  push temp
                  push byte
                  LCD_send_cmd 0xC0	//second line
                  delay_45us
                  pop byte
                  pop temp
                  .endm
                 
                 //------------------------------------------------------------------------
                 
                  //      set port C as output for working with display
                  .macro LCD_port_init  
                  ldi temp,0xFC
                  out ddrc,temp
                  clr temp
                  out portc,temp
                  .endm
                 
                 //------------------------------------------------------------------------
                 
                  //      send command to LCD
                  .macro LCD_send_cmd
                  push temp
                  push byte	
                  ldi temp,cmd
                  ldi byte,@0
                  rcall LCD_send_byte_proc
                  pop byte
                  pop temp
                  .endm
                 
                 //------------------------------------------------------------------------
                 
                  //      send symbol to LCD
                  .macro LCD_send_symbol	
                  push temp
                  push byte
                  ldi temp,4
                  ldi byte,@0
                  rcall LCD_send_byte_proc
                  pop byte
                  pop temp
                  .endm
                 
                 //------------------------------------------------------------------------
                 
                  //      print 16-symbol string from sram adress (if adress is const)
                  .macro LCD_print_str
                  push ZH
                  push ZL
                  push temp
                  push byte
                  push r19
                  ldi ZH,high(@0)	//load to high Z-byte high byte of adress
                  ldi ZL,low(@0)	//load to low Z-byte low byte of adress
                  ldi temp,data	//temp = 0x04 for send data to LCD
                 
                  ldi r19,17			//r19 is a counter
                  sram_read_loop:	//loop 16 times
                  ld byte,Z+			//read from SRAM and post-inc
                  rcall LCD_send_byte_proc	//print symbol to LCD
                  delay_45us
                  dec r19			//loop things...
                  brne sram_read_loop//go to sram_read_loop label if r19 is not 0
                 
                  pop r19
                  pop byte
                  pop temp
                  pop ZL
                  pop ZH
                  .endm
                 
                 //------------------------------------------------------------------------
                 
                  //      print 16-symbol string from sram adress (if adress is in register)
                  //					ADRESS MUST BE IN X REGISTER
                  .macro LCD_print_str_reg
                  push temp
                  push byte
                  push XL
                  push XH
                  push r19
                 
                  ldi temp,data	//temp = 0x04 for send data to LCD
                 
                  ldi r19,17			//r19 is a counter
                  sram_read_loop:	//loop 16 times
                  ld byte,X+			//read from SRAM and post-inc
                  rcall LCD_send_byte_proc	//print symbol to LCD
                  delay_45us
                  dec r19			//loop things...
                  brne sram_read_loop//go to sram_read_loop label if r19 is not 0
                 
                  pop r19
                  pop XH
                  pop XL
                  pop byte
                  pop temp
                  .endm
                 
                 //------------------------------------------------------------------------
                 
                 //==============PROCEDURES=====================================================
                 
                 //------45 microseconds delay---------------------------------------------
                       
                  delay_45us_proc:
000039 939f       push r25
00003a ef9f       ser r25 
00003b 959a       delay45: dec  r25
00003c f7f1       brne delay45
00003d 919f       pop r25
00003e 9508       ret
                 
                  //------2 ms delay-------------------------------------------------------
                       
                  delay_2ms_proc:
00003f 939f       push r25
000040 938f       push r24
000041 e28a          ldi  r24, 42
000042 e89e          ldi  r25, 142
000043 959a      delay2: dec  r25
000044 f7f1          brne delay2
000045 958a          dec  r24
000046 f7e1          brne delay2
000047 0000          nop
000048 918f       pop r24
000049 919f       pop r25
00004a 9508       ret
                 
                 //------Send byte to LCD as 4-but mode------------------------------------
                 
                  LCD_send_byte_proc:
00004b 930f       push byte //save symbol to stack
00004c 7014       andi temp,0b0000_0100
00004d bb15       out portc,temp //setting RS line
                 
                  //======High half-byte send=======
00004e 7f00       andi byte,0xF0 //clear low half-byte
                 				//example:
                 				//before ANDI byte was 0b01011111
                 				//after byte is 0b01010000
                 
00004f 2b10       or temp,byte	//add high half-byte to temp register
                 				//example:
                 				//before: temp = 0b00000100, byte = 0b11110000
                 				//after: temp = 0b11110100
                 
000050 bb15       out portc,temp //out temp to port C
000051 95c8       lpm			//3 clocks delay
000052 9aab       sbi portc,3	//enable E signal
000053 95c8       lpm			//3 clocks delay
000054 98ab       cbi portc,3	//disable E signal
000055 dfe3       delay_45us
                  //======Low half-byte send========
000056 7014       andi temp,0b0000_0100
000057 910f       pop byte		//get symbol from stack
000058 700f       andi byte,0x0F //clear high half-byte
                 				//example:
                 				//before andi: byte = 0b01011010
                 				//after: byte = 0b00001010
                 
000059 0f00       lsl byte		//logical shift left
00005a 0f00       lsl byte		//example:
00005b 0f00       lsl byte		//00001010 <- 00010100 <- 00101000 <- 01010000 <- 10100000
00005c 0f00       lsl byte
                 
00005d 2b10       or temp,byte	//add symbol's low half-byte 
00005e bb15       out portc,temp //out temp to port C
00005f 95c8       lpm			//3 clocks delay
000060 9aab       sbi portc,3	//enable E
000061 95c8       lpm			//3 clocks delay
000062 98ab       cbi portc,3	//disable E
000063 95c8       lpm			//3 clocks delay
                  //=====Set port C as 0xFF=========
000064 ef00       ldi byte,0xF0
000065 bb05       out portc,byte	//out to port C 0b11110000
000066 9508       ret
                 //------------------------------------------------------------------------
                 //                          sorry for bad english
                 .include "keyboard.inc"		//macro and procedures for 3x4 keyboard
                 
                  * keyboard.inc
                  * macro and procedures for 3x4 keyboard
                  * Sorry for bad english
                  */ 
                 
                  //=======PROCEDURES=====================================
                  //-------On 1 click-----------------------------
                  On_1_click:
000067 9b82       sbis pind,2		//wait until button is turned off
000068 cffe       rjmp PC-1
000069 9508       ret
                  //-------On 2 click-----------------------------
                  On_2_click:
00006a 932f
00006b 93bf
00006c 93af
00006d 931f
00006e 93df
00006f 93cf
000070 e0d1
000071 e2c0
000072 8128
000073 e010
000074 1321
000075 c001
000076 c04e
000077 952a
000078 e110
000079 9f12
00007a 2da0
00007b 2db1
00007c e610
00007d 0fa1
00007e 2711
00007f 1fb1
000080 931f
000081 930f
000082 931f
000083 930f
000084 e010
000085 e800
000086 dfc4
000087 910f
000088 911f
000089 dfaf
00008a 910f
00008b 911f
00008c 931f
00008d 930f
00008e 93af
00008f 93bf
000090 933f
000091 e014
000092 e131
000093 910d
000094 dfb6
000095 dfa3
000096 953a
000097 f7d9
000098 913f
000099 91bf
00009a 91af
00009b 910f
00009c 911f
00009d e110
00009e 9f12
00009f 2da0
0000a0 2db1
0000a1 ec10
0000a2 0fa1
0000a3 2711
0000a4 1fb1
0000a5 931f
0000a6 930f
0000a7 931f
0000a8 930f
0000a9 e010
0000aa ec00
0000ab df9f
0000ac 910f
0000ad 911f
0000ae df8a
0000af 910f
0000b0 911f
0000b1 931f
0000b2 930f
0000b3 93af
0000b4 93bf
0000b5 933f
0000b6 e014
0000b7 e131
0000b8 910d
0000b9 df91
0000ba df7e
0000bb 953a
0000bc f7d9
0000bd 913f
0000be 91bf
0000bf 91af
0000c0 910f
0000c1 911f
0000c2 e0d1
0000c3 e2c0
0000c4 8328
0000c5 91cf
0000c6 91df
0000c7 911f
0000c8 91af
0000c9 91bf
0000ca 912f       menu_prev 
0000cb 9b82       sbis pind,2		//wait until button is turned off
0000cc cffe       rjmp PC-1
0000cd 9508       ret
                  //-------On 3 click-----------------------------
                  On_3_click:
0000ce 9b82       sbis pind,2		//wait until button is turned off
0000cf cffe       rjmp PC-1
0000d0 9508       ret
                  //-------On 4 click-----------------------------
                  On_4_click:
0000d1 9b83       sbis pind,3		//wait until button is turned off
0000d2 cffe       rjmp PC-1
0000d3 9508       ret
                  //-------On 5 click-----------------------------
                  On_5_click:
0000d4 9b83       sbis pind,3		//wait until button is turned off
0000d5 cffe       rjmp PC-1
0000d6 9508       ret
                  //-------On 6 click-----------------------------
                  On_6_click:
0000d7 9b83       sbis pind,3		//wait until button is turned off
0000d8 cffe       rjmp PC-1
0000d9 9508       ret
                  //-------On 7 click-----------------------------
                  On_7_click:
0000da 9b84       sbis pind,4		//wait until button is turned off
0000db cffe       rjmp PC-1
0000dc 9508       ret
                  //-------On 8 click-----------------------------
                  On_8_click:
0000dd 932f
0000de 93bf
0000df 93af
0000e0 931f
0000e1 93df
0000e2 93cf
0000e3 e0d1
0000e4 e2c0
0000e5 8128
0000e6 e015
0000e7 1321
0000e8 c001
0000e9 c04e
0000ea 9523
0000eb e110
0000ec 9f12
0000ed 2da0
0000ee 2db1
0000ef e610
0000f0 0fa1
0000f1 2711
0000f2 1fb1
0000f3 931f
0000f4 930f
0000f5 931f
0000f6 930f
0000f7 e010
0000f8 e800
0000f9 df51
0000fa 910f
0000fb 911f
0000fc df3c
0000fd 910f
0000fe 911f
0000ff 931f
000100 930f
000101 93af
000102 93bf
000103 933f
000104 e014
000105 e131
000106 910d
000107 df43
000108 df30
000109 953a
00010a f7d9
00010b 913f
00010c 91bf
00010d 91af
00010e 910f
00010f 911f
000110 e110
000111 9f12
000112 2da0
000113 2db1
000114 ec10
000115 0fa1
000116 2711
000117 1fb1
000118 931f
000119 930f
00011a 931f
00011b 930f
00011c e010
00011d ec00
00011e df2c
00011f 910f
000120 911f
000121 df17
000122 910f
000123 911f
000124 931f
000125 930f
000126 93af
000127 93bf
000128 933f
000129 e014
00012a e131
00012b 910d
00012c df1e
00012d df0b
00012e 953a
00012f f7d9
000130 913f
000131 91bf
000132 91af
000133 910f
000134 911f
000135 e0d1
000136 e2c0
000137 8328
000138 91cf
000139 91df
00013a 911f
00013b 91af
00013c 91bf
00013d 912f       menu_next
00013e 9b84       sbis pind,4		//wait until button is turned off
00013f cffe       rjmp PC-1
000140 9508       ret
                  //-------On 9 click-----------------------------
                  On_9_click:
000141 9b84       sbis pind,4		//wait until button is turned off
000142 cffe       rjmp PC-1
000143 9508       ret
                  //-------On 0 click-----------------------------
                  On_0_click:
000144 9b85       sbis pind,5		//wait until button is turned off
000145 cffe       rjmp PC-1
000146 9508       ret
                  //-------On * click-----------------------------
                  On_asterisk_click:
000147 9b85       sbis pind,5		//wait until button is turned off
000148 cffe       rjmp PC-1
000149 9508       ret
                  //-------On # click-----------------------------
                  On_grid_click:
00014a 9b85       sbis pind,5		//wait until button is turned off
00014b cffe       rjmp PC-1
00014c 9508       ret
                  //----------------------------------------------
                  //=======MACRO==========================================
                  //-------Initialization ports for working with keyboard---------
                  .macro keyboard_init
                  ldi temp,0b0000_0111	//set KBD_1 KBD_2 KBD_3 as output
                  out ddrb,temp
                  ldi temp,0b1000_0000	//set KBD_A KBD_B KBD_C KBD_D as input
                  out ddrd,temp
                  ldi temp,0b0011_1100	//activate pull-ups
                  out portd,temp
                  .endm
                  //-------Check buttons------------------------------------------
                  .macro keyboard_check
                 
                 	ldi temp,0b0000_0110		//check 1st column
                 	out portb,temp
                 
                 		sbis pind,2				//sbic - skip if bit in port is set
                 		rcall On_1_click		//if bit 2 in pind is 1 this instruction 
                 								//will be skipped
                 		sbis pind,3				//that mean if button was pressed
                 		rcall On_4_click		//the next instruction is call procedure
                 								//which do something what you need...
                 		sbis pind,4				//and after that program counter going back
                 		rcall On_7_click		//to key survay
                 
                 		sbis pind,5
                 		rcall On_asterisk_click
                 
                 	ldi temp,0b0000_0101		//check 2nd column
                 	out portb,temp
                 
                 		sbis pind,2				//the same like in previous
                 		rcall On_2_click		//but for next column
                 
                 		sbis pind,3
                 		rcall On_5_click
                 
                 		sbis pind,4
                 		rcall On_8_click
                 
                 		sbis pind,5
                 		rcall On_0_click
                 
                 
                 	ldi temp,0b0000_0011		//check 3rd column
                 	out portb,temp
                 
                 		sbis pind,2
                 		rcall On_3_click
                 
                 		sbis pind,3
                 		rcall On_6_click
                 
                 		sbis pind,4
                 		rcall On_9_click
                 
                 		sbis pind,5
                 		rcall On_grid_click
                 
                  .endm
                 //================================================================
                 
                 reset:
                 .include "core_init.inc"	//clear sram, registers and stack init
                 
                  * Clear all registers and SRAM
                  * Initialization stack
                  */ 
                 
                 //================SRAM CLEAR=================================
                 RAM_Flush:	
00014d e6e0      LDI	ZL,Low(SRAM_START)
00014e e0f0      LDI	ZH,High(SRAM_START)
00014f 2700      CLR	R16
                 Flush:
000150 9301      ST Z+,R16
000151 30f8      CPI	ZH,High(RAMEND+1)
000152 f7e9      BRNE Flush
000153 36e0      CPI	ZL,Low(RAMEND+1)	
000154 f7d9      BRNE Flush 
000155 27ee      CLR	ZL
000156 27ff      CLR	ZH
                 //===============REGISTERS CLEAR=============================
000157 e1ee      LDI	ZL, 30			
000158 27ff      CLR	ZH		
000159 95ea      DEC	ZL		
00015a 83f0      ST Z,ZH		
00015b f7e9      BRNE PC-2		
                 //===============STACK INIT==================================
00015c e50f      LDI R16,Low(RAMEND)		
00015d bf0d      OUT SPL,R16			
00015e e008      LDI R16,High(RAMEND)
00015f bf0e      OUT SPH,R16
                 //-----------Program start-------------------------
                 
000160 e017
000161 bb17
000162 e810
000163 bb11
000164 e31c
000165 bb12      keyboard_init				//initialization of ports for keyboard
000166 ef1c
000167 bb14
000168 2711
000169 bb15
00016a e210
00016b bb15
00016c 9aab
00016d 95c8
00016e 98ab
00016f ef10
000170 bb15
000171 931f
000172 930f
000173 e010
000174 e208
000175 ded5
000176 910f
000177 911f
000178 dec0
000179 931f
00017a 930f
00017b e010
00017c e001
00017d decd
00017e 910f
00017f 911f
000180 debe
000181 931f
000182 930f
000183 e010
000184 e00f
000185 dec5
000186 910f
000187 911f
000188 deb0
000189 931f
00018a 930f
00018b e010
00018c e400
00018d debd
00018e 910f
00018f 911f
000190 dea8
000191 931f
000192 930f
000193 e014
000194 e000
000195 deb5
000196 910f
000197 911f
000198 dea0
000199 931f
00019a 930f
00019b e014
00019c e000
00019d dead
00019e 910f
00019f 911f
0001a0 de98
0001a1 931f
0001a2 930f
0001a3 e014
0001a4 e000
0001a5 dea5
0001a6 910f
0001a7 911f
0001a8 de90
0001a9 931f
0001aa 930f
0001ab e014
0001ac e000
0001ad de9d
0001ae 910f
0001af 911f
0001b0 de88
0001b1 931f
0001b2 930f
0001b3 e014
0001b4 e004
0001b5 de95
0001b6 910f
0001b7 911f
0001b8 de80
0001b9 931f
0001ba 930f
0001bb e014
0001bc e00e
0001bd de8d
0001be 910f
0001bf 911f
0001c0 de78
0001c1 931f
0001c2 930f
0001c3 e014
0001c4 e10f
0001c5 de85
0001c6 910f
0001c7 911f
0001c8 de70
0001c9 931f
0001ca 930f
0001cb e014
0001cc e000
0001cd de7d
0001ce 910f
0001cf 911f
0001d0 de68
0001d1 931f
0001d2 930f
0001d3 e014
0001d4 e000
0001d5 de75
0001d6 910f
0001d7 911f
0001d8 de60
0001d9 931f
0001da 930f
0001db e014
0001dc e10f
0001dd de6d
0001de 910f
0001df 911f
0001e0 de58
0001e1 931f
0001e2 930f
0001e3 e014
0001e4 e00e
0001e5 de65
0001e6 910f
0001e7 911f
0001e8 de50
0001e9 931f
0001ea 930f
0001eb e014
0001ec e004
0001ed de5d
0001ee 910f
0001ef 911f
0001f0 de48
0001f1 931f
0001f2 930f
0001f3 e014
0001f4 e000
0001f5 de55
0001f6 910f
0001f7 911f
0001f8 de40
0001f9 931f
0001fa 930f
0001fb e014
0001fc e000
0001fd de4d
0001fe 910f
0001ff 911f
000200 de38
000201 931f
000202 930f
000203 e014
000204 e000
000205 de45
000206 910f
000207 911f
000208 de30
000209 931f
00020a 930f
00020b e014
00020c e000
00020d de3d
00020e 910f
00020f 911f
000210 de28
000211 931f
000212 930f
000213 931f
000214 930f
000215 e010
000216 e800
000217 de33
000218 910f
000219 911f
00021a de1e
00021b 910f
00021c 911f      LCD_init					//LCD initialization
00021d 27dd
00021e e6c0
00021f 27ee
000220 27ff
000221 ec31
000222 de0d
000223 9309
000224 95e3
000225 953a
000226 f7d9
000227 e0d1
000228 e2c0
000229 e010
00022a 8318
00022b 93ff
00022c 93ef
00022d 931f
00022e 930f
00022f 933f
000230 e0f0
000231 e6e0
000232 e014
000233 e131
000234 9101
000235 de15
000236 de02
000237 953a
000238 f7d9
000239 913f
00023a 910f
00023b 911f
00023c 91ef
00023d 91ff
00023e 931f
00023f 930f
000240 931f
000241 930f
000242 e010
000243 ec00
000244 de06
000245 910f
000246 911f
000247 ddf1
000248 910f
000249 911f
00024a 93ff
00024b 93ef
00024c 931f
00024d 930f
00024e 933f
00024f e0f0
000250 ece0
000251 e014
000252 e131
000253 9101
000254 ddf6
000255 dde3
000256 953a
000257 f7d9
000258 913f
000259 910f
00025a 911f
00025b 91ef
00025c 91ff      menu_init
                 
                 //-----------MAIN----------------------------------
                 main:			
00025d e016
00025e bb18
00025f 9b82
000260 de06
000261 9b83
000262 de6e
000263 9b84
000264 de75
000265 9b85
000266 dee0
000267 e015
000268 bb18
000269 9b82
00026a ddff
00026b 9b83
00026c de67
00026d 9b84
00026e de6e
00026f 9b85
000270 ded3
000271 e013
000272 bb18
000273 9b82
000274 de59
000275 9b83
000276 de60
000277 9b84
000278 dec8
000279 9b85
00027a decf      	keyboard_check		//check for buttons press
00027b cfe1      rjmp main		
                 //-------------------------------------------------
                 //========EEPROM SEGMENT=================================================
                 .eseg
                 .org 0
000000 4c
000001 65
000002 76
000003 65
000004 6c
000005 20
000006 43
000007 4f
000008 20
000009 20
00000a 20
00000b 20
00000c 20
00000d 20
00000e 20
00000f 20        ee_hello_msg:	.db "Level CO        "
000010 4c
000011 65
000012 76
000013 65
000014 6c
000015 20
000016 43
000017 48
000018 34
000019 20
00001a 20
00001b 20
00001c 20
00001d 20
00001e 20
00001f 00        ee_CH4_msg:		.db "Level CH4      ",0
000020 54
000021 65
000022 6d
000023 70
000024 65
000025 72
000026 61
000027 74
000028 75
000029 72
00002a 65
00002b 20
00002c 20
00002d 20
00002e 20
00002f 00        ee_temp_msg:	.db "Temperature    ",0
000030 43
000031 6f
000032 6f
000033 72
000034 64
000035 69
000036 6e
000037 61
000038 74
000039 65
00003a 73
00003b 20
00003c 20
00003d 20
00003e 20
00003f 00        ee_coords_msg:	.db "Coordinates    ",0
000040 54
000041 69
000042 6d
000043 65
000044 20
000045 20
000046 20
000047 20
000048 20
000049 20
00004a 20
00004b 20
00004c 20
00004d 20
00004e 20
00004f 00        ee_time_msg:	.db "Time           ",0
000050 53
000051 6f
000052 75
000053 6e
000054 64
000055 28
000056 35
000057 2d
000058 4f
000059 6e
00005a 2f
00005b 4f
00005c 66
00005d 66
00005e 29
00005f 00        ee_sound_msg:	.db "Sound(5-On/Off)",0
000060 74
000061 65
000062 73
000063 74
000064 20
000065 73
000066 74
000067 72
000068 20
000069 31
00006a 20
00006b 20
00006c 20
00006d 20
00006e 20
00006f 01        ee_test_msg1:	.db "test str 1     ",1
000070 74
000071 65
000072 73
000073 74
000074 20
000075 73
000076 74
000077 72
000078 20
000079 32
00007a 20
00007b 20
00007c 20
00007d 20
00007e 20
00007f 01        ee_test_msg2:	.db "test str 2     ",1
000080 74
000081 65
000082 73
000083 74
000084 20
000085 73
000086 74
000087 72
000088 20
000089 33
00008a 20
00008b 20
00008c 20
00008d 20
00008e 20
00008f 01        ee_test_msg3:	.db "test str 3     ",1
000090 74
000091 65
000092 73
000093 74
000094 20
000095 73
000096 74
000097 72
000098 20
000099 34
00009a 20
00009b 20
00009c 20
00009d 20
00009e 20
00009f 01        ee_test_msg4:	.db "test str 4     ",1
0000a0 74
0000a1 65
0000a2 73
0000a3 74
0000a4 20
0000a5 73
0000a6 74
0000a7 72
0000a8 20
0000a9 35
0000aa 20
0000ab 20
0000ac 20
0000ad 20
0000ae 20
0000af 01        ee_test_msg5:	.db "test str 5     ",1
0000b0 74
0000b1 65
0000b2 73
0000b3 74
0000b4 20
0000b5 73
0000b6 74
0000b7 72
0000b8 20
0000b9 36
0000ba 20
0000bb 20
0000bc 20
0000bd 20
0000be 20
0000bf 20        ee_test_msg6:	.db "test str 6      "
                 //=======================================================================


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

"ATmega32" register use summary:
r0 :   4 r1 :   4 r2 :   0 r3 :   0 r4 :   0 r5 :   0 r6 :   0 r7 :   0 
r8 :   0 r9 :   0 r10:   0 r11:   0 r12:   0 r13:   0 r14:   0 r15:   0 
r16: 128 r17: 169 r18:  16 r19:  26 r20:   0 r21:   0 r22:   0 r23:   0 
r24:   4 r25:   8 r26:  20 r27:  20 r28:  10 r29:  10 r30:  14 r31:  13 
x  :   4 y  :   6 z  :   4 
Registers used: 17 out of 35 (48.6%)

"ATmega32" instruction use summary:
.lds  :   0 .sts  :   0 adc   :   4 add   :   4 adiw  :   0 and   :   0 
andi  :   4 asr   :   0 bclr  :   0 bld   :   0 brbc  :   0 brbs  :   0 
brcc  :   0 brcs  :   0 break :   0 breq  :   0 brge  :   0 brhc  :   0 
brhs  :   0 brid  :   0 brie  :   0 brlo  :   0 brlt  :   0 brmi  :   0 
brne  :  13 brpl  :   0 brsh  :   0 brtc  :   0 brts  :   0 brvc  :   0 
brvs  :   0 bset  :   0 bst   :   0 call  :   0 cbi   :   3 cbr   :   0 
clc   :   0 clh   :   0 cli   :   1 cln   :   0 clr   :  12 cls   :   0 
clt   :   0 clv   :   0 clz   :   0 com   :   0 cp    :   0 cpc   :   0 
cpi   :   2 cpse  :   2 dec   :  12 eor   :   0 fmul  :   0 fmuls :   0 
fmulsu:   0 icall :   0 ijmp  :   0 in    :   1 inc   :   2 jmp   :   0 
ld    :   8 ldd   :   0 ldi   : 108 lds   :   0 lpm   :  18 lsl   :   4 
lsr   :   0 mov   :   8 movw  :   0 mul   :   4 muls  :   0 mulsu :   0 
neg   :   0 nop   :   1 or    :   2 ori   :   0 out   :  18 pop   : 110 
push  : 110 rcall :  78 ret   :  16 reti  :  20 rjmp  :  19 rol   :   0 
ror   :   0 sbc   :   0 sbci  :   0 sbi   :   4 sbic  :   1 sbis  :  24 
sbiw  :   0 sbr   :   0 sbrc  :   0 sbrs  :   0 sec   :   0 seh   :   0 
sei   :   1 sen   :   0 ser   :   1 ses   :   0 set   :   0 sev   :   0 
sez   :   0 sleep :   0 spm   :   0 st    :   6 std   :   0 sts   :   0 
sub   :   0 subi  :   0 swap  :   0 tst   :   0 wdr   :   0 
Instructions used: 33 out of 113 (29.2%)

"ATmega32" memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x0004f8   1218      0   1218   32768   3.7%
[.dseg] 0x000060 0x000121      0    193    193    2048   9.4%
[.eseg] 0x000000 0x0000c0      0    192    192    1024  18.8%

Assembly complete, 0 errors, 0 warnings
